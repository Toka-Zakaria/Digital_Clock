
Digital_Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004cb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00004cb4  00004d48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080006a  0080006a  00004d52  2**0
                  ALLOC
  3 .stab         0000372c  00000000  00000000  00004d54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e53  00000000  00000000  00008480  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a2d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a413  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a583  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000c1cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d0b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000de64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000dfc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e251  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ea1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_1>
       8:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__vector_2>
       c:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__vector_3>
      10:	0c 94 0d 13 	jmp	0x261a	; 0x261a <__vector_4>
      14:	0c 94 ce 12 	jmp	0x259c	; 0x259c <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 50 12 	jmp	0x24a0	; 0x24a0 <__vector_7>
      20:	0c 94 8f 12 	jmp	0x251e	; 0x251e <__vector_8>
      24:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__vector_9>
      28:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__vector_10>
      2c:	0c 94 93 11 	jmp	0x2326	; 0x2326 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	fc e4       	ldi	r31, 0x4C	; 76
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 37       	cpi	r26, 0x7A	; 122
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <main>
      8a:	0c 94 58 26 	jmp	0x4cb0	; 0x4cb0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 dc 25 	jmp	0x4bb8	; 0x4bb8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f8 25 	jmp	0x4bf0	; 0x4bf0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 04 26 	jmp	0x4c08	; 0x4c08 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 04 26 	jmp	0x4c08	; 0x4c08 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 dc 25 	jmp	0x4bb8	; 0x4bb8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f8 25 	jmp	0x4bf0	; 0x4bf0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 04 26 	jmp	0x4c08	; 0x4c08 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 04 26 	jmp	0x4c08	; 0x4c08 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 04 26 	jmp	0x4c08	; 0x4c08 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ec 25 	jmp	0x4bd8	; 0x4bd8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 08 26 	jmp	0x4c10	; 0x4c10 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_1>:
 *******************************************************************************/
/**************************************************************************
 *                            Interrupt0                                  *
 * ************************************************************************/
ISR(INT0_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	if(g_INT0_callBackPtr != NULL_PTR)
     b70:	80 91 6a 00 	lds	r24, 0x006A
     b74:	90 91 6b 00 	lds	r25, 0x006B
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	29 f0       	breq	.+10     	; 0xb86 <__vector_1+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_INT0_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     b7c:	e0 91 6a 00 	lds	r30, 0x006A
     b80:	f0 91 6b 00 	lds	r31, 0x006B
     b84:	09 95       	icall
	}

	/* Clear the flag if interrupt 0 at the end of ISR */

	GENERAL_INTERRUPT_FLAG_REGISTER = SET_BIT(GENERAL_INTERRUPT_FLAG_REGISTER, EXTERNAL_INTERRUPT_FLAG_0);
     b86:	2a e5       	ldi	r18, 0x5A	; 90
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	aa e5       	ldi	r26, 0x5A	; 90
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	ea e5       	ldi	r30, 0x5A	; 90
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	80 64       	ori	r24, 0x40	; 64
     b96:	8c 93       	st	X, r24
     b98:	8c 91       	ld	r24, X
     b9a:	f9 01       	movw	r30, r18
     b9c:	80 83       	st	Z, r24
}
     b9e:	cf 91       	pop	r28
     ba0:	df 91       	pop	r29
     ba2:	ff 91       	pop	r31
     ba4:	ef 91       	pop	r30
     ba6:	bf 91       	pop	r27
     ba8:	af 91       	pop	r26
     baa:	9f 91       	pop	r25
     bac:	8f 91       	pop	r24
     bae:	7f 91       	pop	r23
     bb0:	6f 91       	pop	r22
     bb2:	5f 91       	pop	r21
     bb4:	4f 91       	pop	r20
     bb6:	3f 91       	pop	r19
     bb8:	2f 91       	pop	r18
     bba:	0f 90       	pop	r0
     bbc:	0f be       	out	0x3f, r0	; 63
     bbe:	0f 90       	pop	r0
     bc0:	1f 90       	pop	r1
     bc2:	18 95       	reti

00000bc4 <__vector_2>:
/**************************************************************************
 *                            Interrupt1                                  *
 * ************************************************************************/

ISR(INT1_vect)
{
     bc4:	1f 92       	push	r1
     bc6:	0f 92       	push	r0
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	0f 92       	push	r0
     bcc:	11 24       	eor	r1, r1
     bce:	2f 93       	push	r18
     bd0:	3f 93       	push	r19
     bd2:	4f 93       	push	r20
     bd4:	5f 93       	push	r21
     bd6:	6f 93       	push	r22
     bd8:	7f 93       	push	r23
     bda:	8f 93       	push	r24
     bdc:	9f 93       	push	r25
     bde:	af 93       	push	r26
     be0:	bf 93       	push	r27
     be2:	ef 93       	push	r30
     be4:	ff 93       	push	r31
     be6:	df 93       	push	r29
     be8:	cf 93       	push	r28
     bea:	cd b7       	in	r28, 0x3d	; 61
     bec:	de b7       	in	r29, 0x3e	; 62
	if(g_INT1_callBackPtr != NULL_PTR)
     bee:	80 91 6c 00 	lds	r24, 0x006C
     bf2:	90 91 6d 00 	lds	r25, 0x006D
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	29 f0       	breq	.+10     	; 0xc04 <__vector_2+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_INT1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     bfa:	e0 91 6c 00 	lds	r30, 0x006C
     bfe:	f0 91 6d 00 	lds	r31, 0x006D
     c02:	09 95       	icall
	}


	/* Clear the flag if interrupt 1 at the end of ISR */

	GENERAL_INTERRUPT_FLAG_REGISTER = SET_BIT(GENERAL_INTERRUPT_FLAG_REGISTER, EXTERNAL_INTERRUPT_FLAG_1);
     c04:	2a e5       	ldi	r18, 0x5A	; 90
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	aa e5       	ldi	r26, 0x5A	; 90
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	ea e5       	ldi	r30, 0x5A	; 90
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	80 68       	ori	r24, 0x80	; 128
     c14:	8c 93       	st	X, r24
     c16:	8c 91       	ld	r24, X
     c18:	f9 01       	movw	r30, r18
     c1a:	80 83       	st	Z, r24
}
     c1c:	cf 91       	pop	r28
     c1e:	df 91       	pop	r29
     c20:	ff 91       	pop	r31
     c22:	ef 91       	pop	r30
     c24:	bf 91       	pop	r27
     c26:	af 91       	pop	r26
     c28:	9f 91       	pop	r25
     c2a:	8f 91       	pop	r24
     c2c:	7f 91       	pop	r23
     c2e:	6f 91       	pop	r22
     c30:	5f 91       	pop	r21
     c32:	4f 91       	pop	r20
     c34:	3f 91       	pop	r19
     c36:	2f 91       	pop	r18
     c38:	0f 90       	pop	r0
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	0f 90       	pop	r0
     c3e:	1f 90       	pop	r1
     c40:	18 95       	reti

00000c42 <__vector_3>:

/**************************************************************************
 *                            Interrupt2                                  *
 * ************************************************************************/
ISR(INT2_vect)
{
     c42:	1f 92       	push	r1
     c44:	0f 92       	push	r0
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	0f 92       	push	r0
     c4a:	11 24       	eor	r1, r1
     c4c:	2f 93       	push	r18
     c4e:	3f 93       	push	r19
     c50:	4f 93       	push	r20
     c52:	5f 93       	push	r21
     c54:	6f 93       	push	r22
     c56:	7f 93       	push	r23
     c58:	8f 93       	push	r24
     c5a:	9f 93       	push	r25
     c5c:	af 93       	push	r26
     c5e:	bf 93       	push	r27
     c60:	ef 93       	push	r30
     c62:	ff 93       	push	r31
     c64:	df 93       	push	r29
     c66:	cf 93       	push	r28
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
	if(g_INT2_callBackPtr != NULL_PTR)
     c6c:	80 91 6e 00 	lds	r24, 0x006E
     c70:	90 91 6f 00 	lds	r25, 0x006F
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	29 f0       	breq	.+10     	; 0xc82 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_INT2_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     c78:	e0 91 6e 00 	lds	r30, 0x006E
     c7c:	f0 91 6f 00 	lds	r31, 0x006F
     c80:	09 95       	icall
	}


	/* Clear the flag if interrupt 2 at the end of ISR */

	GENERAL_INTERRUPT_FLAG_REGISTER = SET_BIT(GENERAL_INTERRUPT_FLAG_REGISTER, EXTERNAL_INTERRUPT_FLAG_2);
     c82:	2a e5       	ldi	r18, 0x5A	; 90
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	aa e5       	ldi	r26, 0x5A	; 90
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	ea e5       	ldi	r30, 0x5A	; 90
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	80 62       	ori	r24, 0x20	; 32
     c92:	8c 93       	st	X, r24
     c94:	8c 91       	ld	r24, X
     c96:	f9 01       	movw	r30, r18
     c98:	80 83       	st	Z, r24
}
     c9a:	cf 91       	pop	r28
     c9c:	df 91       	pop	r29
     c9e:	ff 91       	pop	r31
     ca0:	ef 91       	pop	r30
     ca2:	bf 91       	pop	r27
     ca4:	af 91       	pop	r26
     ca6:	9f 91       	pop	r25
     ca8:	8f 91       	pop	r24
     caa:	7f 91       	pop	r23
     cac:	6f 91       	pop	r22
     cae:	5f 91       	pop	r21
     cb0:	4f 91       	pop	r20
     cb2:	3f 91       	pop	r19
     cb4:	2f 91       	pop	r18
     cb6:	0f 90       	pop	r0
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	0f 90       	pop	r0
     cbc:	1f 90       	pop	r1
     cbe:	18 95       	reti

00000cc0 <INT0_Init>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void INT0_Init(const INT0_ConfigType * INT0_config_PTR)
{
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <INT0_Init+0x6>
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	9a 83       	std	Y+2, r25	; 0x02
     ccc:	89 83       	std	Y+1, r24	; 0x01

	/*configure pin of interrupt0 as input pin*/
	INTERRUPT0_DIRECTION_PORT = CLEAR_BIT(INTERRUPT0_DIRECTION_PORT, INTERRUPT0_PIN);
     cce:	21 e3       	ldi	r18, 0x31	; 49
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	a1 e3       	ldi	r26, 0x31	; 49
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e1 e3       	ldi	r30, 0x31	; 49
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	8b 7f       	andi	r24, 0xFB	; 251
     cde:	8c 93       	st	X, r24
     ce0:	8c 91       	ld	r24, X
     ce2:	f9 01       	movw	r30, r18
     ce4:	80 83       	st	Z, r24
	/*static configuration of internal pull up resistance*/
#if (INTERNAL_PULL_UP_INT0 != FALSE)
	{

		/*Activate internal pull up for interrupt 0*/
		INTERRUPT0_DATA_PORT = SET_BIT(INTERRUPT0_DATA_PORT, INTERRUPT0_PIN);
     ce6:	22 e3       	ldi	r18, 0x32	; 50
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	a2 e3       	ldi	r26, 0x32	; 50
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e2 e3       	ldi	r30, 0x32	; 50
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	84 60       	ori	r24, 0x04	; 4
     cf6:	8c 93       	st	X, r24
     cf8:	8c 91       	ld	r24, X
     cfa:	f9 01       	movw	r30, r18
     cfc:	80 83       	st	Z, r24
	}/*end of INTERNAL_PULL_UP_INT0  */
#endif


	/*configure the control edge for interrupt 0*/
	MCU_CONTROL_REGISTER = (MCU_CONTROL_REGISTER & 0XFC) | (INT0_config_PTR->INT0_senseControl) ;
     cfe:	a5 e5       	ldi	r26, 0x55	; 85
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e5 e5       	ldi	r30, 0x55	; 85
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	98 2f       	mov	r25, r24
     d0a:	9c 7f       	andi	r25, 0xFC	; 252
     d0c:	e9 81       	ldd	r30, Y+1	; 0x01
     d0e:	fa 81       	ldd	r31, Y+2	; 0x02
     d10:	80 81       	ld	r24, Z
     d12:	89 2b       	or	r24, r25
     d14:	8c 93       	st	X, r24

	/*activate external interrupt 0 interrupt enable*/
	GENERAL_INTERRUPT_CONTROL_REGISTER = (GENERAL_INTERRUPT_CONTROL_REGISTER & 0XBF) | (1<<EXTRNAL_INTERRUPT0_ENABL_BIT);
     d16:	ab e5       	ldi	r26, 0x5B	; 91
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	eb e5       	ldi	r30, 0x5B	; 91
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	80 64       	ori	r24, 0x40	; 64
     d22:	8c 93       	st	X, r24

}
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	08 95       	ret

00000d2e <INT1_Init>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void INT1_Init(const INT1_ConfigType * INT1_config_PTR)
{
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	00 d0       	rcall	.+0      	; 0xd34 <INT1_Init+0x6>
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	9a 83       	std	Y+2, r25	; 0x02
     d3a:	89 83       	std	Y+1, r24	; 0x01

	/*configure interrupt 1 pin as input pin*/
	INTERRUPT1_DIRECTION_PORT = CLEAR_BIT(INTERRUPT1_DIRECTION_PORT, INTERRUPT1_PIN);
     d3c:	21 e3       	ldi	r18, 0x31	; 49
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	a1 e3       	ldi	r26, 0x31	; 49
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	e1 e3       	ldi	r30, 0x31	; 49
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	87 7f       	andi	r24, 0xF7	; 247
     d4c:	8c 93       	st	X, r24
     d4e:	8c 91       	ld	r24, X
     d50:	f9 01       	movw	r30, r18
     d52:	80 83       	st	Z, r24
	/*static configuration for the internal interrupt resistance*/
#if (INTERNAL_PULL_UP_INT1 != FALSE)
	{

		/*Activate internal pull up for interrupt 0*/
		INTERRUPT1_DATA_PORT = SET_BIT(INTERRUPT1_DATA_PORT, INTERRUPT1_PIN);
     d54:	22 e3       	ldi	r18, 0x32	; 50
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	a2 e3       	ldi	r26, 0x32	; 50
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e2 e3       	ldi	r30, 0x32	; 50
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	88 60       	ori	r24, 0x08	; 8
     d64:	8c 93       	st	X, r24
     d66:	8c 91       	ld	r24, X
     d68:	f9 01       	movw	r30, r18
     d6a:	80 83       	st	Z, r24
	}/*end of INTERNAL_PULL_UP_INT0  */
#endif


	/*configure control edge for interrupt 1*/
	MCU_CONTROL_REGISTER = (MCU_CONTROL_REGISTER & 0XF3) |
     d6c:	a5 e5       	ldi	r26, 0x55	; 85
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e5 e5       	ldi	r30, 0x55	; 85
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	28 2f       	mov	r18, r24
     d78:	23 7f       	andi	r18, 0xF3	; 243
     d7a:	e9 81       	ldd	r30, Y+1	; 0x01
     d7c:	fa 81       	ldd	r31, Y+2	; 0x02
     d7e:	80 81       	ld	r24, Z
     d80:	88 2f       	mov	r24, r24
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	82 2b       	or	r24, r18
     d8e:	8c 93       	st	X, r24
			( (INT1_config_PTR->INT1_senseControl)<< INTERRUPT1_SENSE_CONTROL_BITS_SHIFT_VALUE);

	/*active external interrupt interrupt enable for interrupt 1*/
	GENERAL_INTERRUPT_CONTROL_REGISTER = (GENERAL_INTERRUPT_CONTROL_REGISTER & 0X7F) | (1<<EXTRNAL_INTERRUPT1_ENABL_BIT);
     d90:	ab e5       	ldi	r26, 0x5B	; 91
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	eb e5       	ldi	r30, 0x5B	; 91
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	80 68       	ori	r24, 0x80	; 128
     d9c:	8c 93       	st	X, r24
}
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	08 95       	ret

00000da8 <INT2_Init>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void INT2_Init(const INT2_ConfigType * INT2_config_PTR)
{
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	00 d0       	rcall	.+0      	; 0xdae <INT2_Init+0x6>
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	9a 83       	std	Y+2, r25	; 0x02
     db4:	89 83       	std	Y+1, r24	; 0x01
	/*configure interrupt 2 pin as input pin */
	INTERRUPT2_DIRECTION_PORT = CLEAR_BIT(INTERRUPT2_DIRECTION_PORT, INTERRUPT2_PIN);
     db6:	27 e3       	ldi	r18, 0x37	; 55
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	a7 e3       	ldi	r26, 0x37	; 55
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e7 e3       	ldi	r30, 0x37	; 55
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	8b 7f       	andi	r24, 0xFB	; 251
     dc6:	8c 93       	st	X, r24
     dc8:	8c 91       	ld	r24, X
     dca:	f9 01       	movw	r30, r18
     dcc:	80 83       	st	Z, r24
	/*static configuration for interrupt 2 resistance*/
#if (INTERNAL_PULL_UP_INT2 != FALSE)
	{

		/*Activate internal pull up for interrupt 0*/
		INTERRUPT2_DATA_PORT = SET_BIT(INTERRUPT2_DATA_PORT, INTERRUPT2_PIN);
     dce:	28 e3       	ldi	r18, 0x38	; 56
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	a8 e3       	ldi	r26, 0x38	; 56
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e8 e3       	ldi	r30, 0x38	; 56
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	84 60       	ori	r24, 0x04	; 4
     dde:	8c 93       	st	X, r24
     de0:	8c 91       	ld	r24, X
     de2:	f9 01       	movw	r30, r18
     de4:	80 83       	st	Z, r24

	}/*end of INTERNAL_PULL_UP_INT0  */
#endif

	/*configure control edge for interrupt 2*/
	MCU_CONTROL_AND_STATUS_REGISTER = (MCU_CONTROL_AND_STATUS_REGISTER & 0XBF) |
     de6:	a4 e5       	ldi	r26, 0x54	; 84
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e4 e5       	ldi	r30, 0x54	; 84
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	28 2f       	mov	r18, r24
     df2:	2f 7b       	andi	r18, 0xBF	; 191
     df4:	e9 81       	ldd	r30, Y+1	; 0x01
     df6:	fa 81       	ldd	r31, Y+2	; 0x02
     df8:	80 81       	ld	r24, Z
     dfa:	88 2f       	mov	r24, r24
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	81 70       	andi	r24, 0x01	; 1
     e00:	90 70       	andi	r25, 0x00	; 0
     e02:	00 24       	eor	r0, r0
     e04:	96 95       	lsr	r25
     e06:	87 95       	ror	r24
     e08:	07 94       	ror	r0
     e0a:	96 95       	lsr	r25
     e0c:	87 95       	ror	r24
     e0e:	07 94       	ror	r0
     e10:	98 2f       	mov	r25, r24
     e12:	80 2d       	mov	r24, r0
     e14:	82 2b       	or	r24, r18
     e16:	8c 93       	st	X, r24
			                  ( ((INT2_config_PTR->INT2_senseControl) & 0X01)<< INTERRUPT_SENSE_CONTROL_2);

	/*Active external interrupt interrupt enable*/
	GENERAL_INTERRUPT_CONTROL_REGISTER = (GENERAL_INTERRUPT_CONTROL_REGISTER & 0XCF) | (1<<EXTRNAL_INTERRUPT2_ENABL_BIT);
     e18:	ab e5       	ldi	r26, 0x5B	; 91
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	eb e5       	ldi	r30, 0x5B	; 91
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	8f 7c       	andi	r24, 0xCF	; 207
     e24:	80 62       	ori	r24, 0x20	; 32
     e26:	8c 93       	st	X, r24
}
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	cf 91       	pop	r28
     e2e:	df 91       	pop	r29
     e30:	08 95       	ret

00000e32 <INT0_setCallBack>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void INT0_setCallBack(void(*INT0_ptr)(void))
{
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	00 d0       	rcall	.+0      	; 0xe38 <INT0_setCallBack+0x6>
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	9a 83       	std	Y+2, r25	; 0x02
     e3e:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_INT0_callBackPtr = INT0_ptr;
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	9a 81       	ldd	r25, Y+2	; 0x02
     e44:	90 93 6b 00 	sts	0x006B, r25
     e48:	80 93 6a 00 	sts	0x006A, r24

}
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	08 95       	ret

00000e56 <INT1_setCallBack>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void INT1_setCallBack(void(*INT1_ptr)(void))
{
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <INT1_setCallBack+0x6>
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	9a 83       	std	Y+2, r25	; 0x02
     e62:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_INT1_callBackPtr = INT1_ptr;
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	9a 81       	ldd	r25, Y+2	; 0x02
     e68:	90 93 6d 00 	sts	0x006D, r25
     e6c:	80 93 6c 00 	sts	0x006C, r24

}
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	08 95       	ret

00000e7a <INT2_setCallBack>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void INT2_setCallBack(void(*INT2_ptr)(void))
{
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <INT2_setCallBack+0x6>
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	9a 83       	std	Y+2, r25	; 0x02
     e86:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_INT2_callBackPtr = INT2_ptr;
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	9a 81       	ldd	r25, Y+2	; 0x02
     e8c:	90 93 6f 00 	sts	0x006F, r25
     e90:	80 93 6e 00 	sts	0x006E, r24

}
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <INT0_DeInit>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void INT0_DeInit(void)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62

	/*clear all bits of interrupt 0*/
	MCU_CONTROL_REGISTER = (MCU_CONTROL_REGISTER & 0XFC);
     ea6:	a5 e5       	ldi	r26, 0x55	; 85
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e5 e5       	ldi	r30, 0x55	; 85
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	8c 7f       	andi	r24, 0xFC	; 252
     eb2:	8c 93       	st	X, r24
	GENERAL_INTERRUPT_CONTROL_REGISTER = (GENERAL_INTERRUPT_CONTROL_REGISTER & 0XBF);
     eb4:	ab e5       	ldi	r26, 0x5B	; 91
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	eb e5       	ldi	r30, 0x5B	; 91
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	8f 7b       	andi	r24, 0xBF	; 191
     ec0:	8c 93       	st	X, r24

}
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	08 95       	ret

00000ec8 <INT1_DeInit>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void INT1_DeInit(void)
{
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
	/*clear all bits of interrupt 1*/
	MCU_CONTROL_REGISTER = (MCU_CONTROL_REGISTER & 0XF3);
     ed0:	a5 e5       	ldi	r26, 0x55	; 85
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e5 e5       	ldi	r30, 0x55	; 85
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	83 7f       	andi	r24, 0xF3	; 243
     edc:	8c 93       	st	X, r24

	GENERAL_INTERRUPT_CONTROL_REGISTER = (GENERAL_INTERRUPT_CONTROL_REGISTER & 0X7F);
     ede:	ab e5       	ldi	r26, 0x5B	; 91
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	eb e5       	ldi	r30, 0x5B	; 91
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	8f 77       	andi	r24, 0x7F	; 127
     eea:	8c 93       	st	X, r24
}
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <INT2_DeInit>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void INT2_DeInit(void)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
	/*clear all bits of interrupt 2*/
	MCU_CONTROL_AND_STATUS_REGISTER = (MCU_CONTROL_AND_STATUS_REGISTER & 0XBF);
     efa:	a4 e5       	ldi	r26, 0x54	; 84
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e4 e5       	ldi	r30, 0x54	; 84
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	8f 7b       	andi	r24, 0xBF	; 191
     f06:	8c 93       	st	X, r24

	GENERAL_INTERRUPT_CONTROL_REGISTER = (GENERAL_INTERRUPT_CONTROL_REGISTER & 0XCF);
     f08:	ab e5       	ldi	r26, 0x5B	; 91
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	eb e5       	ldi	r30, 0x5B	; 91
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	8f 7c       	andi	r24, 0xCF	; 207
     f14:	8c 93       	st	X, r24
}
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <INT0_changeInterrupt_senseControl>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void INT0_changeInterrupt_senseControl(Interrupt0_senseControl INT0SenseControl)
{
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	0f 92       	push	r0
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	89 83       	std	Y+1, r24	; 0x01

	/*configure the control edge for interrupt 0*/
	MCU_CONTROL_REGISTER = (MCU_CONTROL_REGISTER & 0XFC) | INT0SenseControl;
     f28:	a5 e5       	ldi	r26, 0x55	; 85
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e5 e5       	ldi	r30, 0x55	; 85
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	98 2f       	mov	r25, r24
     f34:	9c 7f       	andi	r25, 0xFC	; 252
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	89 2b       	or	r24, r25
     f3a:	8c 93       	st	X, r24

}
     f3c:	0f 90       	pop	r0
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <INT1_changeInterrupt_senseControl>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void INT1_changeInterrupt_senseControl(Interrupt1_senseControl INT1SenseControl)
{
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	0f 92       	push	r0
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	89 83       	std	Y+1, r24	; 0x01

	/*configure the control edge for interrupt 1*/
	MCU_CONTROL_REGISTER = (MCU_CONTROL_REGISTER & 0XF3) |
     f50:	a5 e5       	ldi	r26, 0x55	; 85
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e5 e5       	ldi	r30, 0x55	; 85
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	28 2f       	mov	r18, r24
     f5c:	23 7f       	andi	r18, 0xF3	; 243
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	88 2f       	mov	r24, r24
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	82 2b       	or	r24, r18
     f6e:	8c 93       	st	X, r24
			     (INT1SenseControl << INTERRUPT1_SENSE_CONTROL_BITS_SHIFT_VALUE);

}
     f70:	0f 90       	pop	r0
     f72:	cf 91       	pop	r28
     f74:	df 91       	pop	r29
     f76:	08 95       	ret

00000f78 <INT2_changeInterrupt_senseControl>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void INT2_changeInterrupt_senseControl(Interrupt2_senseControl INT2SenseControl)
{
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	0f 92       	push	r0
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	89 83       	std	Y+1, r24	; 0x01
	/*configure the control edge for interrupt 2*/
	MCU_CONTROL_AND_STATUS_REGISTER = (MCU_CONTROL_AND_STATUS_REGISTER & 0XBF) |
     f84:	a4 e5       	ldi	r26, 0x54	; 84
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e4 e5       	ldi	r30, 0x54	; 84
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	2f 7b       	andi	r18, 0xBF	; 191
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	81 70       	andi	r24, 0x01	; 1
     f9a:	90 70       	andi	r25, 0x00	; 0
     f9c:	00 24       	eor	r0, r0
     f9e:	96 95       	lsr	r25
     fa0:	87 95       	ror	r24
     fa2:	07 94       	ror	r0
     fa4:	96 95       	lsr	r25
     fa6:	87 95       	ror	r24
     fa8:	07 94       	ror	r0
     faa:	98 2f       	mov	r25, r24
     fac:	80 2d       	mov	r24, r0
     fae:	82 2b       	or	r24, r18
     fb0:	8c 93       	st	X, r24
			                                ( (INT2SenseControl & 0X01) << INTERRUPT_SENSE_CONTROL_2);
}
     fb2:	0f 90       	pop	r0
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <display>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void display(void)
{
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Force the LCD to hide the cursor while displaying the CLOCK
	 */
	LCD_sendCommand(HIDE_CURSOR_COMMAND);
     fc2:	8c e0       	ldi	r24, 0x0C	; 12
     fc4:	0e 94 37 0b 	call	0x166e	; 0x166e <LCD_sendCommand>

	/*
	 * Part which responsible to display the digits of hour
	 */
	LCD_goToRowColumn(DIGITAL_CLOCK_ROW,HOUR_TENS_COLUMN);
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	64 e0       	ldi	r22, 0x04	; 4
     fcc:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <LCD_goToRowColumn>
	LCD_intgerToString( TENS(g_hours) );
     fd0:	80 91 73 00 	lds	r24, 0x0073
     fd4:	9a e0       	ldi	r25, 0x0A	; 10
     fd6:	69 2f       	mov	r22, r25
     fd8:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
     fdc:	88 2f       	mov	r24, r24
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <LCD_intgerToString>
	LCD_goToRowColumn(DIGITAL_CLOCK_ROW,HOUR_UNITS_COLUMN);
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	65 e0       	ldi	r22, 0x05	; 5
     fe8:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <LCD_goToRowColumn>
	LCD_intgerToString( UNITS(g_hours) );
     fec:	80 91 73 00 	lds	r24, 0x0073
     ff0:	9a e0       	ldi	r25, 0x0A	; 10
     ff2:	69 2f       	mov	r22, r25
     ff4:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
     ff8:	89 2f       	mov	r24, r25
     ffa:	88 2f       	mov	r24, r24
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <LCD_intgerToString>

	/*
	 * Part which responsible to display first comma between hours and minutes
	 */
	LCD_goToRowColumn(DIGITAL_CLOCK_ROW, FIRST_COMMA_COLUMN);
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	66 e0       	ldi	r22, 0x06	; 6
    1006:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <LCD_goToRowColumn>
	LCD_displayCharacter(':');
    100a:	8a e3       	ldi	r24, 0x3A	; 58
    100c:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_displayCharacter>

	/*
	 * Part which responsible to display the digits of minutes
	 */
	LCD_goToRowColumn(DIGITAL_CLOCK_ROW, MINUTES_TENS_COLUMN);
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	67 e0       	ldi	r22, 0x07	; 7
    1014:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <LCD_goToRowColumn>
	LCD_intgerToString( TENS(g_minutes) );
    1018:	80 91 72 00 	lds	r24, 0x0072
    101c:	9a e0       	ldi	r25, 0x0A	; 10
    101e:	69 2f       	mov	r22, r25
    1020:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
    1024:	88 2f       	mov	r24, r24
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <LCD_intgerToString>
	LCD_goToRowColumn(DIGITAL_CLOCK_ROW, MINUTES_UNITS_COLUMN);
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	68 e0       	ldi	r22, 0x08	; 8
    1030:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <LCD_goToRowColumn>
	LCD_intgerToString( UNITS(g_minutes) );
    1034:	80 91 72 00 	lds	r24, 0x0072
    1038:	9a e0       	ldi	r25, 0x0A	; 10
    103a:	69 2f       	mov	r22, r25
    103c:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
    1040:	89 2f       	mov	r24, r25
    1042:	88 2f       	mov	r24, r24
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <LCD_intgerToString>

	/*
	 * Part which responsible to display second comma between minutes and seconds
	 */
	LCD_goToRowColumn(DIGITAL_CLOCK_ROW, SECOND_COMMA_COLUMN);
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	69 e0       	ldi	r22, 0x09	; 9
    104e:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <LCD_goToRowColumn>
	LCD_displayCharacter(':');
    1052:	8a e3       	ldi	r24, 0x3A	; 58
    1054:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_displayCharacter>

	/*
	 * Part which responsible to display the digits of seconds
	 */
	LCD_goToRowColumn(DIGITAL_CLOCK_ROW, SECONDS_TENS_COLUMN);
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	6a e0       	ldi	r22, 0x0A	; 10
    105c:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <LCD_goToRowColumn>
	LCD_intgerToString( TENS(g_seconds) );
    1060:	80 91 71 00 	lds	r24, 0x0071
    1064:	9a e0       	ldi	r25, 0x0A	; 10
    1066:	69 2f       	mov	r22, r25
    1068:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
    106c:	88 2f       	mov	r24, r24
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <LCD_intgerToString>
	LCD_goToRowColumn(DIGITAL_CLOCK_ROW, SECONDS_UNITS_COLUMN);
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	6b e0       	ldi	r22, 0x0B	; 11
    1078:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <LCD_goToRowColumn>
	LCD_intgerToString( UNITS(g_seconds) );
    107c:	80 91 71 00 	lds	r24, 0x0071
    1080:	9a e0       	ldi	r25, 0x0A	; 10
    1082:	69 2f       	mov	r22, r25
    1084:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
    1088:	89 2f       	mov	r24, r25
    108a:	88 2f       	mov	r24, r24
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <LCD_intgerToString>
}
    1092:	cf 91       	pop	r28
    1094:	df 91       	pop	r29
    1096:	08 95       	ret

00001098 <DigitalClock>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void DigitalClock(void)
{
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Check if the interrupt of the Timer1 happen or not
	 */
	if (g_tick == TRUE)
    10a0:	80 91 70 00 	lds	r24, 0x0070
    10a4:	81 30       	cpi	r24, 0x01	; 1
    10a6:	49 f5       	brne	.+82     	; 0x10fa <DigitalClock+0x62>
	{
		/*
		 * Increment the seconds of the StopWatch
		 */
		g_seconds++;
    10a8:	80 91 71 00 	lds	r24, 0x0071
    10ac:	8f 5f       	subi	r24, 0xFF	; 255
    10ae:	80 93 71 00 	sts	0x0071, r24
		/*
		 * Check if 1 minute passed or not if yes increment
		 *minutes1 and start the seconds to increment
		 * from 0 again
		 */
		if(g_seconds >= MAXIMUM_SECONDS)
    10b2:	80 91 71 00 	lds	r24, 0x0071
    10b6:	8c 33       	cpi	r24, 0x3C	; 60
    10b8:	38 f0       	brcs	.+14     	; 0x10c8 <DigitalClock+0x30>

			/*
			 * clear the variable of seconds to begin from start again
			 * indicate that 1 minute passed
			 */
			g_seconds= INITIAL_COUNT;
    10ba:	10 92 71 00 	sts	0x0071, r1
			/*
			 * Increment variable of minutes to start appear on
			 * the 7 segments, incrementing every 60 seconds
			 */
			g_minutes++;
    10be:	80 91 72 00 	lds	r24, 0x0072
    10c2:	8f 5f       	subi	r24, 0xFF	; 255
    10c4:	80 93 72 00 	sts	0x0072, r24

		/*
		 * Check if 1 hour passed or not if yes increment hours 1
		 * and start the Minutes & Seconds to increment from 0 again
		 */
		if(g_minutes >= MAXIMUM_MINUTES)
    10c8:	80 91 72 00 	lds	r24, 0x0072
    10cc:	8c 33       	cpi	r24, 0x3C	; 60
    10ce:	48 f0       	brcs	.+18     	; 0x10e2 <DigitalClock+0x4a>

			/*
			 * clear the variable of seconds to begin from start again
			 * indicate that 1 minute passed
			 */
			g_seconds = INITIAL_COUNT;
    10d0:	10 92 71 00 	sts	0x0071, r1
			/*
			 * clear the variable of minutes to begin from start again
			 * indicate that 1 hour passed
			 */
			g_minutes = INITIAL_COUNT;
    10d4:	10 92 72 00 	sts	0x0072, r1
			/*
			 * Increment variable of hours to start appear on
			 * the 7 segments, incrementing every 60 minutes
			 */
			g_hours++;
    10d8:	80 91 73 00 	lds	r24, 0x0073
    10dc:	8f 5f       	subi	r24, 0xFF	; 255
    10de:	80 93 73 00 	sts	0x0073, r24
		 * Check if 1 hour passed or not if yes increment hours 1
		 *and start the Minutes & Seconds hours to increment from 0 again
		 *and this condition is true every 1000 melly seconds
		 */

		if(g_hours >= MAXIMUM_HOURS)
    10e2:	80 91 73 00 	lds	r24, 0x0073
    10e6:	88 31       	cpi	r24, 0x18	; 24
    10e8:	30 f0       	brcs	.+12     	; 0x10f6 <DigitalClock+0x5e>

			/*
			 * clear the variable of seconds to begin from start again
			 * indicate that 1 minute passed
			 */
			g_seconds = INITIAL_COUNT;
    10ea:	10 92 71 00 	sts	0x0071, r1
			/*
			 * clear the variable of minutes to begin from start again
			 * indicate that 1 hour passed
			 */
			g_minutes = INITIAL_COUNT;
    10ee:	10 92 72 00 	sts	0x0072, r1
			/*
			 * clear the variable of minutes to begin from start again
			 * indicate that 1 day passed
			 */
			g_hours = INITIAL_COUNT;
    10f2:	10 92 73 00 	sts	0x0073, r1

		/*
		 * Return the value of tick to be 0 again to be
		 * ready for the next
		 */
		g_tick = FALSE;
    10f6:	10 92 70 00 	sts	0x0070, r1

	}/*end of first if statement*/

}
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <tick>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void tick(void)
{
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
	/*Change the state of the tick variable to know that the time interrupt has occurred*/
	g_tick = TRUE;
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	80 93 70 00 	sts	0x0070, r24
}
    110e:	cf 91       	pop	r28
    1110:	df 91       	pop	r29
    1112:	08 95       	ret

00001114 <Right>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void Right(void)
{
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Stop the timer if Right button has pressed as that
	 * indicates system into Set Clock State
	 */
	Timer1_Stop();
    111c:	0e 94 88 23 	call	0x4710	; 0x4710 <Timer1_Stop>
	/*
	 * Change the State of OK button that to enter Set Clock State
	 */
	g_OK = FALSE;
    1120:	10 92 69 00 	sts	0x0069, r1
	/*
	 * Increment the position of the cursor to go right
	 * in every increment "Every right button press"
	 */
	g_cursorPosition++;
    1124:	80 91 68 00 	lds	r24, 0x0068
    1128:	8f 5f       	subi	r24, 0xFF	; 255
    112a:	80 93 68 00 	sts	0x0068, r24

	/*
	 * Force the position of cursor to go for first minutes digit
	 * if it is the first comma position
	 */
	if(g_cursorPosition == (FIRST_COMMA_COLUMN + 1) )
    112e:	80 91 68 00 	lds	r24, 0x0068
    1132:	87 30       	cpi	r24, 0x07	; 7
    1134:	21 f4       	brne	.+8      	; 0x113e <Right+0x2a>
	{
		g_cursorPosition = (MINUTES_TENS_COLUMN + 1);
    1136:	88 e0       	ldi	r24, 0x08	; 8
    1138:	80 93 68 00 	sts	0x0068, r24
    113c:	0f c0       	rjmp	.+30     	; 0x115c <Right+0x48>
	}
	/*
	 * Force the position of cursor to go for first seconds digit
	 * if it is the second comma position
	 */
	else if(g_cursorPosition == (SECOND_COMMA_COLUMN+1) )
    113e:	80 91 68 00 	lds	r24, 0x0068
    1142:	8a 30       	cpi	r24, 0x0A	; 10
    1144:	21 f4       	brne	.+8      	; 0x114e <Right+0x3a>
	{
		g_cursorPosition =  (SECONDS_TENS_COLUMN + 1) ;
    1146:	8b e0       	ldi	r24, 0x0B	; 11
    1148:	80 93 68 00 	sts	0x0068, r24
    114c:	07 c0       	rjmp	.+14     	; 0x115c <Right+0x48>
	}
	/*
	 * Force the position of cursor to go for first hours digit
	 * if it is the end of clock digits position
	 */
	else if (g_cursorPosition == (END_OF_CLOCK_COLUMN + 1))
    114e:	80 91 68 00 	lds	r24, 0x0068
    1152:	8d 30       	cpi	r24, 0x0D	; 13
    1154:	19 f4       	brne	.+6      	; 0x115c <Right+0x48>
	{
		g_cursorPosition = (HOUR_TENS_COLUMN + 1);
    1156:	85 e0       	ldi	r24, 0x05	; 5
    1158:	80 93 68 00 	sts	0x0068, r24
	}

}
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <Left>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void Left(void)
{
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Stop the timer if Right button has pressed as that
	 * indicates system into Set Clock State
	 */
	Timer1_Stop();
    116a:	0e 94 88 23 	call	0x4710	; 0x4710 <Timer1_Stop>
	/*
	 * Change the State of OK button that to enter Set Clock State
	 */
	g_OK = FALSE;
    116e:	10 92 69 00 	sts	0x0069, r1
	/*
	 * Decrement the position of the cursor to go left
	 * in every decrement "Every left button press"
	 */
	g_cursorPosition--;
    1172:	80 91 68 00 	lds	r24, 0x0068
    1176:	81 50       	subi	r24, 0x01	; 1
    1178:	80 93 68 00 	sts	0x0068, r24

	/*
	 * Force the position of cursor to go to stop at first element
	 * if the position at first hour digit
	 */
	if(g_cursorPosition <= HOUR_TENS_COLUMN)
    117c:	80 91 68 00 	lds	r24, 0x0068
    1180:	85 30       	cpi	r24, 0x05	; 5
    1182:	24 f4       	brge	.+8      	; 0x118c <Left+0x2a>
	{
		g_cursorPosition = (HOUR_TENS_COLUMN + 1);
    1184:	85 e0       	ldi	r24, 0x05	; 5
    1186:	80 93 68 00 	sts	0x0068, r24
    118a:	0f c0       	rjmp	.+30     	; 0x11aa <Left+0x48>
	}
	/*
	 * Force the position of cursor to go for units of hour digit
	 * if it is the first comma position
	 */
	else if(g_cursorPosition == (FIRST_COMMA_COLUMN + 1) )
    118c:	80 91 68 00 	lds	r24, 0x0068
    1190:	87 30       	cpi	r24, 0x07	; 7
    1192:	21 f4       	brne	.+8      	; 0x119c <Left+0x3a>
	{
		g_cursorPosition = HOUR_UNITS_COLUMN + 1;
    1194:	86 e0       	ldi	r24, 0x06	; 6
    1196:	80 93 68 00 	sts	0x0068, r24
    119a:	07 c0       	rjmp	.+14     	; 0x11aa <Left+0x48>
	}
	/*
	 * Force the position of cursor to go for units of minutes digit
	 * if it is the end of clock digits position
	 */
	else if(g_cursorPosition == (SECOND_COMMA_COLUMN + 1) )
    119c:	80 91 68 00 	lds	r24, 0x0068
    11a0:	8a 30       	cpi	r24, 0x0A	; 10
    11a2:	19 f4       	brne	.+6      	; 0x11aa <Left+0x48>
	{
		g_cursorPosition =  MINUTES_UNITS_COLUMN + 1;
    11a4:	89 e0       	ldi	r24, 0x09	; 9
    11a6:	80 93 68 00 	sts	0x0068, r24
	}
}
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <OK_FUNC>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void OK_FUNC(void)
{
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Restart the timer if the OK button is pressed
	 */
	Timer1_Start(F_CPU_1024);
    11b8:	85 e0       	ldi	r24, 0x05	; 5
    11ba:	0e 94 9a 23 	call	0x4734	; 0x4734 <Timer1_Start>
	/*
	 * Change the state of OK button to enter the Default State
	 */
	g_OK = TRUE;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	80 93 69 00 	sts	0x0069, r24
	/*
	 * Return the cursor to the initial position in default state
	 */
	g_cursorPosition = INITIAL_POSITION;
    11c4:	84 e0       	ldi	r24, 0x04	; 4
    11c6:	80 93 68 00 	sts	0x0068, r24


}
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <UP_Func>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void UP_Func(void)
{
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <UP_Func+0x6>
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <UP_Func+0x8>
    11d8:	00 d0       	rcall	.+0      	; 0x11da <UP_Func+0xa>
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
	/*local variable to store the units of the hour variable*/
	sint8 up_hourUnits     = INITIAL_VALUE;
    11de:	1e 82       	std	Y+6, r1	; 0x06

	/*local variable to store the tens of the hour variable*/
	sint8 up_hourTens      = INITIAL_VALUE;
    11e0:	1d 82       	std	Y+5, r1	; 0x05

	/*local variable to store the units of the minutes variable*/
	sint8 up_minutesUnits  = INITIAL_VALUE;
    11e2:	1c 82       	std	Y+4, r1	; 0x04

	/*local variable to store the tens of the minutes variable*/
	sint8 up_minutesTens   = INITIAL_VALUE;
    11e4:	1b 82       	std	Y+3, r1	; 0x03

	/*local variable to store the units of the seconds variable*/
	sint8 up_secondsUnits  = INITIAL_VALUE;
    11e6:	1a 82       	std	Y+2, r1	; 0x02

	/*local variable to store the tens of the seconds variable*/
	sint8 up_secondsTens   = INITIAL_VALUE;
    11e8:	19 82       	std	Y+1, r1	; 0x01
	/**************************************************************************
	 *                     Handle hours digit Increasing                      *
	 **************************************************************************/
	if(g_cursorPosition == (HOUR_TENS_COLUMN + 1) )
    11ea:	80 91 68 00 	lds	r24, 0x0068
    11ee:	85 30       	cpi	r24, 0x05	; 5
    11f0:	41 f5       	brne	.+80     	; 0x1242 <UP_Func+0x72>
	{
		/*Store the tens of the hour in the variable*/
		up_hourTens = TENS(g_hours);
    11f2:	80 91 73 00 	lds	r24, 0x0073
    11f6:	9a e0       	ldi	r25, 0x0A	; 10
    11f8:	69 2f       	mov	r22, r25
    11fa:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
    11fe:	8d 83       	std	Y+5, r24	; 0x05

		/*Increase the stored value by one only as this is one press*/
		up_hourTens++;
    1200:	8d 81       	ldd	r24, Y+5	; 0x05
    1202:	8f 5f       	subi	r24, 0xFF	; 255
    1204:	8d 83       	std	Y+5, r24	; 0x05

		/*Condition to prevent the value of tens from increasing if it
		 * reached the maximum value*/
		if(up_hourTens == MAXIMUM_HOURS_TENS_UP)
    1206:	8d 81       	ldd	r24, Y+5	; 0x05
    1208:	83 30       	cpi	r24, 0x03	; 3
    120a:	09 f4       	brne	.+2      	; 0x120e <UP_Func+0x3e>
		{
			/*if it reached the maximum value of tens return the value to initial value*/
			up_hourTens = INITIAL_VALUE;
    120c:	1d 82       	std	Y+5, r1	; 0x05
		}

		/*Overwrite the new value of the hours on the g_hour variable*/
		g_hours = ( MULTIPLY_BY_TEN(up_hourTens) + UNITS(g_hours) );
    120e:	8d 81       	ldd	r24, Y+5	; 0x05
    1210:	99 27       	eor	r25, r25
    1212:	87 fd       	sbrc	r24, 7
    1214:	90 95       	com	r25
    1216:	9c 01       	movw	r18, r24
    1218:	22 0f       	add	r18, r18
    121a:	33 1f       	adc	r19, r19
    121c:	c9 01       	movw	r24, r18
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	82 0f       	add	r24, r18
    1228:	93 1f       	adc	r25, r19
    122a:	28 2f       	mov	r18, r24
    122c:	80 91 73 00 	lds	r24, 0x0073
    1230:	9a e0       	ldi	r25, 0x0A	; 10
    1232:	69 2f       	mov	r22, r25
    1234:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
    1238:	89 2f       	mov	r24, r25
    123a:	82 0f       	add	r24, r18
    123c:	80 93 73 00 	sts	0x0073, r24
    1240:	d8 c0       	rjmp	.+432    	; 0x13f2 <UP_Func+0x222>
	}
	else if(g_cursorPosition == (HOUR_UNITS_COLUMN + 1) )
    1242:	80 91 68 00 	lds	r24, 0x0068
    1246:	86 30       	cpi	r24, 0x06	; 6
    1248:	39 f5       	brne	.+78     	; 0x1298 <UP_Func+0xc8>
	{
		/*Store the units of the hour in the variable*/
		up_hourUnits = UNITS(g_hours);
    124a:	80 91 73 00 	lds	r24, 0x0073
    124e:	9a e0       	ldi	r25, 0x0A	; 10
    1250:	69 2f       	mov	r22, r25
    1252:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
    1256:	89 2f       	mov	r24, r25
    1258:	8e 83       	std	Y+6, r24	; 0x06

		/*Increase the stored value by one only as this is one press*/
		up_hourUnits++;
    125a:	8e 81       	ldd	r24, Y+6	; 0x06
    125c:	8f 5f       	subi	r24, 0xFF	; 255
    125e:	8e 83       	std	Y+6, r24	; 0x06

		/*Increase the stored value by one only as this is one press*/

		/*Condition to prevent the value of units from increasing if it
		 * reached the maximum value*/
		if(up_hourUnits == MAXIMUM_HOURS_UNITS_UP)
    1260:	8e 81       	ldd	r24, Y+6	; 0x06
    1262:	85 30       	cpi	r24, 0x05	; 5
    1264:	09 f4       	brne	.+2      	; 0x1268 <UP_Func+0x98>
		{
			/*if it reached the maximum value of units return the value to initial value*/
			up_hourUnits = INITIAL_VALUE;
    1266:	1e 82       	std	Y+6, r1	; 0x06
		}

		/*Overwrite the new value of the hours on the g_hour variable*/
		g_hours = ( ( MULTIPLY_BY_TEN(TENS(g_hours) ) ) + up_hourUnits);
    1268:	80 91 73 00 	lds	r24, 0x0073
    126c:	9a e0       	ldi	r25, 0x0A	; 10
    126e:	69 2f       	mov	r22, r25
    1270:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
    1274:	88 2f       	mov	r24, r24
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	9c 01       	movw	r18, r24
    127a:	22 0f       	add	r18, r18
    127c:	33 1f       	adc	r19, r19
    127e:	c9 01       	movw	r24, r18
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	82 0f       	add	r24, r18
    128a:	93 1f       	adc	r25, r19
    128c:	98 2f       	mov	r25, r24
    128e:	8e 81       	ldd	r24, Y+6	; 0x06
    1290:	89 0f       	add	r24, r25
    1292:	80 93 73 00 	sts	0x0073, r24
    1296:	ad c0       	rjmp	.+346    	; 0x13f2 <UP_Func+0x222>
	}
	/**************************************************************************
	 *                   Handle Minutes digit Increasing                      *
	 **************************************************************************/
	else if(g_cursorPosition == (MINUTES_TENS_COLUMN + 1))
    1298:	80 91 68 00 	lds	r24, 0x0068
    129c:	88 30       	cpi	r24, 0x08	; 8
    129e:	41 f5       	brne	.+80     	; 0x12f0 <UP_Func+0x120>
	{
		/*Store the tens of the minutes in the variable*/
		up_minutesTens = TENS(g_minutes);
    12a0:	80 91 72 00 	lds	r24, 0x0072
    12a4:	9a e0       	ldi	r25, 0x0A	; 10
    12a6:	69 2f       	mov	r22, r25
    12a8:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
    12ac:	8b 83       	std	Y+3, r24	; 0x03

		/*Increase the stored value by one only as this is one press*/
		up_minutesTens++;
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	8f 5f       	subi	r24, 0xFF	; 255
    12b2:	8b 83       	std	Y+3, r24	; 0x03

		/*Condition to prevent the value of tens from increasing if it
		 * reached the maximum value*/
		if(up_minutesTens == MAXIMUM_MINUTES_TENS_UP)
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	86 30       	cpi	r24, 0x06	; 6
    12b8:	09 f4       	brne	.+2      	; 0x12bc <UP_Func+0xec>
		{
			/*if it reached the maximum value of tens return the value to initial value*/
			up_minutesTens = INITIAL_VALUE;
    12ba:	1b 82       	std	Y+3, r1	; 0x03
		}

		/*Overwrite the new value of the hours on the g_minutes variable*/
		g_minutes = ( MULTIPLY_BY_TEN(up_minutesTens) + UNITS(g_minutes) );
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	99 27       	eor	r25, r25
    12c0:	87 fd       	sbrc	r24, 7
    12c2:	90 95       	com	r25
    12c4:	9c 01       	movw	r18, r24
    12c6:	22 0f       	add	r18, r18
    12c8:	33 1f       	adc	r19, r19
    12ca:	c9 01       	movw	r24, r18
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	82 0f       	add	r24, r18
    12d6:	93 1f       	adc	r25, r19
    12d8:	28 2f       	mov	r18, r24
    12da:	80 91 72 00 	lds	r24, 0x0072
    12de:	9a e0       	ldi	r25, 0x0A	; 10
    12e0:	69 2f       	mov	r22, r25
    12e2:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
    12e6:	89 2f       	mov	r24, r25
    12e8:	82 0f       	add	r24, r18
    12ea:	80 93 72 00 	sts	0x0072, r24
    12ee:	81 c0       	rjmp	.+258    	; 0x13f2 <UP_Func+0x222>

	}
	else if(g_cursorPosition == (MINUTES_UNITS_COLUMN + 1))
    12f0:	80 91 68 00 	lds	r24, 0x0068
    12f4:	89 30       	cpi	r24, 0x09	; 9
    12f6:	39 f5       	brne	.+78     	; 0x1346 <UP_Func+0x176>
	{
		/*Store the units of the minutes in the variable*/
		up_minutesUnits = UNITS(g_minutes);
    12f8:	80 91 72 00 	lds	r24, 0x0072
    12fc:	9a e0       	ldi	r25, 0x0A	; 10
    12fe:	69 2f       	mov	r22, r25
    1300:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
    1304:	89 2f       	mov	r24, r25
    1306:	8c 83       	std	Y+4, r24	; 0x04

		/*Increase the stored value by one only as this is one press*/
		up_minutesUnits++;
    1308:	8c 81       	ldd	r24, Y+4	; 0x04
    130a:	8f 5f       	subi	r24, 0xFF	; 255
    130c:	8c 83       	std	Y+4, r24	; 0x04

		/*Condition to prevent the value of units from increasing if it
		 * reached the maximum value*/
		if(up_minutesUnits == MAXIMUM_MINUTES_UNITS_UP)
    130e:	8c 81       	ldd	r24, Y+4	; 0x04
    1310:	8a 30       	cpi	r24, 0x0A	; 10
    1312:	09 f4       	brne	.+2      	; 0x1316 <UP_Func+0x146>
		{
			/*if it reached the maximum value of units return the value to initial value*/
			up_minutesUnits = INITIAL_VALUE;
    1314:	1c 82       	std	Y+4, r1	; 0x04
		}
		/*Overwrite the new value of the hours on the g_minutes variable*/
		g_minutes = ( ( MULTIPLY_BY_TEN(TENS(g_minutes))) + up_minutesUnits);
    1316:	80 91 72 00 	lds	r24, 0x0072
    131a:	9a e0       	ldi	r25, 0x0A	; 10
    131c:	69 2f       	mov	r22, r25
    131e:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
    1322:	88 2f       	mov	r24, r24
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	9c 01       	movw	r18, r24
    1328:	22 0f       	add	r18, r18
    132a:	33 1f       	adc	r19, r19
    132c:	c9 01       	movw	r24, r18
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	88 0f       	add	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	82 0f       	add	r24, r18
    1338:	93 1f       	adc	r25, r19
    133a:	98 2f       	mov	r25, r24
    133c:	8c 81       	ldd	r24, Y+4	; 0x04
    133e:	89 0f       	add	r24, r25
    1340:	80 93 72 00 	sts	0x0072, r24
    1344:	56 c0       	rjmp	.+172    	; 0x13f2 <UP_Func+0x222>
	}
	/**************************************************************************
	 *                     Handle Seconds digit Increasing                    *
	 **************************************************************************/
	else if (g_cursorPosition == (SECONDS_TENS_COLUMN + 1))
    1346:	80 91 68 00 	lds	r24, 0x0068
    134a:	8b 30       	cpi	r24, 0x0B	; 11
    134c:	41 f5       	brne	.+80     	; 0x139e <UP_Func+0x1ce>
	{
		/*Store the units of the seconds in the variable*/
		up_secondsTens = TENS(g_seconds);
    134e:	80 91 71 00 	lds	r24, 0x0071
    1352:	9a e0       	ldi	r25, 0x0A	; 10
    1354:	69 2f       	mov	r22, r25
    1356:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
    135a:	89 83       	std	Y+1, r24	; 0x01

		/*Increase the stored value by one only as this is one press*/
		up_secondsTens++;
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	8f 5f       	subi	r24, 0xFF	; 255
    1360:	89 83       	std	Y+1, r24	; 0x01

		/*Condition to prevent the value of tens from increasing if it
		 * reached the maximum value*/
		if(up_secondsTens == MAXIMUM_SECONDS_TENS_UP)
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	86 30       	cpi	r24, 0x06	; 6
    1366:	09 f4       	brne	.+2      	; 0x136a <UP_Func+0x19a>
		{
			/*if it reached the maximum value of tens return the value to initial value*/
			up_secondsTens = INITIAL_VALUE;
    1368:	19 82       	std	Y+1, r1	; 0x01
		}

		/*Overwrite the new value of the hours on the g_seconds variable*/
		g_seconds = ( (MULTIPLY_BY_TEN(up_secondsTens)) + (UNITS(g_seconds)) );
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	99 27       	eor	r25, r25
    136e:	87 fd       	sbrc	r24, 7
    1370:	90 95       	com	r25
    1372:	9c 01       	movw	r18, r24
    1374:	22 0f       	add	r18, r18
    1376:	33 1f       	adc	r19, r19
    1378:	c9 01       	movw	r24, r18
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	82 0f       	add	r24, r18
    1384:	93 1f       	adc	r25, r19
    1386:	28 2f       	mov	r18, r24
    1388:	80 91 71 00 	lds	r24, 0x0071
    138c:	9a e0       	ldi	r25, 0x0A	; 10
    138e:	69 2f       	mov	r22, r25
    1390:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
    1394:	89 2f       	mov	r24, r25
    1396:	82 0f       	add	r24, r18
    1398:	80 93 71 00 	sts	0x0071, r24
    139c:	2a c0       	rjmp	.+84     	; 0x13f2 <UP_Func+0x222>

	}
	else if(g_cursorPosition == (SECONDS_UNITS_COLUMN + 1))
    139e:	80 91 68 00 	lds	r24, 0x0068
    13a2:	8c 30       	cpi	r24, 0x0C	; 12
    13a4:	31 f5       	brne	.+76     	; 0x13f2 <UP_Func+0x222>
	{
		/*Store the units of the seconds in the variable*/
		up_secondsUnits = UNITS(g_seconds);
    13a6:	80 91 71 00 	lds	r24, 0x0071
    13aa:	9a e0       	ldi	r25, 0x0A	; 10
    13ac:	69 2f       	mov	r22, r25
    13ae:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
    13b2:	89 2f       	mov	r24, r25
    13b4:	8a 83       	std	Y+2, r24	; 0x02

		/*Increase the stored value by one only as this is one press*/
		up_secondsUnits++;
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	8f 5f       	subi	r24, 0xFF	; 255
    13ba:	8a 83       	std	Y+2, r24	; 0x02

		/*Condition to prevent the value of units from increasing if it
		 * reached the maximum value*/
		if(up_secondsUnits == MAXIMUM_SECONDS_UNITS_UP)
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	8a 30       	cpi	r24, 0x0A	; 10
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <UP_Func+0x1f4>
		{
			/*if it reached the maximum value of tens return the value to initial value*/
			up_secondsUnits = INITIAL_VALUE;
    13c2:	1a 82       	std	Y+2, r1	; 0x02
		}
		/*Overwrite the new value of the hours on the g_seconds variable*/
		g_seconds = ( ( MULTIPLY_BY_TEN(TENS(g_seconds))) + up_secondsUnits);
    13c4:	80 91 71 00 	lds	r24, 0x0071
    13c8:	9a e0       	ldi	r25, 0x0A	; 10
    13ca:	69 2f       	mov	r22, r25
    13cc:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
    13d0:	88 2f       	mov	r24, r24
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	9c 01       	movw	r18, r24
    13d6:	22 0f       	add	r18, r18
    13d8:	33 1f       	adc	r19, r19
    13da:	c9 01       	movw	r24, r18
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	82 0f       	add	r24, r18
    13e6:	93 1f       	adc	r25, r19
    13e8:	98 2f       	mov	r25, r24
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	89 0f       	add	r24, r25
    13ee:	80 93 71 00 	sts	0x0071, r24
	}
}
    13f2:	26 96       	adiw	r28, 0x06	; 6
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	f8 94       	cli
    13f8:	de bf       	out	0x3e, r29	; 62
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	cd bf       	out	0x3d, r28	; 61
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	08 95       	ret

00001404 <down_Func>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void down_Func(void)
{
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	00 d0       	rcall	.+0      	; 0x140a <down_Func+0x6>
    140a:	00 d0       	rcall	.+0      	; 0x140c <down_Func+0x8>
    140c:	00 d0       	rcall	.+0      	; 0x140e <down_Func+0xa>
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
	/*local variable to store the units of the hour variable*/
	sint8 down_hourUnits     = INITIAL_VALUE;
    1412:	1e 82       	std	Y+6, r1	; 0x06

	/*local variable to store the tens of the hour variable*/
	sint8 down_hourTens      = INITIAL_VALUE;
    1414:	1d 82       	std	Y+5, r1	; 0x05

	/*local variable to store the units of the minutes variable*/
	sint8 down_minutesUnits  = INITIAL_VALUE;
    1416:	1c 82       	std	Y+4, r1	; 0x04

	/*local variable to store the tens of the minutes variable*/
	sint8 down_minutesTens   = INITIAL_VALUE;
    1418:	1b 82       	std	Y+3, r1	; 0x03

	/*local variable to store the units of the seconds variable*/
	sint8 down_secondsUnits  = INITIAL_VALUE;
    141a:	1a 82       	std	Y+2, r1	; 0x02

	/*local variable to store the tens of the seconds variable*/
	sint8 down_secondsTens   = INITIAL_VALUE;
    141c:	19 82       	std	Y+1, r1	; 0x01
	/**************************************************************************
	 *                     Handle hours digit decreasing                      *
	 **************************************************************************/
	if(g_cursorPosition == (HOUR_TENS_COLUMN + 1))
    141e:	80 91 68 00 	lds	r24, 0x0068
    1422:	85 30       	cpi	r24, 0x05	; 5
    1424:	41 f5       	brne	.+80     	; 0x1476 <down_Func+0x72>
	{
		/*Store the tens of the hours in the variable*/
		down_hourTens = TENS(g_hours);
    1426:	80 91 73 00 	lds	r24, 0x0073
    142a:	9a e0       	ldi	r25, 0x0A	; 10
    142c:	69 2f       	mov	r22, r25
    142e:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
    1432:	8d 83       	std	Y+5, r24	; 0x05

		/*decrease the stored value by one only as this is one press*/
		down_hourTens--;
    1434:	8d 81       	ldd	r24, Y+5	; 0x05
    1436:	81 50       	subi	r24, 0x01	; 1
    1438:	8d 83       	std	Y+5, r24	; 0x05

		/*Condition to prevent the value of tens from decreasing if it
	     * reached the initial value*/
		if(down_hourTens <= INITIAL_VALUE)
    143a:	8d 81       	ldd	r24, Y+5	; 0x05
    143c:	18 16       	cp	r1, r24
    143e:	0c f0       	brlt	.+2      	; 0x1442 <down_Func+0x3e>
		{
			/*if it reached the initial value of tens, maintain the value to initial value*/
			down_hourTens = INITIAL_VALUE;
    1440:	1d 82       	std	Y+5, r1	; 0x05
		}

		/*Overwrite the new value of the hours on the g_hours variable*/
		g_hours = ( MULTIPLY_BY_TEN(down_hourTens) + UNITS(g_hours) );
    1442:	8d 81       	ldd	r24, Y+5	; 0x05
    1444:	99 27       	eor	r25, r25
    1446:	87 fd       	sbrc	r24, 7
    1448:	90 95       	com	r25
    144a:	9c 01       	movw	r18, r24
    144c:	22 0f       	add	r18, r18
    144e:	33 1f       	adc	r19, r19
    1450:	c9 01       	movw	r24, r18
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	82 0f       	add	r24, r18
    145c:	93 1f       	adc	r25, r19
    145e:	28 2f       	mov	r18, r24
    1460:	80 91 73 00 	lds	r24, 0x0073
    1464:	9a e0       	ldi	r25, 0x0A	; 10
    1466:	69 2f       	mov	r22, r25
    1468:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
    146c:	89 2f       	mov	r24, r25
    146e:	82 0f       	add	r24, r18
    1470:	80 93 73 00 	sts	0x0073, r24
    1474:	d8 c0       	rjmp	.+432    	; 0x1626 <down_Func+0x222>
	}
	else if(g_cursorPosition == (HOUR_UNITS_COLUMN + 1) )
    1476:	80 91 68 00 	lds	r24, 0x0068
    147a:	86 30       	cpi	r24, 0x06	; 6
    147c:	39 f5       	brne	.+78     	; 0x14cc <down_Func+0xc8>
	{
		/*Store the units of the hours in the variable*/
		down_hourUnits = UNITS(g_hours);
    147e:	80 91 73 00 	lds	r24, 0x0073
    1482:	9a e0       	ldi	r25, 0x0A	; 10
    1484:	69 2f       	mov	r22, r25
    1486:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
    148a:	89 2f       	mov	r24, r25
    148c:	8e 83       	std	Y+6, r24	; 0x06

		/*decrease the stored value by one only as this is one press*/
		down_hourUnits--;
    148e:	8e 81       	ldd	r24, Y+6	; 0x06
    1490:	81 50       	subi	r24, 0x01	; 1
    1492:	8e 83       	std	Y+6, r24	; 0x06

		/*Condition to prevent the value of units from decreasing if it
	     * reached the initial value*/
		if(down_hourUnits <= INITIAL_VALUE)
    1494:	8e 81       	ldd	r24, Y+6	; 0x06
    1496:	18 16       	cp	r1, r24
    1498:	0c f0       	brlt	.+2      	; 0x149c <down_Func+0x98>
		{
			/*if it reached the initial value of units, maintain the value to initial value*/
			down_hourUnits = INITIAL_VALUE;
    149a:	1e 82       	std	Y+6, r1	; 0x06
		}

		/*Overwrite the new value of the hours on the g_hours variable*/
		g_hours = (  MULTIPLY_BY_TEN(TENS(g_hours)) + down_hourUnits);
    149c:	80 91 73 00 	lds	r24, 0x0073
    14a0:	9a e0       	ldi	r25, 0x0A	; 10
    14a2:	69 2f       	mov	r22, r25
    14a4:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
    14a8:	88 2f       	mov	r24, r24
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	9c 01       	movw	r18, r24
    14ae:	22 0f       	add	r18, r18
    14b0:	33 1f       	adc	r19, r19
    14b2:	c9 01       	movw	r24, r18
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	82 0f       	add	r24, r18
    14be:	93 1f       	adc	r25, r19
    14c0:	98 2f       	mov	r25, r24
    14c2:	8e 81       	ldd	r24, Y+6	; 0x06
    14c4:	89 0f       	add	r24, r25
    14c6:	80 93 73 00 	sts	0x0073, r24
    14ca:	ad c0       	rjmp	.+346    	; 0x1626 <down_Func+0x222>
	}
	/**************************************************************************
	 *                     Handle Minutes digit decreasing                     *
	 **************************************************************************/
	else if(g_cursorPosition == (MINUTES_TENS_COLUMN + 1))
    14cc:	80 91 68 00 	lds	r24, 0x0068
    14d0:	88 30       	cpi	r24, 0x08	; 8
    14d2:	41 f5       	brne	.+80     	; 0x1524 <down_Func+0x120>
	{
		/*Store the tens of the minutes in the variable*/
		down_minutesTens = TENS(g_minutes);
    14d4:	80 91 72 00 	lds	r24, 0x0072
    14d8:	9a e0       	ldi	r25, 0x0A	; 10
    14da:	69 2f       	mov	r22, r25
    14dc:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
    14e0:	8b 83       	std	Y+3, r24	; 0x03

		/*decrease the stored value by one only as this is one press*/
		down_minutesTens--;
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	81 50       	subi	r24, 0x01	; 1
    14e6:	8b 83       	std	Y+3, r24	; 0x03

		/*Condition to prevent the value of tens from decreasing if it
	     * reached the initial value*/
		if(down_minutesTens <= INITIAL_VALUE)
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	18 16       	cp	r1, r24
    14ec:	0c f0       	brlt	.+2      	; 0x14f0 <down_Func+0xec>
		{
			/*if it reached the initial value of tens, maintain the value to initial value*/
			down_minutesTens = INITIAL_VALUE;
    14ee:	1b 82       	std	Y+3, r1	; 0x03
		}

		/*Overwrite the new value of the minutes on the g_minutes variable*/
		g_minutes = ( MULTIPLY_BY_TEN(down_minutesTens) + UNITS(g_minutes) );
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	99 27       	eor	r25, r25
    14f4:	87 fd       	sbrc	r24, 7
    14f6:	90 95       	com	r25
    14f8:	9c 01       	movw	r18, r24
    14fa:	22 0f       	add	r18, r18
    14fc:	33 1f       	adc	r19, r19
    14fe:	c9 01       	movw	r24, r18
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	82 0f       	add	r24, r18
    150a:	93 1f       	adc	r25, r19
    150c:	28 2f       	mov	r18, r24
    150e:	80 91 72 00 	lds	r24, 0x0072
    1512:	9a e0       	ldi	r25, 0x0A	; 10
    1514:	69 2f       	mov	r22, r25
    1516:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
    151a:	89 2f       	mov	r24, r25
    151c:	82 0f       	add	r24, r18
    151e:	80 93 72 00 	sts	0x0072, r24
    1522:	81 c0       	rjmp	.+258    	; 0x1626 <down_Func+0x222>
	}
	else if(g_cursorPosition == (MINUTES_UNITS_COLUMN + 1) )
    1524:	80 91 68 00 	lds	r24, 0x0068
    1528:	89 30       	cpi	r24, 0x09	; 9
    152a:	39 f5       	brne	.+78     	; 0x157a <down_Func+0x176>
	{
		/*Store the units of the minutes in the variable*/
		down_minutesUnits = UNITS(g_minutes);
    152c:	80 91 72 00 	lds	r24, 0x0072
    1530:	9a e0       	ldi	r25, 0x0A	; 10
    1532:	69 2f       	mov	r22, r25
    1534:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
    1538:	89 2f       	mov	r24, r25
    153a:	8c 83       	std	Y+4, r24	; 0x04

		/*decrease the stored value by one only as this is one press*/
		down_minutesUnits--;
    153c:	8c 81       	ldd	r24, Y+4	; 0x04
    153e:	81 50       	subi	r24, 0x01	; 1
    1540:	8c 83       	std	Y+4, r24	; 0x04

		/*Condition to prevent the value of units from decreasing if it
	     * reached the initial value*/
		if(down_minutesUnits <= INITIAL_VALUE)
    1542:	8c 81       	ldd	r24, Y+4	; 0x04
    1544:	18 16       	cp	r1, r24
    1546:	0c f0       	brlt	.+2      	; 0x154a <down_Func+0x146>
		{
			/*if it reached the initial value of units, maintain the value to initial value*/
			down_minutesUnits = INITIAL_VALUE;
    1548:	1c 82       	std	Y+4, r1	; 0x04
		}
		/*Overwrite the new value of the minutes on the g_minutes variable*/
		g_minutes = ( MULTIPLY_BY_TEN(TENS(g_minutes)) + down_minutesUnits);
    154a:	80 91 72 00 	lds	r24, 0x0072
    154e:	9a e0       	ldi	r25, 0x0A	; 10
    1550:	69 2f       	mov	r22, r25
    1552:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
    1556:	88 2f       	mov	r24, r24
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	9c 01       	movw	r18, r24
    155c:	22 0f       	add	r18, r18
    155e:	33 1f       	adc	r19, r19
    1560:	c9 01       	movw	r24, r18
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	88 0f       	add	r24, r24
    1568:	99 1f       	adc	r25, r25
    156a:	82 0f       	add	r24, r18
    156c:	93 1f       	adc	r25, r19
    156e:	98 2f       	mov	r25, r24
    1570:	8c 81       	ldd	r24, Y+4	; 0x04
    1572:	89 0f       	add	r24, r25
    1574:	80 93 72 00 	sts	0x0072, r24
    1578:	56 c0       	rjmp	.+172    	; 0x1626 <down_Func+0x222>
	}
	/**************************************************************************
	 *                     Handle Seconds digit decreasing                     *
	 **************************************************************************/
	else if (g_cursorPosition == (SECONDS_TENS_COLUMN + 1))
    157a:	80 91 68 00 	lds	r24, 0x0068
    157e:	8b 30       	cpi	r24, 0x0B	; 11
    1580:	41 f5       	brne	.+80     	; 0x15d2 <down_Func+0x1ce>
	{
		/*Store the tens of the seconds in the variable*/
		down_secondsTens = TENS(g_seconds);
    1582:	80 91 71 00 	lds	r24, 0x0071
    1586:	9a e0       	ldi	r25, 0x0A	; 10
    1588:	69 2f       	mov	r22, r25
    158a:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
    158e:	89 83       	std	Y+1, r24	; 0x01

		/*decrease the stored value by one only as this is one press*/
		down_secondsTens--;
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	81 50       	subi	r24, 0x01	; 1
    1594:	89 83       	std	Y+1, r24	; 0x01

		/*Condition to prevent the value of tens from decreasing if it
	     * reached the initial value*/
		if(down_secondsTens <= INITIAL_VALUE)
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	18 16       	cp	r1, r24
    159a:	0c f0       	brlt	.+2      	; 0x159e <down_Func+0x19a>
		{
			/*if it reached the initial value of units, maintain the value to initial value*/
			down_secondsTens = INITIAL_VALUE;
    159c:	19 82       	std	Y+1, r1	; 0x01
		}

		/*Overwrite the new value of the seconds on the g_seconds variable*/
		g_seconds = ( MULTIPLY_BY_TEN(down_secondsTens) + UNITS(g_seconds) );
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	99 27       	eor	r25, r25
    15a2:	87 fd       	sbrc	r24, 7
    15a4:	90 95       	com	r25
    15a6:	9c 01       	movw	r18, r24
    15a8:	22 0f       	add	r18, r18
    15aa:	33 1f       	adc	r19, r19
    15ac:	c9 01       	movw	r24, r18
    15ae:	88 0f       	add	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	82 0f       	add	r24, r18
    15b8:	93 1f       	adc	r25, r19
    15ba:	28 2f       	mov	r18, r24
    15bc:	80 91 71 00 	lds	r24, 0x0071
    15c0:	9a e0       	ldi	r25, 0x0A	; 10
    15c2:	69 2f       	mov	r22, r25
    15c4:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
    15c8:	89 2f       	mov	r24, r25
    15ca:	82 0f       	add	r24, r18
    15cc:	80 93 71 00 	sts	0x0071, r24
    15d0:	2a c0       	rjmp	.+84     	; 0x1626 <down_Func+0x222>
	}
	else if(g_cursorPosition == (SECONDS_UNITS_COLUMN + 1) )
    15d2:	80 91 68 00 	lds	r24, 0x0068
    15d6:	8c 30       	cpi	r24, 0x0C	; 12
    15d8:	31 f5       	brne	.+76     	; 0x1626 <down_Func+0x222>
	{
		/*Store the units of the seconds in the variable*/
		down_secondsUnits = UNITS(g_seconds);
    15da:	80 91 71 00 	lds	r24, 0x0071
    15de:	9a e0       	ldi	r25, 0x0A	; 10
    15e0:	69 2f       	mov	r22, r25
    15e2:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
    15e6:	89 2f       	mov	r24, r25
    15e8:	8a 83       	std	Y+2, r24	; 0x02

		/*decrease the stored value by one only as this is one press*/
		down_secondsUnits--;
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	81 50       	subi	r24, 0x01	; 1
    15ee:	8a 83       	std	Y+2, r24	; 0x02

		/*Condition to prevent the value of units from decreasing if it
	     * reached the initial value*/
		if(down_secondsUnits <= INITIAL_VALUE)
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	18 16       	cp	r1, r24
    15f4:	0c f0       	brlt	.+2      	; 0x15f8 <down_Func+0x1f4>
		{
			/*if it reached the initial value of units, maintain the value to initial value*/
			down_secondsUnits = INITIAL_VALUE;
    15f6:	1a 82       	std	Y+2, r1	; 0x02
		}
		/*Overwrite the new value of the seconds on the g_seconds variable*/
		g_seconds = ( MULTIPLY_BY_TEN(TENS(g_seconds)) + down_secondsUnits);
    15f8:	80 91 71 00 	lds	r24, 0x0071
    15fc:	9a e0       	ldi	r25, 0x0A	; 10
    15fe:	69 2f       	mov	r22, r25
    1600:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__udivmodqi4>
    1604:	88 2f       	mov	r24, r24
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	9c 01       	movw	r18, r24
    160a:	22 0f       	add	r18, r18
    160c:	33 1f       	adc	r19, r19
    160e:	c9 01       	movw	r24, r18
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	82 0f       	add	r24, r18
    161a:	93 1f       	adc	r25, r19
    161c:	98 2f       	mov	r25, r24
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	89 0f       	add	r24, r25
    1622:	80 93 71 00 	sts	0x0071, r24
	}
}
    1626:	26 96       	adiw	r28, 0x06	; 6
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	f8 94       	cli
    162c:	de bf       	out	0x3e, r29	; 62
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	cd bf       	out	0x3d, r28	; 61
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	08 95       	ret

00001638 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    1640:	e4 e3       	ldi	r30, 0x34	; 52
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	8f ef       	ldi	r24, 0xFF	; 255
    1646:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1648:	a7 e3       	ldi	r26, 0x37	; 55
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e7 e3       	ldi	r30, 0x37	; 55
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	80 6e       	ori	r24, 0xE0	; 224
    1654:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1656:	88 e3       	ldi	r24, 0x38	; 56
    1658:	0e 94 37 0b 	call	0x166e	; 0x166e <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    165c:	8c e0       	ldi	r24, 0x0C	; 12
    165e:	0e 94 37 0b 	call	0x166e	; 0x166e <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	0e 94 37 0b 	call	0x166e	; 0x166e <LCD_sendCommand>
}
    1668:	cf 91       	pop	r28
    166a:	df 91       	pop	r29
    166c:	08 95       	ret

0000166e <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	e9 97       	sbiw	r28, 0x39	; 57
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	f8 94       	cli
    167c:	de bf       	out	0x3e, r29	; 62
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	cd bf       	out	0x3d, r28	; 61
    1682:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1684:	a8 e3       	ldi	r26, 0x38	; 56
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e8 e3       	ldi	r30, 0x38	; 56
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	8f 7d       	andi	r24, 0xDF	; 223
    1690:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1692:	a8 e3       	ldi	r26, 0x38	; 56
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e8 e3       	ldi	r30, 0x38	; 56
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	8f 7b       	andi	r24, 0xBF	; 191
    169e:	8c 93       	st	X, r24
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	a0 e8       	ldi	r26, 0x80	; 128
    16a6:	bf e3       	ldi	r27, 0x3F	; 63
    16a8:	8d ab       	std	Y+53, r24	; 0x35
    16aa:	9e ab       	std	Y+54, r25	; 0x36
    16ac:	af ab       	std	Y+55, r26	; 0x37
    16ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b0:	6d a9       	ldd	r22, Y+53	; 0x35
    16b2:	7e a9       	ldd	r23, Y+54	; 0x36
    16b4:	8f a9       	ldd	r24, Y+55	; 0x37
    16b6:	98 ad       	ldd	r25, Y+56	; 0x38
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	4a e7       	ldi	r20, 0x7A	; 122
    16be:	53 e4       	ldi	r21, 0x43	; 67
    16c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	89 ab       	std	Y+49, r24	; 0x31
    16ca:	9a ab       	std	Y+50, r25	; 0x32
    16cc:	ab ab       	std	Y+51, r26	; 0x33
    16ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16d0:	69 a9       	ldd	r22, Y+49	; 0x31
    16d2:	7a a9       	ldd	r23, Y+50	; 0x32
    16d4:	8b a9       	ldd	r24, Y+51	; 0x33
    16d6:	9c a9       	ldd	r25, Y+52	; 0x34
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	40 e8       	ldi	r20, 0x80	; 128
    16de:	5f e3       	ldi	r21, 0x3F	; 63
    16e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16e4:	88 23       	and	r24, r24
    16e6:	2c f4       	brge	.+10     	; 0x16f2 <LCD_sendCommand+0x84>
		__ticks = 1;
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	98 ab       	std	Y+48, r25	; 0x30
    16ee:	8f a7       	std	Y+47, r24	; 0x2f
    16f0:	3f c0       	rjmp	.+126    	; 0x1770 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    16f2:	69 a9       	ldd	r22, Y+49	; 0x31
    16f4:	7a a9       	ldd	r23, Y+50	; 0x32
    16f6:	8b a9       	ldd	r24, Y+51	; 0x33
    16f8:	9c a9       	ldd	r25, Y+52	; 0x34
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	3f ef       	ldi	r19, 0xFF	; 255
    16fe:	4f e7       	ldi	r20, 0x7F	; 127
    1700:	57 e4       	ldi	r21, 0x47	; 71
    1702:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1706:	18 16       	cp	r1, r24
    1708:	4c f5       	brge	.+82     	; 0x175c <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    170a:	6d a9       	ldd	r22, Y+53	; 0x35
    170c:	7e a9       	ldd	r23, Y+54	; 0x36
    170e:	8f a9       	ldd	r24, Y+55	; 0x37
    1710:	98 ad       	ldd	r25, Y+56	; 0x38
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e2       	ldi	r20, 0x20	; 32
    1718:	51 e4       	ldi	r21, 0x41	; 65
    171a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	bc 01       	movw	r22, r24
    1724:	cd 01       	movw	r24, r26
    1726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	98 ab       	std	Y+48, r25	; 0x30
    1730:	8f a7       	std	Y+47, r24	; 0x2f
    1732:	0f c0       	rjmp	.+30     	; 0x1752 <LCD_sendCommand+0xe4>
    1734:	89 e1       	ldi	r24, 0x19	; 25
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	9e a7       	std	Y+46, r25	; 0x2e
    173a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    173c:	8d a5       	ldd	r24, Y+45	; 0x2d
    173e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	f1 f7       	brne	.-4      	; 0x1740 <LCD_sendCommand+0xd2>
    1744:	9e a7       	std	Y+46, r25	; 0x2e
    1746:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1748:	8f a5       	ldd	r24, Y+47	; 0x2f
    174a:	98 a9       	ldd	r25, Y+48	; 0x30
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	98 ab       	std	Y+48, r25	; 0x30
    1750:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1752:	8f a5       	ldd	r24, Y+47	; 0x2f
    1754:	98 a9       	ldd	r25, Y+48	; 0x30
    1756:	00 97       	sbiw	r24, 0x00	; 0
    1758:	69 f7       	brne	.-38     	; 0x1734 <LCD_sendCommand+0xc6>
    175a:	14 c0       	rjmp	.+40     	; 0x1784 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    175c:	69 a9       	ldd	r22, Y+49	; 0x31
    175e:	7a a9       	ldd	r23, Y+50	; 0x32
    1760:	8b a9       	ldd	r24, Y+51	; 0x33
    1762:	9c a9       	ldd	r25, Y+52	; 0x34
    1764:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	98 ab       	std	Y+48, r25	; 0x30
    176e:	8f a7       	std	Y+47, r24	; 0x2f
    1770:	8f a5       	ldd	r24, Y+47	; 0x2f
    1772:	98 a9       	ldd	r25, Y+48	; 0x30
    1774:	9c a7       	std	Y+44, r25	; 0x2c
    1776:	8b a7       	std	Y+43, r24	; 0x2b
    1778:	8b a5       	ldd	r24, Y+43	; 0x2b
    177a:	9c a5       	ldd	r25, Y+44	; 0x2c
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	f1 f7       	brne	.-4      	; 0x177c <LCD_sendCommand+0x10e>
    1780:	9c a7       	std	Y+44, r25	; 0x2c
    1782:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1784:	a8 e3       	ldi	r26, 0x38	; 56
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e8 e3       	ldi	r30, 0x38	; 56
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	80 68       	ori	r24, 0x80	; 128
    1790:	8c 93       	st	X, r24
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	a0 e8       	ldi	r26, 0x80	; 128
    1798:	bf e3       	ldi	r27, 0x3F	; 63
    179a:	8f a3       	std	Y+39, r24	; 0x27
    179c:	98 a7       	std	Y+40, r25	; 0x28
    179e:	a9 a7       	std	Y+41, r26	; 0x29
    17a0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a2:	6f a1       	ldd	r22, Y+39	; 0x27
    17a4:	78 a5       	ldd	r23, Y+40	; 0x28
    17a6:	89 a5       	ldd	r24, Y+41	; 0x29
    17a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	4a e7       	ldi	r20, 0x7A	; 122
    17b0:	53 e4       	ldi	r21, 0x43	; 67
    17b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	8b a3       	std	Y+35, r24	; 0x23
    17bc:	9c a3       	std	Y+36, r25	; 0x24
    17be:	ad a3       	std	Y+37, r26	; 0x25
    17c0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17c2:	6b a1       	ldd	r22, Y+35	; 0x23
    17c4:	7c a1       	ldd	r23, Y+36	; 0x24
    17c6:	8d a1       	ldd	r24, Y+37	; 0x25
    17c8:	9e a1       	ldd	r25, Y+38	; 0x26
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	40 e8       	ldi	r20, 0x80	; 128
    17d0:	5f e3       	ldi	r21, 0x3F	; 63
    17d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17d6:	88 23       	and	r24, r24
    17d8:	2c f4       	brge	.+10     	; 0x17e4 <LCD_sendCommand+0x176>
		__ticks = 1;
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	9a a3       	std	Y+34, r25	; 0x22
    17e0:	89 a3       	std	Y+33, r24	; 0x21
    17e2:	3f c0       	rjmp	.+126    	; 0x1862 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    17e4:	6b a1       	ldd	r22, Y+35	; 0x23
    17e6:	7c a1       	ldd	r23, Y+36	; 0x24
    17e8:	8d a1       	ldd	r24, Y+37	; 0x25
    17ea:	9e a1       	ldd	r25, Y+38	; 0x26
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	3f ef       	ldi	r19, 0xFF	; 255
    17f0:	4f e7       	ldi	r20, 0x7F	; 127
    17f2:	57 e4       	ldi	r21, 0x47	; 71
    17f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17f8:	18 16       	cp	r1, r24
    17fa:	4c f5       	brge	.+82     	; 0x184e <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17fc:	6f a1       	ldd	r22, Y+39	; 0x27
    17fe:	78 a5       	ldd	r23, Y+40	; 0x28
    1800:	89 a5       	ldd	r24, Y+41	; 0x29
    1802:	9a a5       	ldd	r25, Y+42	; 0x2a
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	40 e2       	ldi	r20, 0x20	; 32
    180a:	51 e4       	ldi	r21, 0x41	; 65
    180c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	bc 01       	movw	r22, r24
    1816:	cd 01       	movw	r24, r26
    1818:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	9a a3       	std	Y+34, r25	; 0x22
    1822:	89 a3       	std	Y+33, r24	; 0x21
    1824:	0f c0       	rjmp	.+30     	; 0x1844 <LCD_sendCommand+0x1d6>
    1826:	89 e1       	ldi	r24, 0x19	; 25
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	98 a3       	std	Y+32, r25	; 0x20
    182c:	8f 8f       	std	Y+31, r24	; 0x1f
    182e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1830:	98 a1       	ldd	r25, Y+32	; 0x20
    1832:	01 97       	sbiw	r24, 0x01	; 1
    1834:	f1 f7       	brne	.-4      	; 0x1832 <LCD_sendCommand+0x1c4>
    1836:	98 a3       	std	Y+32, r25	; 0x20
    1838:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    183a:	89 a1       	ldd	r24, Y+33	; 0x21
    183c:	9a a1       	ldd	r25, Y+34	; 0x22
    183e:	01 97       	sbiw	r24, 0x01	; 1
    1840:	9a a3       	std	Y+34, r25	; 0x22
    1842:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1844:	89 a1       	ldd	r24, Y+33	; 0x21
    1846:	9a a1       	ldd	r25, Y+34	; 0x22
    1848:	00 97       	sbiw	r24, 0x00	; 0
    184a:	69 f7       	brne	.-38     	; 0x1826 <LCD_sendCommand+0x1b8>
    184c:	14 c0       	rjmp	.+40     	; 0x1876 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    184e:	6b a1       	ldd	r22, Y+35	; 0x23
    1850:	7c a1       	ldd	r23, Y+36	; 0x24
    1852:	8d a1       	ldd	r24, Y+37	; 0x25
    1854:	9e a1       	ldd	r25, Y+38	; 0x26
    1856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	9a a3       	std	Y+34, r25	; 0x22
    1860:	89 a3       	std	Y+33, r24	; 0x21
    1862:	89 a1       	ldd	r24, Y+33	; 0x21
    1864:	9a a1       	ldd	r25, Y+34	; 0x22
    1866:	9e 8f       	std	Y+30, r25	; 0x1e
    1868:	8d 8f       	std	Y+29, r24	; 0x1d
    186a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    186c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	f1 f7       	brne	.-4      	; 0x186e <LCD_sendCommand+0x200>
    1872:	9e 8f       	std	Y+30, r25	; 0x1e
    1874:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    1876:	e5 e3       	ldi	r30, 0x35	; 53
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	89 ad       	ldd	r24, Y+57	; 0x39
    187c:	80 83       	st	Z, r24
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	a0 e8       	ldi	r26, 0x80	; 128
    1884:	bf e3       	ldi	r27, 0x3F	; 63
    1886:	89 8f       	std	Y+25, r24	; 0x19
    1888:	9a 8f       	std	Y+26, r25	; 0x1a
    188a:	ab 8f       	std	Y+27, r26	; 0x1b
    188c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    188e:	69 8d       	ldd	r22, Y+25	; 0x19
    1890:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1892:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1894:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	4a e7       	ldi	r20, 0x7A	; 122
    189c:	53 e4       	ldi	r21, 0x43	; 67
    189e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	8d 8b       	std	Y+21, r24	; 0x15
    18a8:	9e 8b       	std	Y+22, r25	; 0x16
    18aa:	af 8b       	std	Y+23, r26	; 0x17
    18ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18ae:	6d 89       	ldd	r22, Y+21	; 0x15
    18b0:	7e 89       	ldd	r23, Y+22	; 0x16
    18b2:	8f 89       	ldd	r24, Y+23	; 0x17
    18b4:	98 8d       	ldd	r25, Y+24	; 0x18
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	40 e8       	ldi	r20, 0x80	; 128
    18bc:	5f e3       	ldi	r21, 0x3F	; 63
    18be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18c2:	88 23       	and	r24, r24
    18c4:	2c f4       	brge	.+10     	; 0x18d0 <LCD_sendCommand+0x262>
		__ticks = 1;
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	9c 8b       	std	Y+20, r25	; 0x14
    18cc:	8b 8b       	std	Y+19, r24	; 0x13
    18ce:	3f c0       	rjmp	.+126    	; 0x194e <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    18d0:	6d 89       	ldd	r22, Y+21	; 0x15
    18d2:	7e 89       	ldd	r23, Y+22	; 0x16
    18d4:	8f 89       	ldd	r24, Y+23	; 0x17
    18d6:	98 8d       	ldd	r25, Y+24	; 0x18
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	3f ef       	ldi	r19, 0xFF	; 255
    18dc:	4f e7       	ldi	r20, 0x7F	; 127
    18de:	57 e4       	ldi	r21, 0x47	; 71
    18e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18e4:	18 16       	cp	r1, r24
    18e6:	4c f5       	brge	.+82     	; 0x193a <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e8:	69 8d       	ldd	r22, Y+25	; 0x19
    18ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e2       	ldi	r20, 0x20	; 32
    18f6:	51 e4       	ldi	r21, 0x41	; 65
    18f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	bc 01       	movw	r22, r24
    1902:	cd 01       	movw	r24, r26
    1904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	9c 8b       	std	Y+20, r25	; 0x14
    190e:	8b 8b       	std	Y+19, r24	; 0x13
    1910:	0f c0       	rjmp	.+30     	; 0x1930 <LCD_sendCommand+0x2c2>
    1912:	89 e1       	ldi	r24, 0x19	; 25
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	9a 8b       	std	Y+18, r25	; 0x12
    1918:	89 8b       	std	Y+17, r24	; 0x11
    191a:	89 89       	ldd	r24, Y+17	; 0x11
    191c:	9a 89       	ldd	r25, Y+18	; 0x12
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	f1 f7       	brne	.-4      	; 0x191e <LCD_sendCommand+0x2b0>
    1922:	9a 8b       	std	Y+18, r25	; 0x12
    1924:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1926:	8b 89       	ldd	r24, Y+19	; 0x13
    1928:	9c 89       	ldd	r25, Y+20	; 0x14
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	9c 8b       	std	Y+20, r25	; 0x14
    192e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1930:	8b 89       	ldd	r24, Y+19	; 0x13
    1932:	9c 89       	ldd	r25, Y+20	; 0x14
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	69 f7       	brne	.-38     	; 0x1912 <LCD_sendCommand+0x2a4>
    1938:	14 c0       	rjmp	.+40     	; 0x1962 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193a:	6d 89       	ldd	r22, Y+21	; 0x15
    193c:	7e 89       	ldd	r23, Y+22	; 0x16
    193e:	8f 89       	ldd	r24, Y+23	; 0x17
    1940:	98 8d       	ldd	r25, Y+24	; 0x18
    1942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	9c 8b       	std	Y+20, r25	; 0x14
    194c:	8b 8b       	std	Y+19, r24	; 0x13
    194e:	8b 89       	ldd	r24, Y+19	; 0x13
    1950:	9c 89       	ldd	r25, Y+20	; 0x14
    1952:	98 8b       	std	Y+16, r25	; 0x10
    1954:	8f 87       	std	Y+15, r24	; 0x0f
    1956:	8f 85       	ldd	r24, Y+15	; 0x0f
    1958:	98 89       	ldd	r25, Y+16	; 0x10
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	f1 f7       	brne	.-4      	; 0x195a <LCD_sendCommand+0x2ec>
    195e:	98 8b       	std	Y+16, r25	; 0x10
    1960:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1962:	a8 e3       	ldi	r26, 0x38	; 56
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	e8 e3       	ldi	r30, 0x38	; 56
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	8f 77       	andi	r24, 0x7F	; 127
    196e:	8c 93       	st	X, r24
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	a0 e8       	ldi	r26, 0x80	; 128
    1976:	bf e3       	ldi	r27, 0x3F	; 63
    1978:	8b 87       	std	Y+11, r24	; 0x0b
    197a:	9c 87       	std	Y+12, r25	; 0x0c
    197c:	ad 87       	std	Y+13, r26	; 0x0d
    197e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1980:	6b 85       	ldd	r22, Y+11	; 0x0b
    1982:	7c 85       	ldd	r23, Y+12	; 0x0c
    1984:	8d 85       	ldd	r24, Y+13	; 0x0d
    1986:	9e 85       	ldd	r25, Y+14	; 0x0e
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	4a e7       	ldi	r20, 0x7A	; 122
    198e:	53 e4       	ldi	r21, 0x43	; 67
    1990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	8f 83       	std	Y+7, r24	; 0x07
    199a:	98 87       	std	Y+8, r25	; 0x08
    199c:	a9 87       	std	Y+9, r26	; 0x09
    199e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19a0:	6f 81       	ldd	r22, Y+7	; 0x07
    19a2:	78 85       	ldd	r23, Y+8	; 0x08
    19a4:	89 85       	ldd	r24, Y+9	; 0x09
    19a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	40 e8       	ldi	r20, 0x80	; 128
    19ae:	5f e3       	ldi	r21, 0x3F	; 63
    19b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19b4:	88 23       	and	r24, r24
    19b6:	2c f4       	brge	.+10     	; 0x19c2 <LCD_sendCommand+0x354>
		__ticks = 1;
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	9e 83       	std	Y+6, r25	; 0x06
    19be:	8d 83       	std	Y+5, r24	; 0x05
    19c0:	3f c0       	rjmp	.+126    	; 0x1a40 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    19c2:	6f 81       	ldd	r22, Y+7	; 0x07
    19c4:	78 85       	ldd	r23, Y+8	; 0x08
    19c6:	89 85       	ldd	r24, Y+9	; 0x09
    19c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	3f ef       	ldi	r19, 0xFF	; 255
    19ce:	4f e7       	ldi	r20, 0x7F	; 127
    19d0:	57 e4       	ldi	r21, 0x47	; 71
    19d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d6:	18 16       	cp	r1, r24
    19d8:	4c f5       	brge	.+82     	; 0x1a2c <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19da:	6b 85       	ldd	r22, Y+11	; 0x0b
    19dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    19de:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e2       	ldi	r20, 0x20	; 32
    19e8:	51 e4       	ldi	r21, 0x41	; 65
    19ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	bc 01       	movw	r22, r24
    19f4:	cd 01       	movw	r24, r26
    19f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	9e 83       	std	Y+6, r25	; 0x06
    1a00:	8d 83       	std	Y+5, r24	; 0x05
    1a02:	0f c0       	rjmp	.+30     	; 0x1a22 <LCD_sendCommand+0x3b4>
    1a04:	89 e1       	ldi	r24, 0x19	; 25
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	9c 83       	std	Y+4, r25	; 0x04
    1a0a:	8b 83       	std	Y+3, r24	; 0x03
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	f1 f7       	brne	.-4      	; 0x1a10 <LCD_sendCommand+0x3a2>
    1a14:	9c 83       	std	Y+4, r25	; 0x04
    1a16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a18:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	9e 83       	std	Y+6, r25	; 0x06
    1a20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a22:	8d 81       	ldd	r24, Y+5	; 0x05
    1a24:	9e 81       	ldd	r25, Y+6	; 0x06
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	69 f7       	brne	.-38     	; 0x1a04 <LCD_sendCommand+0x396>
    1a2a:	14 c0       	rjmp	.+40     	; 0x1a54 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2e:	78 85       	ldd	r23, Y+8	; 0x08
    1a30:	89 85       	ldd	r24, Y+9	; 0x09
    1a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	9e 83       	std	Y+6, r25	; 0x06
    1a3e:	8d 83       	std	Y+5, r24	; 0x05
    1a40:	8d 81       	ldd	r24, Y+5	; 0x05
    1a42:	9e 81       	ldd	r25, Y+6	; 0x06
    1a44:	9a 83       	std	Y+2, r25	; 0x02
    1a46:	89 83       	std	Y+1, r24	; 0x01
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	f1 f7       	brne	.-4      	; 0x1a4c <LCD_sendCommand+0x3de>
    1a50:	9a 83       	std	Y+2, r25	; 0x02
    1a52:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1a54:	e9 96       	adiw	r28, 0x39	; 57
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	f8 94       	cli
    1a5a:	de bf       	out	0x3e, r29	; 62
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	cd bf       	out	0x3d, r28	; 61
    1a60:	cf 91       	pop	r28
    1a62:	df 91       	pop	r29
    1a64:	08 95       	ret

00001a66 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	e9 97       	sbiw	r28, 0x39	; 57
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	f8 94       	cli
    1a74:	de bf       	out	0x3e, r29	; 62
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	cd bf       	out	0x3d, r28	; 61
    1a7a:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1a7c:	a8 e3       	ldi	r26, 0x38	; 56
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e8 e3       	ldi	r30, 0x38	; 56
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	80 62       	ori	r24, 0x20	; 32
    1a88:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1a8a:	a8 e3       	ldi	r26, 0x38	; 56
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e8 e3       	ldi	r30, 0x38	; 56
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	8f 7b       	andi	r24, 0xBF	; 191
    1a96:	8c 93       	st	X, r24
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	a0 e8       	ldi	r26, 0x80	; 128
    1a9e:	bf e3       	ldi	r27, 0x3F	; 63
    1aa0:	8d ab       	std	Y+53, r24	; 0x35
    1aa2:	9e ab       	std	Y+54, r25	; 0x36
    1aa4:	af ab       	std	Y+55, r26	; 0x37
    1aa6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa8:	6d a9       	ldd	r22, Y+53	; 0x35
    1aaa:	7e a9       	ldd	r23, Y+54	; 0x36
    1aac:	8f a9       	ldd	r24, Y+55	; 0x37
    1aae:	98 ad       	ldd	r25, Y+56	; 0x38
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	4a e7       	ldi	r20, 0x7A	; 122
    1ab6:	53 e4       	ldi	r21, 0x43	; 67
    1ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	89 ab       	std	Y+49, r24	; 0x31
    1ac2:	9a ab       	std	Y+50, r25	; 0x32
    1ac4:	ab ab       	std	Y+51, r26	; 0x33
    1ac6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ac8:	69 a9       	ldd	r22, Y+49	; 0x31
    1aca:	7a a9       	ldd	r23, Y+50	; 0x32
    1acc:	8b a9       	ldd	r24, Y+51	; 0x33
    1ace:	9c a9       	ldd	r25, Y+52	; 0x34
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e8       	ldi	r20, 0x80	; 128
    1ad6:	5f e3       	ldi	r21, 0x3F	; 63
    1ad8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1adc:	88 23       	and	r24, r24
    1ade:	2c f4       	brge	.+10     	; 0x1aea <LCD_displayCharacter+0x84>
		__ticks = 1;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	98 ab       	std	Y+48, r25	; 0x30
    1ae6:	8f a7       	std	Y+47, r24	; 0x2f
    1ae8:	3f c0       	rjmp	.+126    	; 0x1b68 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1aea:	69 a9       	ldd	r22, Y+49	; 0x31
    1aec:	7a a9       	ldd	r23, Y+50	; 0x32
    1aee:	8b a9       	ldd	r24, Y+51	; 0x33
    1af0:	9c a9       	ldd	r25, Y+52	; 0x34
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	3f ef       	ldi	r19, 0xFF	; 255
    1af6:	4f e7       	ldi	r20, 0x7F	; 127
    1af8:	57 e4       	ldi	r21, 0x47	; 71
    1afa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1afe:	18 16       	cp	r1, r24
    1b00:	4c f5       	brge	.+82     	; 0x1b54 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b02:	6d a9       	ldd	r22, Y+53	; 0x35
    1b04:	7e a9       	ldd	r23, Y+54	; 0x36
    1b06:	8f a9       	ldd	r24, Y+55	; 0x37
    1b08:	98 ad       	ldd	r25, Y+56	; 0x38
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	40 e2       	ldi	r20, 0x20	; 32
    1b10:	51 e4       	ldi	r21, 0x41	; 65
    1b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	bc 01       	movw	r22, r24
    1b1c:	cd 01       	movw	r24, r26
    1b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	98 ab       	std	Y+48, r25	; 0x30
    1b28:	8f a7       	std	Y+47, r24	; 0x2f
    1b2a:	0f c0       	rjmp	.+30     	; 0x1b4a <LCD_displayCharacter+0xe4>
    1b2c:	89 e1       	ldi	r24, 0x19	; 25
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	9e a7       	std	Y+46, r25	; 0x2e
    1b32:	8d a7       	std	Y+45, r24	; 0x2d
    1b34:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b36:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	f1 f7       	brne	.-4      	; 0x1b38 <LCD_displayCharacter+0xd2>
    1b3c:	9e a7       	std	Y+46, r25	; 0x2e
    1b3e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b42:	98 a9       	ldd	r25, Y+48	; 0x30
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	98 ab       	std	Y+48, r25	; 0x30
    1b48:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b4c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	69 f7       	brne	.-38     	; 0x1b2c <LCD_displayCharacter+0xc6>
    1b52:	14 c0       	rjmp	.+40     	; 0x1b7c <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b54:	69 a9       	ldd	r22, Y+49	; 0x31
    1b56:	7a a9       	ldd	r23, Y+50	; 0x32
    1b58:	8b a9       	ldd	r24, Y+51	; 0x33
    1b5a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	98 ab       	std	Y+48, r25	; 0x30
    1b66:	8f a7       	std	Y+47, r24	; 0x2f
    1b68:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b6a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b6c:	9c a7       	std	Y+44, r25	; 0x2c
    1b6e:	8b a7       	std	Y+43, r24	; 0x2b
    1b70:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b72:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <LCD_displayCharacter+0x10e>
    1b78:	9c a7       	std	Y+44, r25	; 0x2c
    1b7a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1b7c:	a8 e3       	ldi	r26, 0x38	; 56
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e8 e3       	ldi	r30, 0x38	; 56
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	80 68       	ori	r24, 0x80	; 128
    1b88:	8c 93       	st	X, r24
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	a0 e8       	ldi	r26, 0x80	; 128
    1b90:	bf e3       	ldi	r27, 0x3F	; 63
    1b92:	8f a3       	std	Y+39, r24	; 0x27
    1b94:	98 a7       	std	Y+40, r25	; 0x28
    1b96:	a9 a7       	std	Y+41, r26	; 0x29
    1b98:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b9a:	6f a1       	ldd	r22, Y+39	; 0x27
    1b9c:	78 a5       	ldd	r23, Y+40	; 0x28
    1b9e:	89 a5       	ldd	r24, Y+41	; 0x29
    1ba0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	4a e7       	ldi	r20, 0x7A	; 122
    1ba8:	53 e4       	ldi	r21, 0x43	; 67
    1baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	8b a3       	std	Y+35, r24	; 0x23
    1bb4:	9c a3       	std	Y+36, r25	; 0x24
    1bb6:	ad a3       	std	Y+37, r26	; 0x25
    1bb8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bba:	6b a1       	ldd	r22, Y+35	; 0x23
    1bbc:	7c a1       	ldd	r23, Y+36	; 0x24
    1bbe:	8d a1       	ldd	r24, Y+37	; 0x25
    1bc0:	9e a1       	ldd	r25, Y+38	; 0x26
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	40 e8       	ldi	r20, 0x80	; 128
    1bc8:	5f e3       	ldi	r21, 0x3F	; 63
    1bca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bce:	88 23       	and	r24, r24
    1bd0:	2c f4       	brge	.+10     	; 0x1bdc <LCD_displayCharacter+0x176>
		__ticks = 1;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	9a a3       	std	Y+34, r25	; 0x22
    1bd8:	89 a3       	std	Y+33, r24	; 0x21
    1bda:	3f c0       	rjmp	.+126    	; 0x1c5a <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1bdc:	6b a1       	ldd	r22, Y+35	; 0x23
    1bde:	7c a1       	ldd	r23, Y+36	; 0x24
    1be0:	8d a1       	ldd	r24, Y+37	; 0x25
    1be2:	9e a1       	ldd	r25, Y+38	; 0x26
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	3f ef       	ldi	r19, 0xFF	; 255
    1be8:	4f e7       	ldi	r20, 0x7F	; 127
    1bea:	57 e4       	ldi	r21, 0x47	; 71
    1bec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bf0:	18 16       	cp	r1, r24
    1bf2:	4c f5       	brge	.+82     	; 0x1c46 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf4:	6f a1       	ldd	r22, Y+39	; 0x27
    1bf6:	78 a5       	ldd	r23, Y+40	; 0x28
    1bf8:	89 a5       	ldd	r24, Y+41	; 0x29
    1bfa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 e2       	ldi	r20, 0x20	; 32
    1c02:	51 e4       	ldi	r21, 0x41	; 65
    1c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	bc 01       	movw	r22, r24
    1c0e:	cd 01       	movw	r24, r26
    1c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	9a a3       	std	Y+34, r25	; 0x22
    1c1a:	89 a3       	std	Y+33, r24	; 0x21
    1c1c:	0f c0       	rjmp	.+30     	; 0x1c3c <LCD_displayCharacter+0x1d6>
    1c1e:	89 e1       	ldi	r24, 0x19	; 25
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	98 a3       	std	Y+32, r25	; 0x20
    1c24:	8f 8f       	std	Y+31, r24	; 0x1f
    1c26:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c28:	98 a1       	ldd	r25, Y+32	; 0x20
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	f1 f7       	brne	.-4      	; 0x1c2a <LCD_displayCharacter+0x1c4>
    1c2e:	98 a3       	std	Y+32, r25	; 0x20
    1c30:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c32:	89 a1       	ldd	r24, Y+33	; 0x21
    1c34:	9a a1       	ldd	r25, Y+34	; 0x22
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	9a a3       	std	Y+34, r25	; 0x22
    1c3a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c3e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	69 f7       	brne	.-38     	; 0x1c1e <LCD_displayCharacter+0x1b8>
    1c44:	14 c0       	rjmp	.+40     	; 0x1c6e <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c46:	6b a1       	ldd	r22, Y+35	; 0x23
    1c48:	7c a1       	ldd	r23, Y+36	; 0x24
    1c4a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c4c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	9a a3       	std	Y+34, r25	; 0x22
    1c58:	89 a3       	std	Y+33, r24	; 0x21
    1c5a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c5c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c5e:	9e 8f       	std	Y+30, r25	; 0x1e
    1c60:	8d 8f       	std	Y+29, r24	; 0x1d
    1c62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c64:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	f1 f7       	brne	.-4      	; 0x1c66 <LCD_displayCharacter+0x200>
    1c6a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c6c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    1c6e:	e5 e3       	ldi	r30, 0x35	; 53
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	89 ad       	ldd	r24, Y+57	; 0x39
    1c74:	80 83       	st	Z, r24
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	a0 e8       	ldi	r26, 0x80	; 128
    1c7c:	bf e3       	ldi	r27, 0x3F	; 63
    1c7e:	89 8f       	std	Y+25, r24	; 0x19
    1c80:	9a 8f       	std	Y+26, r25	; 0x1a
    1c82:	ab 8f       	std	Y+27, r26	; 0x1b
    1c84:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c86:	69 8d       	ldd	r22, Y+25	; 0x19
    1c88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	4a e7       	ldi	r20, 0x7A	; 122
    1c94:	53 e4       	ldi	r21, 0x43	; 67
    1c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	8d 8b       	std	Y+21, r24	; 0x15
    1ca0:	9e 8b       	std	Y+22, r25	; 0x16
    1ca2:	af 8b       	std	Y+23, r26	; 0x17
    1ca4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ca6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ca8:	7e 89       	ldd	r23, Y+22	; 0x16
    1caa:	8f 89       	ldd	r24, Y+23	; 0x17
    1cac:	98 8d       	ldd	r25, Y+24	; 0x18
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	40 e8       	ldi	r20, 0x80	; 128
    1cb4:	5f e3       	ldi	r21, 0x3F	; 63
    1cb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cba:	88 23       	and	r24, r24
    1cbc:	2c f4       	brge	.+10     	; 0x1cc8 <LCD_displayCharacter+0x262>
		__ticks = 1;
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	9c 8b       	std	Y+20, r25	; 0x14
    1cc4:	8b 8b       	std	Y+19, r24	; 0x13
    1cc6:	3f c0       	rjmp	.+126    	; 0x1d46 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1cc8:	6d 89       	ldd	r22, Y+21	; 0x15
    1cca:	7e 89       	ldd	r23, Y+22	; 0x16
    1ccc:	8f 89       	ldd	r24, Y+23	; 0x17
    1cce:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	3f ef       	ldi	r19, 0xFF	; 255
    1cd4:	4f e7       	ldi	r20, 0x7F	; 127
    1cd6:	57 e4       	ldi	r21, 0x47	; 71
    1cd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cdc:	18 16       	cp	r1, r24
    1cde:	4c f5       	brge	.+82     	; 0x1d32 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ce2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ce4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ce6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e2       	ldi	r20, 0x20	; 32
    1cee:	51 e4       	ldi	r21, 0x41	; 65
    1cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	bc 01       	movw	r22, r24
    1cfa:	cd 01       	movw	r24, r26
    1cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	9c 8b       	std	Y+20, r25	; 0x14
    1d06:	8b 8b       	std	Y+19, r24	; 0x13
    1d08:	0f c0       	rjmp	.+30     	; 0x1d28 <LCD_displayCharacter+0x2c2>
    1d0a:	89 e1       	ldi	r24, 0x19	; 25
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	9a 8b       	std	Y+18, r25	; 0x12
    1d10:	89 8b       	std	Y+17, r24	; 0x11
    1d12:	89 89       	ldd	r24, Y+17	; 0x11
    1d14:	9a 89       	ldd	r25, Y+18	; 0x12
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <LCD_displayCharacter+0x2b0>
    1d1a:	9a 8b       	std	Y+18, r25	; 0x12
    1d1c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d20:	9c 89       	ldd	r25, Y+20	; 0x14
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	9c 8b       	std	Y+20, r25	; 0x14
    1d26:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d28:	8b 89       	ldd	r24, Y+19	; 0x13
    1d2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	69 f7       	brne	.-38     	; 0x1d0a <LCD_displayCharacter+0x2a4>
    1d30:	14 c0       	rjmp	.+40     	; 0x1d5a <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d32:	6d 89       	ldd	r22, Y+21	; 0x15
    1d34:	7e 89       	ldd	r23, Y+22	; 0x16
    1d36:	8f 89       	ldd	r24, Y+23	; 0x17
    1d38:	98 8d       	ldd	r25, Y+24	; 0x18
    1d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	9c 8b       	std	Y+20, r25	; 0x14
    1d44:	8b 8b       	std	Y+19, r24	; 0x13
    1d46:	8b 89       	ldd	r24, Y+19	; 0x13
    1d48:	9c 89       	ldd	r25, Y+20	; 0x14
    1d4a:	98 8b       	std	Y+16, r25	; 0x10
    1d4c:	8f 87       	std	Y+15, r24	; 0x0f
    1d4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d50:	98 89       	ldd	r25, Y+16	; 0x10
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	f1 f7       	brne	.-4      	; 0x1d52 <LCD_displayCharacter+0x2ec>
    1d56:	98 8b       	std	Y+16, r25	; 0x10
    1d58:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1d5a:	a8 e3       	ldi	r26, 0x38	; 56
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	e8 e3       	ldi	r30, 0x38	; 56
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	8f 77       	andi	r24, 0x7F	; 127
    1d66:	8c 93       	st	X, r24
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	a0 e8       	ldi	r26, 0x80	; 128
    1d6e:	bf e3       	ldi	r27, 0x3F	; 63
    1d70:	8b 87       	std	Y+11, r24	; 0x0b
    1d72:	9c 87       	std	Y+12, r25	; 0x0c
    1d74:	ad 87       	std	Y+13, r26	; 0x0d
    1d76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	4a e7       	ldi	r20, 0x7A	; 122
    1d86:	53 e4       	ldi	r21, 0x43	; 67
    1d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	8f 83       	std	Y+7, r24	; 0x07
    1d92:	98 87       	std	Y+8, r25	; 0x08
    1d94:	a9 87       	std	Y+9, r26	; 0x09
    1d96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d98:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9a:	78 85       	ldd	r23, Y+8	; 0x08
    1d9c:	89 85       	ldd	r24, Y+9	; 0x09
    1d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e8       	ldi	r20, 0x80	; 128
    1da6:	5f e3       	ldi	r21, 0x3F	; 63
    1da8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dac:	88 23       	and	r24, r24
    1dae:	2c f4       	brge	.+10     	; 0x1dba <LCD_displayCharacter+0x354>
		__ticks = 1;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	9e 83       	std	Y+6, r25	; 0x06
    1db6:	8d 83       	std	Y+5, r24	; 0x05
    1db8:	3f c0       	rjmp	.+126    	; 0x1e38 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    1dba:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbc:	78 85       	ldd	r23, Y+8	; 0x08
    1dbe:	89 85       	ldd	r24, Y+9	; 0x09
    1dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	3f ef       	ldi	r19, 0xFF	; 255
    1dc6:	4f e7       	ldi	r20, 0x7F	; 127
    1dc8:	57 e4       	ldi	r21, 0x47	; 71
    1dca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dce:	18 16       	cp	r1, r24
    1dd0:	4c f5       	brge	.+82     	; 0x1e24 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e2       	ldi	r20, 0x20	; 32
    1de0:	51 e4       	ldi	r21, 0x41	; 65
    1de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	bc 01       	movw	r22, r24
    1dec:	cd 01       	movw	r24, r26
    1dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	9e 83       	std	Y+6, r25	; 0x06
    1df8:	8d 83       	std	Y+5, r24	; 0x05
    1dfa:	0f c0       	rjmp	.+30     	; 0x1e1a <LCD_displayCharacter+0x3b4>
    1dfc:	89 e1       	ldi	r24, 0x19	; 25
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	9c 83       	std	Y+4, r25	; 0x04
    1e02:	8b 83       	std	Y+3, r24	; 0x03
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	9c 81       	ldd	r25, Y+4	; 0x04
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <LCD_displayCharacter+0x3a2>
    1e0c:	9c 83       	std	Y+4, r25	; 0x04
    1e0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e10:	8d 81       	ldd	r24, Y+5	; 0x05
    1e12:	9e 81       	ldd	r25, Y+6	; 0x06
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	9e 83       	std	Y+6, r25	; 0x06
    1e18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	69 f7       	brne	.-38     	; 0x1dfc <LCD_displayCharacter+0x396>
    1e22:	14 c0       	rjmp	.+40     	; 0x1e4c <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e24:	6f 81       	ldd	r22, Y+7	; 0x07
    1e26:	78 85       	ldd	r23, Y+8	; 0x08
    1e28:	89 85       	ldd	r24, Y+9	; 0x09
    1e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	9e 83       	std	Y+6, r25	; 0x06
    1e36:	8d 83       	std	Y+5, r24	; 0x05
    1e38:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3c:	9a 83       	std	Y+2, r25	; 0x02
    1e3e:	89 83       	std	Y+1, r24	; 0x01
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	9a 81       	ldd	r25, Y+2	; 0x02
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <LCD_displayCharacter+0x3de>
    1e48:	9a 83       	std	Y+2, r25	; 0x02
    1e4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    1e4c:	e9 96       	adiw	r28, 0x39	; 57
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	f8 94       	cli
    1e52:	de bf       	out	0x3e, r29	; 62
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	cd bf       	out	0x3d, r28	; 61
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	08 95       	ret

00001e5e <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1e5e:	df 93       	push	r29
    1e60:	cf 93       	push	r28
    1e62:	00 d0       	rcall	.+0      	; 0x1e64 <LCD_displayString+0x6>
    1e64:	0f 92       	push	r0
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	9b 83       	std	Y+3, r25	; 0x03
    1e6c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e6e:	19 82       	std	Y+1, r1	; 0x01
    1e70:	0e c0       	rjmp	.+28     	; 0x1e8e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	28 2f       	mov	r18, r24
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7c:	fc 01       	movw	r30, r24
    1e7e:	e2 0f       	add	r30, r18
    1e80:	f3 1f       	adc	r31, r19
    1e82:	80 81       	ld	r24, Z
    1e84:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_displayCharacter>
		i++;
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	8f 5f       	subi	r24, 0xFF	; 255
    1e8c:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	9b 81       	ldd	r25, Y+3	; 0x03
    1e98:	fc 01       	movw	r30, r24
    1e9a:	e2 0f       	add	r30, r18
    1e9c:	f3 1f       	adc	r31, r19
    1e9e:	80 81       	ld	r24, Z
    1ea0:	88 23       	and	r24, r24
    1ea2:	39 f7       	brne	.-50     	; 0x1e72 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	08 95       	ret

00001eb0 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1eb0:	df 93       	push	r29
    1eb2:	cf 93       	push	r28
    1eb4:	00 d0       	rcall	.+0      	; 0x1eb6 <LCD_goToRowColumn+0x6>
    1eb6:	00 d0       	rcall	.+0      	; 0x1eb8 <LCD_goToRowColumn+0x8>
    1eb8:	0f 92       	push	r0
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	8a 83       	std	Y+2, r24	; 0x02
    1ec0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	3d 83       	std	Y+5, r19	; 0x05
    1eca:	2c 83       	std	Y+4, r18	; 0x04
    1ecc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ece:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed0:	81 30       	cpi	r24, 0x01	; 1
    1ed2:	91 05       	cpc	r25, r1
    1ed4:	c1 f0       	breq	.+48     	; 0x1f06 <LCD_goToRowColumn+0x56>
    1ed6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ed8:	3d 81       	ldd	r19, Y+5	; 0x05
    1eda:	22 30       	cpi	r18, 0x02	; 2
    1edc:	31 05       	cpc	r19, r1
    1ede:	2c f4       	brge	.+10     	; 0x1eea <LCD_goToRowColumn+0x3a>
    1ee0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee4:	00 97       	sbiw	r24, 0x00	; 0
    1ee6:	61 f0       	breq	.+24     	; 0x1f00 <LCD_goToRowColumn+0x50>
    1ee8:	19 c0       	rjmp	.+50     	; 0x1f1c <LCD_goToRowColumn+0x6c>
    1eea:	2c 81       	ldd	r18, Y+4	; 0x04
    1eec:	3d 81       	ldd	r19, Y+5	; 0x05
    1eee:	22 30       	cpi	r18, 0x02	; 2
    1ef0:	31 05       	cpc	r19, r1
    1ef2:	69 f0       	breq	.+26     	; 0x1f0e <LCD_goToRowColumn+0x5e>
    1ef4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef8:	83 30       	cpi	r24, 0x03	; 3
    1efa:	91 05       	cpc	r25, r1
    1efc:	61 f0       	breq	.+24     	; 0x1f16 <LCD_goToRowColumn+0x66>
    1efe:	0e c0       	rjmp	.+28     	; 0x1f1c <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	89 83       	std	Y+1, r24	; 0x01
    1f04:	0b c0       	rjmp	.+22     	; 0x1f1c <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1f06:	8b 81       	ldd	r24, Y+3	; 0x03
    1f08:	80 5c       	subi	r24, 0xC0	; 192
    1f0a:	89 83       	std	Y+1, r24	; 0x01
    1f0c:	07 c0       	rjmp	.+14     	; 0x1f1c <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x14;
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	8c 5e       	subi	r24, 0xEC	; 236
    1f12:	89 83       	std	Y+1, r24	; 0x01
    1f14:	03 c0       	rjmp	.+6      	; 0x1f1c <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x54;
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	8c 5a       	subi	r24, 0xAC	; 172
    1f1a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	80 68       	ori	r24, 0x80	; 128
    1f20:	0e 94 37 0b 	call	0x166e	; 0x166e <LCD_sendCommand>
}
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	cf 91       	pop	r28
    1f30:	df 91       	pop	r29
    1f32:	08 95       	ret

00001f34 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	00 d0       	rcall	.+0      	; 0x1f3a <LCD_displayStringRowColumn+0x6>
    1f3a:	00 d0       	rcall	.+0      	; 0x1f3c <LCD_displayStringRowColumn+0x8>
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
    1f40:	89 83       	std	Y+1, r24	; 0x01
    1f42:	6a 83       	std	Y+2, r22	; 0x02
    1f44:	5c 83       	std	Y+4, r21	; 0x04
    1f46:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	6a 81       	ldd	r22, Y+2	; 0x02
    1f4c:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	9c 81       	ldd	r25, Y+4	; 0x04
    1f54:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_displayString>
}
    1f58:	0f 90       	pop	r0
    1f5a:	0f 90       	pop	r0
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	08 95       	ret

00001f66 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1f66:	df 93       	push	r29
    1f68:	cf 93       	push	r28
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
    1f6e:	62 97       	sbiw	r28, 0x12	; 18
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	f8 94       	cli
    1f74:	de bf       	out	0x3e, r29	; 62
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	cd bf       	out	0x3d, r28	; 61
    1f7a:	9a 8b       	std	Y+18, r25	; 0x12
    1f7c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    1f7e:	89 89       	ldd	r24, Y+17	; 0x11
    1f80:	9a 89       	ldd	r25, Y+18	; 0x12
    1f82:	9e 01       	movw	r18, r28
    1f84:	2f 5f       	subi	r18, 0xFF	; 255
    1f86:	3f 4f       	sbci	r19, 0xFF	; 255
    1f88:	b9 01       	movw	r22, r18
    1f8a:	4a e0       	ldi	r20, 0x0A	; 10
    1f8c:	50 e0       	ldi	r21, 0x00	; 0
    1f8e:	0e 94 13 26 	call	0x4c26	; 0x4c26 <itoa>
   LCD_displayString(buff);
    1f92:	ce 01       	movw	r24, r28
    1f94:	01 96       	adiw	r24, 0x01	; 1
    1f96:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_displayString>
}
    1f9a:	62 96       	adiw	r28, 0x12	; 18
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	de bf       	out	0x3e, r29	; 62
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	cd bf       	out	0x3d, r28	; 61
    1fa6:	cf 91       	pop	r28
    1fa8:	df 91       	pop	r29
    1faa:	08 95       	ret

00001fac <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	0e 94 37 0b 	call	0x166e	; 0x166e <LCD_sendCommand>
}
    1fba:	cf 91       	pop	r28
    1fbc:	df 91       	pop	r29
    1fbe:	08 95       	ret

00001fc0 <main>:
 * global to use it in external function
 */
bool g_OK = TRUE;
/*********************************************************************************/
int main(void)
{
    1fc0:	df 93       	push	r29
    1fc2:	cf 93       	push	r28
    1fc4:	cd b7       	in	r28, 0x3d	; 61
    1fc6:	de b7       	in	r29, 0x3e	; 62
    1fc8:	ad 97       	sbiw	r28, 0x2d	; 45
    1fca:	0f b6       	in	r0, 0x3f	; 63
    1fcc:	f8 94       	cli
    1fce:	de bf       	out	0x3e, r29	; 62
    1fd0:	0f be       	out	0x3f, r0	; 63
    1fd2:	cd bf       	out	0x3d, r28	; 61
	 *******************************************************************************/
	/*
	 * local variable to use it with UP button to make sure that the
	 * functionality is done one time while pressing the button
	 */
	bool UP_flag = TRUE;
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	8e 8f       	std	Y+30, r24	; 0x1e

	/*
	 * local variable to use it with down button to make sure that the
	 * functionality is done one time while pressing the button
	 */
	bool Down_flag = TRUE;
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	8d 8f       	std	Y+29, r24	; 0x1d
	 */
	INT2_ConfigType  OK;
	/*
	 * Configure Interrupt 0 to work with falling edge
	 */
	right.INT0_senseControl  = INT0_Falling;
    1fdc:	82 e0       	ldi	r24, 0x02	; 2
    1fde:	8b a7       	std	Y+43, r24	; 0x2b
	/*
	 * Configure Interrupt 1 to work with falling edge
	 */
	left.INT1_senseControl   = INT1_Falling;
    1fe0:	82 e0       	ldi	r24, 0x02	; 2
    1fe2:	8c a7       	std	Y+44, r24	; 0x2c
	/*
	 * Configure Interrupt 2 to work with falling edge
	 */
	OK.INT2_senseControl     = INT2_Falling;
    1fe4:	82 e0       	ldi	r24, 0x02	; 2
    1fe6:	8d a7       	std	Y+45, r24	; 0x2d
	 * with mode --> compare
	 * compare at channel A
	 * No need for OC1A --> Disconnect
	 * Define clock--> F_CPU_1024
	 */
	clock.timer1_InitialValue = INITIAL_VALUE;
    1fe8:	18 a2       	std	Y+32, r1	; 0x20
    1fea:	1f 8e       	std	Y+31, r1	; 0x1f
	clock.timer1_compare_MatchValue = COMPARE_VALUE;
    1fec:	81 ed       	ldi	r24, 0xD1	; 209
    1fee:	93 e0       	ldi	r25, 0x03	; 3
    1ff0:	9a a3       	std	Y+34, r25	; 0x22
    1ff2:	89 a3       	std	Y+33, r24	; 0x21
	clock.timer1_mode = CTC_OCR1A;
    1ff4:	84 e0       	ldi	r24, 0x04	; 4
    1ff6:	8e a3       	std	Y+38, r24	; 0x26
	clock.channel = ChannelA;
    1ff8:	1f a2       	std	Y+39, r1	; 0x27
	clock.Compare_Mode_NonPWM = Disconnected_NonPWM_16;
    1ffa:	18 a6       	std	Y+40, r1	; 0x28
	clock.timer1_clock = F_CPU_1024;
    1ffc:	85 e0       	ldi	r24, 0x05	; 5
    1ffe:	8d a3       	std	Y+37, r24	; 0x25
	/*
	 * Configure the Callback function of timer to do
	 * a specific functionality every interrupt occurrence
	 * in Timer 1
	 */
	Timer1_setCallBack(tick);
    2000:	80 e8       	ldi	r24, 0x80	; 128
    2002:	98 e0       	ldi	r25, 0x08	; 8
    2004:	0e 94 2d 23 	call	0x465a	; 0x465a <Timer1_setCallBack>
	/*
	 * Configure the Callback function of timer to do
	 * a specific functionality every interrupt occurrence
	 * for External Interrupt 0
	 */
	INT0_setCallBack(Right);
    2008:	8a e8       	ldi	r24, 0x8A	; 138
    200a:	98 e0       	ldi	r25, 0x08	; 8
    200c:	0e 94 19 07 	call	0xe32	; 0xe32 <INT0_setCallBack>
	/*
	 * Configure the Callback function of timer to do
	 * a specific functionality every interrupt occurrence
	 * for External Interrupt 1
	 */
	INT1_setCallBack(Left);
    2010:	81 eb       	ldi	r24, 0xB1	; 177
    2012:	98 e0       	ldi	r25, 0x08	; 8
    2014:	0e 94 2b 07 	call	0xe56	; 0xe56 <INT1_setCallBack>
	/*
	 * Configure the Callback function of timer to do
	 * a specific functionality every interrupt occurrence
	 * for External Interrupt 2
	 */
	INT2_setCallBack(OK_FUNC);
    2018:	88 ed       	ldi	r24, 0xD8	; 216
    201a:	98 e0       	ldi	r25, 0x08	; 8
    201c:	0e 94 3d 07 	call	0xe7a	; 0xe7a <INT2_setCallBack>
	 *                             Modules Initialization                          *
	 *******************************************************************************/
	/*
	 * Configure Down button as input pin
	 */
	DOWN_BUTTON_DIRECTION_REG = CLEAR_BIT(DOWN_BUTTON_DIRECTION_REG, DOWN_BUTTON_PIN);
    2020:	2a e3       	ldi	r18, 0x3A	; 58
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	aa e3       	ldi	r26, 0x3A	; 58
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	ea e3       	ldi	r30, 0x3A	; 58
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	8d 7f       	andi	r24, 0xFD	; 253
    2030:	8c 93       	st	X, r24
    2032:	8c 91       	ld	r24, X
    2034:	f9 01       	movw	r30, r18
    2036:	80 83       	st	Z, r24
	/*
	 * Enable internal Pull Up register for Down button
	 */
	DOWN_BUTTON_PORT_REG = SET_BIT(DOWN_BUTTON_PORT_REG, DOWN_BUTTON_PIN);
    2038:	2b e3       	ldi	r18, 0x3B	; 59
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	ab e3       	ldi	r26, 0x3B	; 59
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	eb e3       	ldi	r30, 0x3B	; 59
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	82 60       	ori	r24, 0x02	; 2
    2048:	8c 93       	st	X, r24
    204a:	8c 91       	ld	r24, X
    204c:	f9 01       	movw	r30, r18
    204e:	80 83       	st	Z, r24
	/*
	 * Configure Up button as input pin
	 */
	UP_BUTTON_DIRECTION_REG = CLEAR_BIT(UP_BUTTON_DIRECTION_REG, UP_BUTTON_PIN);
    2050:	2a e3       	ldi	r18, 0x3A	; 58
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	aa e3       	ldi	r26, 0x3A	; 58
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	ea e3       	ldi	r30, 0x3A	; 58
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	8e 7f       	andi	r24, 0xFE	; 254
    2060:	8c 93       	st	X, r24
    2062:	8c 91       	ld	r24, X
    2064:	f9 01       	movw	r30, r18
    2066:	80 83       	st	Z, r24
	/*
	 * Enable internal Pull Up register for Down button
	 */

	UP_BUTTON_PORT_REG = SET_BIT(UP_BUTTON_PORT_REG, UP_BUTTON_PIN);
    2068:	2b e3       	ldi	r18, 0x3B	; 59
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	ab e3       	ldi	r26, 0x3B	; 59
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	eb e3       	ldi	r30, 0x3B	; 59
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	81 60       	ori	r24, 0x01	; 1
    2078:	8c 93       	st	X, r24
    207a:	8c 91       	ld	r24, X
    207c:	f9 01       	movw	r30, r18
    207e:	80 83       	st	Z, r24
	/*
	 * Initialize LCD to be ready to work
	 */
	LCD_init();
    2080:	0e 94 1c 0b 	call	0x1638	; 0x1638 <LCD_init>
	/*
	 * Initialize Interrupt 0 to be ready to work
	 */
	INT0_Init(&right);
    2084:	ce 01       	movw	r24, r28
    2086:	8b 96       	adiw	r24, 0x2b	; 43
    2088:	0e 94 60 06 	call	0xcc0	; 0xcc0 <INT0_Init>
	/*
	 * Initialize Interrupt 1 to be ready to work
	 */
	INT1_Init(&left);
    208c:	ce 01       	movw	r24, r28
    208e:	8c 96       	adiw	r24, 0x2c	; 44
    2090:	0e 94 97 06 	call	0xd2e	; 0xd2e <INT1_Init>
	/*
	 * Initialize Interrupt 2 to be ready to work
	 */
	INT2_Init(&OK);
    2094:	ce 01       	movw	r24, r28
    2096:	8d 96       	adiw	r24, 0x2d	; 45
    2098:	0e 94 d4 06 	call	0xda8	; 0xda8 <INT2_Init>
	/*
	 * Start timer to count
	 */
	Timer1_Init(&clock);
    209c:	ce 01       	movw	r24, r28
    209e:	4f 96       	adiw	r24, 0x1f	; 31
    20a0:	0e 94 22 15 	call	0x2a44	; 0x2a44 <Timer1_Init>
	/*
	 * Enable i-bit in the SREG register
	 */
	SREG |= (1<<7);
    20a4:	af e5       	ldi	r26, 0x5F	; 95
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	ef e5       	ldi	r30, 0x5F	; 95
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	80 68       	ori	r24, 0x80	; 128
    20b0:	8c 93       	st	X, r24
		 *                          Display The CLOCK                             *
		 **************************************************************************/
		/*
		 * Check if OK button in the default value or not
		 */
		if(g_OK == TRUE)
    20b2:	80 91 69 00 	lds	r24, 0x0069
    20b6:	81 30       	cpi	r24, 0x01	; 1
    20b8:	41 f4       	brne	.+16     	; 0x20ca <main+0x10a>
		{
			/*
			 * Force the LCD to hide the cursor in the default state in displaying clock
			 */
			LCD_sendCommand(HIDE_CURSOR_COMMAND);
    20ba:	8c e0       	ldi	r24, 0x0C	; 12
    20bc:	0e 94 37 0b 	call	0x166e	; 0x166e <LCD_sendCommand>
			/*
			 * Call the function which responsible to calculate the time
			 */
			DigitalClock();
    20c0:	0e 94 4c 08 	call	0x1098	; 0x1098 <DigitalClock>
			/*
			 * Call the function which responsible to display the digits of the digital clock
			 */
			display();
    20c4:	0e 94 dd 07 	call	0xfba	; 0xfba <display>
    20c8:	f4 cf       	rjmp	.-24     	; 0x20b2 <main+0xf2>
		else
		{
			/*
			 * Force the LCD to display the cursor to Know which digit you want to reset
			 */
			LCD_sendCommand(DISPLAY_CURSOR_COMMAND);
    20ca:	8e e0       	ldi	r24, 0x0E	; 14
    20cc:	0e 94 37 0b 	call	0x166e	; 0x166e <LCD_sendCommand>
			/*
			 * Force the cursor to go left or right in the same row
			 * depending on the value of the position of the cursor
			 * this value depend on time of clicks on left or right buttons
			 */
			LCD_goToRowColumn(DIGITAL_CLOCK_ROW, g_cursorPosition-1);
    20d0:	80 91 68 00 	lds	r24, 0x0068
    20d4:	98 2f       	mov	r25, r24
    20d6:	91 50       	subi	r25, 0x01	; 1
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	69 2f       	mov	r22, r25
    20dc:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <LCD_goToRowColumn>
			/**************************************************************************
			 *                              UP Button                                 *
			 **************************************************************************/
			if( (BIT_IS_CLEAR(UP_BUTTON_INPUT_REG, UP_BUTTON_PIN))  )
    20e0:	e9 e3       	ldi	r30, 0x39	; 57
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	88 2f       	mov	r24, r24
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	81 70       	andi	r24, 0x01	; 1
    20ec:	90 70       	andi	r25, 0x00	; 0
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	09 f0       	breq	.+2      	; 0x20f4 <main+0x134>
    20f2:	84 c0       	rjmp	.+264    	; 0x21fc <main+0x23c>
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	a8 ec       	ldi	r26, 0xC8	; 200
    20fa:	b1 e4       	ldi	r27, 0x41	; 65
    20fc:	89 8f       	std	Y+25, r24	; 0x19
    20fe:	9a 8f       	std	Y+26, r25	; 0x1a
    2100:	ab 8f       	std	Y+27, r26	; 0x1b
    2102:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2104:	69 8d       	ldd	r22, Y+25	; 0x19
    2106:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2108:	8b 8d       	ldd	r24, Y+27	; 0x1b
    210a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	4a e7       	ldi	r20, 0x7A	; 122
    2112:	53 e4       	ldi	r21, 0x43	; 67
    2114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	8d 8b       	std	Y+21, r24	; 0x15
    211e:	9e 8b       	std	Y+22, r25	; 0x16
    2120:	af 8b       	std	Y+23, r26	; 0x17
    2122:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2124:	6d 89       	ldd	r22, Y+21	; 0x15
    2126:	7e 89       	ldd	r23, Y+22	; 0x16
    2128:	8f 89       	ldd	r24, Y+23	; 0x17
    212a:	98 8d       	ldd	r25, Y+24	; 0x18
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	40 e8       	ldi	r20, 0x80	; 128
    2132:	5f e3       	ldi	r21, 0x3F	; 63
    2134:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2138:	88 23       	and	r24, r24
    213a:	2c f4       	brge	.+10     	; 0x2146 <main+0x186>
		__ticks = 1;
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	9c 8b       	std	Y+20, r25	; 0x14
    2142:	8b 8b       	std	Y+19, r24	; 0x13
    2144:	3f c0       	rjmp	.+126    	; 0x21c4 <main+0x204>
	else if (__tmp > 65535)
    2146:	6d 89       	ldd	r22, Y+21	; 0x15
    2148:	7e 89       	ldd	r23, Y+22	; 0x16
    214a:	8f 89       	ldd	r24, Y+23	; 0x17
    214c:	98 8d       	ldd	r25, Y+24	; 0x18
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	3f ef       	ldi	r19, 0xFF	; 255
    2152:	4f e7       	ldi	r20, 0x7F	; 127
    2154:	57 e4       	ldi	r21, 0x47	; 71
    2156:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    215a:	18 16       	cp	r1, r24
    215c:	4c f5       	brge	.+82     	; 0x21b0 <main+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215e:	69 8d       	ldd	r22, Y+25	; 0x19
    2160:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2162:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2164:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e2       	ldi	r20, 0x20	; 32
    216c:	51 e4       	ldi	r21, 0x41	; 65
    216e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	bc 01       	movw	r22, r24
    2178:	cd 01       	movw	r24, r26
    217a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	9c 8b       	std	Y+20, r25	; 0x14
    2184:	8b 8b       	std	Y+19, r24	; 0x13
    2186:	0f c0       	rjmp	.+30     	; 0x21a6 <main+0x1e6>
    2188:	89 e1       	ldi	r24, 0x19	; 25
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	9a 8b       	std	Y+18, r25	; 0x12
    218e:	89 8b       	std	Y+17, r24	; 0x11
    2190:	89 89       	ldd	r24, Y+17	; 0x11
    2192:	9a 89       	ldd	r25, Y+18	; 0x12
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	f1 f7       	brne	.-4      	; 0x2194 <main+0x1d4>
    2198:	9a 8b       	std	Y+18, r25	; 0x12
    219a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219c:	8b 89       	ldd	r24, Y+19	; 0x13
    219e:	9c 89       	ldd	r25, Y+20	; 0x14
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	9c 8b       	std	Y+20, r25	; 0x14
    21a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a6:	8b 89       	ldd	r24, Y+19	; 0x13
    21a8:	9c 89       	ldd	r25, Y+20	; 0x14
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	69 f7       	brne	.-38     	; 0x2188 <main+0x1c8>
    21ae:	14 c0       	rjmp	.+40     	; 0x21d8 <main+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b0:	6d 89       	ldd	r22, Y+21	; 0x15
    21b2:	7e 89       	ldd	r23, Y+22	; 0x16
    21b4:	8f 89       	ldd	r24, Y+23	; 0x17
    21b6:	98 8d       	ldd	r25, Y+24	; 0x18
    21b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	9c 8b       	std	Y+20, r25	; 0x14
    21c2:	8b 8b       	std	Y+19, r24	; 0x13
    21c4:	8b 89       	ldd	r24, Y+19	; 0x13
    21c6:	9c 89       	ldd	r25, Y+20	; 0x14
    21c8:	98 8b       	std	Y+16, r25	; 0x10
    21ca:	8f 87       	std	Y+15, r24	; 0x0f
    21cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ce:	98 89       	ldd	r25, Y+16	; 0x10
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	f1 f7       	brne	.-4      	; 0x21d0 <main+0x210>
    21d4:	98 8b       	std	Y+16, r25	; 0x10
    21d6:	8f 87       	std	Y+15, r24	; 0x0f
				 */
				_delay_ms(DEBOUNCE_TIME);
				/*
				 * Ask again to make sure it is a real push on the button
				 */
				if( BIT_IS_CLEAR(UP_BUTTON_INPUT_REG, UP_BUTTON_PIN) )
    21d8:	e9 e3       	ldi	r30, 0x39	; 57
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	88 2f       	mov	r24, r24
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	81 70       	andi	r24, 0x01	; 1
    21e4:	90 70       	andi	r25, 0x00	; 0
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	59 f4       	brne	.+22     	; 0x2200 <main+0x240>
				{
					/*
					 * Ask about the SW flag of UP button to make sure it will do
					 *the functionality one time only
					 */
					if(UP_flag == TRUE)
    21ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21ec:	81 30       	cpi	r24, 0x01	; 1
    21ee:	41 f4       	brne	.+16     	; 0x2200 <main+0x240>
						/*
						 * Change the state of the UP button to prevent the program
						 * to enter this area of condition to avoid multiple of this action
						 * during continuous press
						 */
						UP_flag = FALSE;
    21f0:	1e 8e       	std	Y+30, r1	; 0x1e
						/*
						 * Call the function of UP button which responsible to
						 * increase the digit that the cursor point at
						 */
						UP_Func();
    21f2:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <UP_Func>
						/*
						 * Call the function which responsible to display the digits of the digital clock
						 */
						display();
    21f6:	0e 94 dd 07 	call	0xfba	; 0xfba <display>
    21fa:	02 c0       	rjmp	.+4      	; 0x2200 <main+0x240>
			{
				/*
				 * Change the state of the UP button to enable the program
				 * to enter the area of condition once again after releasing the button
				 */
				UP_flag = TRUE;
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	8e 8f       	std	Y+30, r24	; 0x1e
			}
			/**************************************************************************
			 *                              Down Button                               *
			 **************************************************************************/
			if( BIT_IS_CLEAR(DOWN_BUTTON_INPUT_REG, DOWN_BUTTON_PIN) )
    2200:	e9 e3       	ldi	r30, 0x39	; 57
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	88 2f       	mov	r24, r24
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	82 70       	andi	r24, 0x02	; 2
    220c:	90 70       	andi	r25, 0x00	; 0
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	09 f0       	breq	.+2      	; 0x2214 <main+0x254>
    2212:	86 c0       	rjmp	.+268    	; 0x2320 <main+0x360>
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	a8 ec       	ldi	r26, 0xC8	; 200
    221a:	b1 e4       	ldi	r27, 0x41	; 65
    221c:	8b 87       	std	Y+11, r24	; 0x0b
    221e:	9c 87       	std	Y+12, r25	; 0x0c
    2220:	ad 87       	std	Y+13, r26	; 0x0d
    2222:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2224:	6b 85       	ldd	r22, Y+11	; 0x0b
    2226:	7c 85       	ldd	r23, Y+12	; 0x0c
    2228:	8d 85       	ldd	r24, Y+13	; 0x0d
    222a:	9e 85       	ldd	r25, Y+14	; 0x0e
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	4a e7       	ldi	r20, 0x7A	; 122
    2232:	53 e4       	ldi	r21, 0x43	; 67
    2234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	8f 83       	std	Y+7, r24	; 0x07
    223e:	98 87       	std	Y+8, r25	; 0x08
    2240:	a9 87       	std	Y+9, r26	; 0x09
    2242:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2244:	6f 81       	ldd	r22, Y+7	; 0x07
    2246:	78 85       	ldd	r23, Y+8	; 0x08
    2248:	89 85       	ldd	r24, Y+9	; 0x09
    224a:	9a 85       	ldd	r25, Y+10	; 0x0a
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e8       	ldi	r20, 0x80	; 128
    2252:	5f e3       	ldi	r21, 0x3F	; 63
    2254:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2258:	88 23       	and	r24, r24
    225a:	2c f4       	brge	.+10     	; 0x2266 <main+0x2a6>
		__ticks = 1;
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	9e 83       	std	Y+6, r25	; 0x06
    2262:	8d 83       	std	Y+5, r24	; 0x05
    2264:	3f c0       	rjmp	.+126    	; 0x22e4 <main+0x324>
	else if (__tmp > 65535)
    2266:	6f 81       	ldd	r22, Y+7	; 0x07
    2268:	78 85       	ldd	r23, Y+8	; 0x08
    226a:	89 85       	ldd	r24, Y+9	; 0x09
    226c:	9a 85       	ldd	r25, Y+10	; 0x0a
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	3f ef       	ldi	r19, 0xFF	; 255
    2272:	4f e7       	ldi	r20, 0x7F	; 127
    2274:	57 e4       	ldi	r21, 0x47	; 71
    2276:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    227a:	18 16       	cp	r1, r24
    227c:	4c f5       	brge	.+82     	; 0x22d0 <main+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2280:	7c 85       	ldd	r23, Y+12	; 0x0c
    2282:	8d 85       	ldd	r24, Y+13	; 0x0d
    2284:	9e 85       	ldd	r25, Y+14	; 0x0e
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e2       	ldi	r20, 0x20	; 32
    228c:	51 e4       	ldi	r21, 0x41	; 65
    228e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	bc 01       	movw	r22, r24
    2298:	cd 01       	movw	r24, r26
    229a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	9e 83       	std	Y+6, r25	; 0x06
    22a4:	8d 83       	std	Y+5, r24	; 0x05
    22a6:	0f c0       	rjmp	.+30     	; 0x22c6 <main+0x306>
    22a8:	89 e1       	ldi	r24, 0x19	; 25
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	9c 83       	std	Y+4, r25	; 0x04
    22ae:	8b 83       	std	Y+3, r24	; 0x03
    22b0:	8b 81       	ldd	r24, Y+3	; 0x03
    22b2:	9c 81       	ldd	r25, Y+4	; 0x04
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	f1 f7       	brne	.-4      	; 0x22b4 <main+0x2f4>
    22b8:	9c 83       	std	Y+4, r25	; 0x04
    22ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22bc:	8d 81       	ldd	r24, Y+5	; 0x05
    22be:	9e 81       	ldd	r25, Y+6	; 0x06
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	9e 83       	std	Y+6, r25	; 0x06
    22c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c6:	8d 81       	ldd	r24, Y+5	; 0x05
    22c8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	69 f7       	brne	.-38     	; 0x22a8 <main+0x2e8>
    22ce:	14 c0       	rjmp	.+40     	; 0x22f8 <main+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d0:	6f 81       	ldd	r22, Y+7	; 0x07
    22d2:	78 85       	ldd	r23, Y+8	; 0x08
    22d4:	89 85       	ldd	r24, Y+9	; 0x09
    22d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	9e 83       	std	Y+6, r25	; 0x06
    22e2:	8d 83       	std	Y+5, r24	; 0x05
    22e4:	8d 81       	ldd	r24, Y+5	; 0x05
    22e6:	9e 81       	ldd	r25, Y+6	; 0x06
    22e8:	9a 83       	std	Y+2, r25	; 0x02
    22ea:	89 83       	std	Y+1, r24	; 0x01
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	9a 81       	ldd	r25, Y+2	; 0x02
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	f1 f7       	brne	.-4      	; 0x22f0 <main+0x330>
    22f4:	9a 83       	std	Y+2, r25	; 0x02
    22f6:	89 83       	std	Y+1, r24	; 0x01
				 */
				_delay_ms(DEBOUNCE_TIME);
				/*
				 * Ask again to make sure it is a real push on the button
				 */
				if( BIT_IS_CLEAR(DOWN_BUTTON_INPUT_REG, DOWN_BUTTON_PIN) )
    22f8:	e9 e3       	ldi	r30, 0x39	; 57
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	88 2f       	mov	r24, r24
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	82 70       	andi	r24, 0x02	; 2
    2304:	90 70       	andi	r25, 0x00	; 0
    2306:	00 97       	sbiw	r24, 0x00	; 0
    2308:	09 f0       	breq	.+2      	; 0x230c <main+0x34c>
    230a:	d3 ce       	rjmp	.-602    	; 0x20b2 <main+0xf2>
				{
					/*
					 *Ask about the SW flag of UP button to make sure it will do
					 *the functionality one time only
					 */
					if(Down_flag == TRUE)
    230c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    230e:	81 30       	cpi	r24, 0x01	; 1
    2310:	09 f0       	breq	.+2      	; 0x2314 <main+0x354>
    2312:	cf ce       	rjmp	.-610    	; 0x20b2 <main+0xf2>
						/*
						 * Change the state of the down button to prevent the program
						 * to enter this area of condition to avoid multiple of this action
						 * during continuous press
						 */
						Down_flag = FALSE;
    2314:	1d 8e       	std	Y+29, r1	; 0x1d
						/*
						 * Call the function of down button which responsible to
						 * decrease the digit that the cursor point at
						 */
						down_Func();
    2316:	0e 94 02 0a 	call	0x1404	; 0x1404 <down_Func>
						/*
						 * Call the function which responsible to display the digits of the digital clock
						 */
						display();
    231a:	0e 94 dd 07 	call	0xfba	; 0xfba <display>
    231e:	c9 ce       	rjmp	.-622    	; 0x20b2 <main+0xf2>
			{
				/*
				 * Change the state of the down button to enable the program
				 * to enter the area of condition once again after releasing the button
				 */
				Down_flag = TRUE;
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	8d 8f       	std	Y+29, r24	; 0x1d
    2324:	c6 ce       	rjmp	.-628    	; 0x20b2 <main+0xf2>

00002326 <__vector_11>:

/**************************************************************************
 *                  Timer0_Interrupt_Service_Routines                     *
 * ************************************************************************/
ISR(TIMER0_OVF_vect)
{
    2326:	1f 92       	push	r1
    2328:	0f 92       	push	r0
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	0f 92       	push	r0
    232e:	11 24       	eor	r1, r1
    2330:	2f 93       	push	r18
    2332:	3f 93       	push	r19
    2334:	4f 93       	push	r20
    2336:	5f 93       	push	r21
    2338:	6f 93       	push	r22
    233a:	7f 93       	push	r23
    233c:	8f 93       	push	r24
    233e:	9f 93       	push	r25
    2340:	af 93       	push	r26
    2342:	bf 93       	push	r27
    2344:	ef 93       	push	r30
    2346:	ff 93       	push	r31
    2348:	df 93       	push	r29
    234a:	cf 93       	push	r28
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    2350:	80 91 74 00 	lds	r24, 0x0074
    2354:	90 91 75 00 	lds	r25, 0x0075
    2358:	00 97       	sbiw	r24, 0x00	; 0
    235a:	29 f0       	breq	.+10     	; 0x2366 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer0_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    235c:	e0 91 74 00 	lds	r30, 0x0074
    2360:	f0 91 75 00 	lds	r31, 0x0075
    2364:	09 95       	icall
	}

	/* Clear the flag of timer0 over flow Interrupt*/
	TIMER0_INTERRUPT_FLAG_REGISTER = SET_BIT(TIMER0_INTERRUPT_FLAG_REGISTER, TIMER0_OVERFLOW_FLAG);
    2366:	28 e5       	ldi	r18, 0x58	; 88
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	a8 e5       	ldi	r26, 0x58	; 88
    236c:	b0 e0       	ldi	r27, 0x00	; 0
    236e:	e8 e5       	ldi	r30, 0x58	; 88
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	81 60       	ori	r24, 0x01	; 1
    2376:	8c 93       	st	X, r24
    2378:	8c 91       	ld	r24, X
    237a:	f9 01       	movw	r30, r18
    237c:	80 83       	st	Z, r24
}
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	ff 91       	pop	r31
    2384:	ef 91       	pop	r30
    2386:	bf 91       	pop	r27
    2388:	af 91       	pop	r26
    238a:	9f 91       	pop	r25
    238c:	8f 91       	pop	r24
    238e:	7f 91       	pop	r23
    2390:	6f 91       	pop	r22
    2392:	5f 91       	pop	r21
    2394:	4f 91       	pop	r20
    2396:	3f 91       	pop	r19
    2398:	2f 91       	pop	r18
    239a:	0f 90       	pop	r0
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	0f 90       	pop	r0
    23a0:	1f 90       	pop	r1
    23a2:	18 95       	reti

000023a4 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    23a4:	1f 92       	push	r1
    23a6:	0f 92       	push	r0
    23a8:	0f b6       	in	r0, 0x3f	; 63
    23aa:	0f 92       	push	r0
    23ac:	11 24       	eor	r1, r1
    23ae:	2f 93       	push	r18
    23b0:	3f 93       	push	r19
    23b2:	4f 93       	push	r20
    23b4:	5f 93       	push	r21
    23b6:	6f 93       	push	r22
    23b8:	7f 93       	push	r23
    23ba:	8f 93       	push	r24
    23bc:	9f 93       	push	r25
    23be:	af 93       	push	r26
    23c0:	bf 93       	push	r27
    23c2:	ef 93       	push	r30
    23c4:	ff 93       	push	r31
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    23ce:	80 91 74 00 	lds	r24, 0x0074
    23d2:	90 91 75 00 	lds	r25, 0x0075
    23d6:	00 97       	sbiw	r24, 0x00	; 0
    23d8:	29 f0       	breq	.+10     	; 0x23e4 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer0_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    23da:	e0 91 74 00 	lds	r30, 0x0074
    23de:	f0 91 75 00 	lds	r31, 0x0075
    23e2:	09 95       	icall
	}
	/* Clear the flag of timer0 compare Interrupt*/
	TIMER0_INTERRUPT_FLAG_REGISTER = SET_BIT(TIMER0_INTERRUPT_FLAG_REGISTER, TIMER0_COMPARE_FLAG);
    23e4:	28 e5       	ldi	r18, 0x58	; 88
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	a8 e5       	ldi	r26, 0x58	; 88
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	e8 e5       	ldi	r30, 0x58	; 88
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	82 60       	ori	r24, 0x02	; 2
    23f4:	8c 93       	st	X, r24
    23f6:	8c 91       	ld	r24, X
    23f8:	f9 01       	movw	r30, r18
    23fa:	80 83       	st	Z, r24
}
    23fc:	cf 91       	pop	r28
    23fe:	df 91       	pop	r29
    2400:	ff 91       	pop	r31
    2402:	ef 91       	pop	r30
    2404:	bf 91       	pop	r27
    2406:	af 91       	pop	r26
    2408:	9f 91       	pop	r25
    240a:	8f 91       	pop	r24
    240c:	7f 91       	pop	r23
    240e:	6f 91       	pop	r22
    2410:	5f 91       	pop	r21
    2412:	4f 91       	pop	r20
    2414:	3f 91       	pop	r19
    2416:	2f 91       	pop	r18
    2418:	0f 90       	pop	r0
    241a:	0f be       	out	0x3f, r0	; 63
    241c:	0f 90       	pop	r0
    241e:	1f 90       	pop	r1
    2420:	18 95       	reti

00002422 <__vector_9>:
/**************************************************************************
 *                  Timer1_Interrupt_Service_Routines                     *
 * ************************************************************************/
ISR(TIMER1_OVF_vect)
{
    2422:	1f 92       	push	r1
    2424:	0f 92       	push	r0
    2426:	0f b6       	in	r0, 0x3f	; 63
    2428:	0f 92       	push	r0
    242a:	11 24       	eor	r1, r1
    242c:	2f 93       	push	r18
    242e:	3f 93       	push	r19
    2430:	4f 93       	push	r20
    2432:	5f 93       	push	r21
    2434:	6f 93       	push	r22
    2436:	7f 93       	push	r23
    2438:	8f 93       	push	r24
    243a:	9f 93       	push	r25
    243c:	af 93       	push	r26
    243e:	bf 93       	push	r27
    2440:	ef 93       	push	r30
    2442:	ff 93       	push	r31
    2444:	df 93       	push	r29
    2446:	cf 93       	push	r28
    2448:	cd b7       	in	r28, 0x3d	; 61
    244a:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtr != NULL_PTR)
    244c:	80 91 76 00 	lds	r24, 0x0076
    2450:	90 91 77 00 	lds	r25, 0x0077
    2454:	00 97       	sbiw	r24, 0x00	; 0
    2456:	29 f0       	breq	.+10     	; 0x2462 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2458:	e0 91 76 00 	lds	r30, 0x0076
    245c:	f0 91 77 00 	lds	r31, 0x0077
    2460:	09 95       	icall
	}

	/* Clear the flag of timer1 over flow Interrupt*/
	TIMER1_INTERRUPT_FLAG_REGISTER = SET_BIT(TIMER1_INTERRUPT_FLAG_REGISTER, TIMER1_OVERFLOW_FLAG);
    2462:	28 e5       	ldi	r18, 0x58	; 88
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	a8 e5       	ldi	r26, 0x58	; 88
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	e8 e5       	ldi	r30, 0x58	; 88
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	84 60       	ori	r24, 0x04	; 4
    2472:	8c 93       	st	X, r24
    2474:	8c 91       	ld	r24, X
    2476:	f9 01       	movw	r30, r18
    2478:	80 83       	st	Z, r24

}
    247a:	cf 91       	pop	r28
    247c:	df 91       	pop	r29
    247e:	ff 91       	pop	r31
    2480:	ef 91       	pop	r30
    2482:	bf 91       	pop	r27
    2484:	af 91       	pop	r26
    2486:	9f 91       	pop	r25
    2488:	8f 91       	pop	r24
    248a:	7f 91       	pop	r23
    248c:	6f 91       	pop	r22
    248e:	5f 91       	pop	r21
    2490:	4f 91       	pop	r20
    2492:	3f 91       	pop	r19
    2494:	2f 91       	pop	r18
    2496:	0f 90       	pop	r0
    2498:	0f be       	out	0x3f, r0	; 63
    249a:	0f 90       	pop	r0
    249c:	1f 90       	pop	r1
    249e:	18 95       	reti

000024a0 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    24a0:	1f 92       	push	r1
    24a2:	0f 92       	push	r0
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	0f 92       	push	r0
    24a8:	11 24       	eor	r1, r1
    24aa:	2f 93       	push	r18
    24ac:	3f 93       	push	r19
    24ae:	4f 93       	push	r20
    24b0:	5f 93       	push	r21
    24b2:	6f 93       	push	r22
    24b4:	7f 93       	push	r23
    24b6:	8f 93       	push	r24
    24b8:	9f 93       	push	r25
    24ba:	af 93       	push	r26
    24bc:	bf 93       	push	r27
    24be:	ef 93       	push	r30
    24c0:	ff 93       	push	r31
    24c2:	df 93       	push	r29
    24c4:	cf 93       	push	r28
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtr != NULL_PTR)
    24ca:	80 91 76 00 	lds	r24, 0x0076
    24ce:	90 91 77 00 	lds	r25, 0x0077
    24d2:	00 97       	sbiw	r24, 0x00	; 0
    24d4:	29 f0       	breq	.+10     	; 0x24e0 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    24d6:	e0 91 76 00 	lds	r30, 0x0076
    24da:	f0 91 77 00 	lds	r31, 0x0077
    24de:	09 95       	icall
	}
	/* Clear the flag of timer1 compare Interrupt for channelA*/
	TIMER1_INTERRUPT_FLAG_REGISTER = SET_BIT(TIMER1_INTERRUPT_FLAG_REGISTER, TIMER1_OUTPUT_COMPARE_A_MATCH_FLAG);
    24e0:	28 e5       	ldi	r18, 0x58	; 88
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	a8 e5       	ldi	r26, 0x58	; 88
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	e8 e5       	ldi	r30, 0x58	; 88
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	80 61       	ori	r24, 0x10	; 16
    24f0:	8c 93       	st	X, r24
    24f2:	8c 91       	ld	r24, X
    24f4:	f9 01       	movw	r30, r18
    24f6:	80 83       	st	Z, r24
}
    24f8:	cf 91       	pop	r28
    24fa:	df 91       	pop	r29
    24fc:	ff 91       	pop	r31
    24fe:	ef 91       	pop	r30
    2500:	bf 91       	pop	r27
    2502:	af 91       	pop	r26
    2504:	9f 91       	pop	r25
    2506:	8f 91       	pop	r24
    2508:	7f 91       	pop	r23
    250a:	6f 91       	pop	r22
    250c:	5f 91       	pop	r21
    250e:	4f 91       	pop	r20
    2510:	3f 91       	pop	r19
    2512:	2f 91       	pop	r18
    2514:	0f 90       	pop	r0
    2516:	0f be       	out	0x3f, r0	; 63
    2518:	0f 90       	pop	r0
    251a:	1f 90       	pop	r1
    251c:	18 95       	reti

0000251e <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
    251e:	1f 92       	push	r1
    2520:	0f 92       	push	r0
    2522:	0f b6       	in	r0, 0x3f	; 63
    2524:	0f 92       	push	r0
    2526:	11 24       	eor	r1, r1
    2528:	2f 93       	push	r18
    252a:	3f 93       	push	r19
    252c:	4f 93       	push	r20
    252e:	5f 93       	push	r21
    2530:	6f 93       	push	r22
    2532:	7f 93       	push	r23
    2534:	8f 93       	push	r24
    2536:	9f 93       	push	r25
    2538:	af 93       	push	r26
    253a:	bf 93       	push	r27
    253c:	ef 93       	push	r30
    253e:	ff 93       	push	r31
    2540:	df 93       	push	r29
    2542:	cf 93       	push	r28
    2544:	cd b7       	in	r28, 0x3d	; 61
    2546:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtr != NULL_PTR)
    2548:	80 91 76 00 	lds	r24, 0x0076
    254c:	90 91 77 00 	lds	r25, 0x0077
    2550:	00 97       	sbiw	r24, 0x00	; 0
    2552:	29 f0       	breq	.+10     	; 0x255e <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2554:	e0 91 76 00 	lds	r30, 0x0076
    2558:	f0 91 77 00 	lds	r31, 0x0077
    255c:	09 95       	icall
	}
	/* Clear the flag of timer1 compare Interrupt for channelB*/
	TIMER1_INTERRUPT_FLAG_REGISTER = SET_BIT(TIMER1_INTERRUPT_FLAG_REGISTER, TIMER1_OUTPUT_COMPARE_B_MATCH_FLAG);
    255e:	28 e5       	ldi	r18, 0x58	; 88
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	a8 e5       	ldi	r26, 0x58	; 88
    2564:	b0 e0       	ldi	r27, 0x00	; 0
    2566:	e8 e5       	ldi	r30, 0x58	; 88
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	88 60       	ori	r24, 0x08	; 8
    256e:	8c 93       	st	X, r24
    2570:	8c 91       	ld	r24, X
    2572:	f9 01       	movw	r30, r18
    2574:	80 83       	st	Z, r24

}
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	ff 91       	pop	r31
    257c:	ef 91       	pop	r30
    257e:	bf 91       	pop	r27
    2580:	af 91       	pop	r26
    2582:	9f 91       	pop	r25
    2584:	8f 91       	pop	r24
    2586:	7f 91       	pop	r23
    2588:	6f 91       	pop	r22
    258a:	5f 91       	pop	r21
    258c:	4f 91       	pop	r20
    258e:	3f 91       	pop	r19
    2590:	2f 91       	pop	r18
    2592:	0f 90       	pop	r0
    2594:	0f be       	out	0x3f, r0	; 63
    2596:	0f 90       	pop	r0
    2598:	1f 90       	pop	r1
    259a:	18 95       	reti

0000259c <__vector_5>:

/**************************************************************************
 *                  Timer2_Interrupt_Service_Routines                     *
 * ************************************************************************/
ISR(TIMER2_OVF_vect)
{
    259c:	1f 92       	push	r1
    259e:	0f 92       	push	r0
    25a0:	0f b6       	in	r0, 0x3f	; 63
    25a2:	0f 92       	push	r0
    25a4:	11 24       	eor	r1, r1
    25a6:	2f 93       	push	r18
    25a8:	3f 93       	push	r19
    25aa:	4f 93       	push	r20
    25ac:	5f 93       	push	r21
    25ae:	6f 93       	push	r22
    25b0:	7f 93       	push	r23
    25b2:	8f 93       	push	r24
    25b4:	9f 93       	push	r25
    25b6:	af 93       	push	r26
    25b8:	bf 93       	push	r27
    25ba:	ef 93       	push	r30
    25bc:	ff 93       	push	r31
    25be:	df 93       	push	r29
    25c0:	cf 93       	push	r28
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2_callBackPtr != NULL_PTR)
    25c6:	80 91 78 00 	lds	r24, 0x0078
    25ca:	90 91 79 00 	lds	r25, 0x0079
    25ce:	00 97       	sbiw	r24, 0x00	; 0
    25d0:	29 f0       	breq	.+10     	; 0x25dc <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    25d2:	e0 91 78 00 	lds	r30, 0x0078
    25d6:	f0 91 79 00 	lds	r31, 0x0079
    25da:	09 95       	icall
	}

	/* Clear the flag of timer0 over flow Interrupt*/
	TIMER2_INTERRUPT_FLAG_REGISTER = SET_BIT(TIMER2_INTERRUPT_FLAG_REGISTER, TIMER2_OVERFLOW_FLAG);
    25dc:	28 e5       	ldi	r18, 0x58	; 88
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	a8 e5       	ldi	r26, 0x58	; 88
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	e8 e5       	ldi	r30, 0x58	; 88
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	80 64       	ori	r24, 0x40	; 64
    25ec:	8c 93       	st	X, r24
    25ee:	8c 91       	ld	r24, X
    25f0:	f9 01       	movw	r30, r18
    25f2:	80 83       	st	Z, r24
}
    25f4:	cf 91       	pop	r28
    25f6:	df 91       	pop	r29
    25f8:	ff 91       	pop	r31
    25fa:	ef 91       	pop	r30
    25fc:	bf 91       	pop	r27
    25fe:	af 91       	pop	r26
    2600:	9f 91       	pop	r25
    2602:	8f 91       	pop	r24
    2604:	7f 91       	pop	r23
    2606:	6f 91       	pop	r22
    2608:	5f 91       	pop	r21
    260a:	4f 91       	pop	r20
    260c:	3f 91       	pop	r19
    260e:	2f 91       	pop	r18
    2610:	0f 90       	pop	r0
    2612:	0f be       	out	0x3f, r0	; 63
    2614:	0f 90       	pop	r0
    2616:	1f 90       	pop	r1
    2618:	18 95       	reti

0000261a <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    261a:	1f 92       	push	r1
    261c:	0f 92       	push	r0
    261e:	0f b6       	in	r0, 0x3f	; 63
    2620:	0f 92       	push	r0
    2622:	11 24       	eor	r1, r1
    2624:	2f 93       	push	r18
    2626:	3f 93       	push	r19
    2628:	4f 93       	push	r20
    262a:	5f 93       	push	r21
    262c:	6f 93       	push	r22
    262e:	7f 93       	push	r23
    2630:	8f 93       	push	r24
    2632:	9f 93       	push	r25
    2634:	af 93       	push	r26
    2636:	bf 93       	push	r27
    2638:	ef 93       	push	r30
    263a:	ff 93       	push	r31
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2_callBackPtr != NULL_PTR)
    2644:	80 91 78 00 	lds	r24, 0x0078
    2648:	90 91 79 00 	lds	r25, 0x0079
    264c:	00 97       	sbiw	r24, 0x00	; 0
    264e:	29 f0       	breq	.+10     	; 0x265a <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2650:	e0 91 78 00 	lds	r30, 0x0078
    2654:	f0 91 79 00 	lds	r31, 0x0079
    2658:	09 95       	icall
	}
	/* Clear the flag of timer0 compare Interrupt*/
	TIMER2_INTERRUPT_FLAG_REGISTER = SET_BIT(TIMER2_INTERRUPT_FLAG_REGISTER, TIMER2_COMPARE_FLAG);
    265a:	28 e5       	ldi	r18, 0x58	; 88
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	a8 e5       	ldi	r26, 0x58	; 88
    2660:	b0 e0       	ldi	r27, 0x00	; 0
    2662:	e8 e5       	ldi	r30, 0x58	; 88
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	80 81       	ld	r24, Z
    2668:	80 68       	ori	r24, 0x80	; 128
    266a:	8c 93       	st	X, r24
    266c:	8c 91       	ld	r24, X
    266e:	f9 01       	movw	r30, r18
    2670:	80 83       	st	Z, r24
}
    2672:	cf 91       	pop	r28
    2674:	df 91       	pop	r29
    2676:	ff 91       	pop	r31
    2678:	ef 91       	pop	r30
    267a:	bf 91       	pop	r27
    267c:	af 91       	pop	r26
    267e:	9f 91       	pop	r25
    2680:	8f 91       	pop	r24
    2682:	7f 91       	pop	r23
    2684:	6f 91       	pop	r22
    2686:	5f 91       	pop	r21
    2688:	4f 91       	pop	r20
    268a:	3f 91       	pop	r19
    268c:	2f 91       	pop	r18
    268e:	0f 90       	pop	r0
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	0f 90       	pop	r0
    2694:	1f 90       	pop	r1
    2696:	18 95       	reti

00002698 <Timer0_Init>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void Timer0_Init(const Timer0_ConfigType* config_PTR)
{
    2698:	df 93       	push	r29
    269a:	cf 93       	push	r28
    269c:	00 d0       	rcall	.+0      	; 0x269e <Timer0_Init+0x6>
    269e:	00 d0       	rcall	.+0      	; 0x26a0 <Timer0_Init+0x8>
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
    26a4:	9a 83       	std	Y+2, r25	; 0x02
    26a6:	89 83       	std	Y+1, r24	; 0x01
	 * Configure initial value for Timer0 to start count from it
	 * Anding with 0XFF to make sure the value won't exceed
	 * 255 as it is 8-bit Timer
	 */

	TIMER0_CONTROL_REGIRSTER = ( (config_PTR->timer0_InitialValue) ) & 0XFF;
    26a8:	a3 e5       	ldi	r26, 0x53	; 83
    26aa:	b0 e0       	ldi	r27, 0x00	; 0
    26ac:	e9 81       	ldd	r30, Y+1	; 0x01
    26ae:	fa 81       	ldd	r31, Y+2	; 0x02
    26b0:	80 81       	ld	r24, Z
    26b2:	8c 93       	st	X, r24
	 * Anding with 0XF8 to make sure the first 3-bits in TCCR0 register=0
	 * ORing with the selected timer clock to include it in the first 3-bits
	 * and keep the other bits as they are
	 */

	TIMER0_CONTROL_REGIRSTER = (TIMER0_CONTROL_REGIRSTER  & TIMER0_CLOCK_MASK_CLEAR) |
    26b4:	a3 e5       	ldi	r26, 0x53	; 83
    26b6:	b0 e0       	ldi	r27, 0x00	; 0
    26b8:	e3 e5       	ldi	r30, 0x53	; 83
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	80 81       	ld	r24, Z
    26be:	98 2f       	mov	r25, r24
    26c0:	98 7f       	andi	r25, 0xF8	; 248
    26c2:	e9 81       	ldd	r30, Y+1	; 0x01
    26c4:	fa 81       	ldd	r31, Y+2	; 0x02
    26c6:	82 81       	ldd	r24, Z+2	; 0x02
    26c8:	89 2b       	or	r24, r25
    26ca:	8c 93       	st	X, r24
			(config_PTR->timer0_clock);


	switch ( (config_PTR->timer0_mode) )
    26cc:	e9 81       	ldd	r30, Y+1	; 0x01
    26ce:	fa 81       	ldd	r31, Y+2	; 0x02
    26d0:	83 81       	ldd	r24, Z+3	; 0x03
    26d2:	28 2f       	mov	r18, r24
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	3c 83       	std	Y+4, r19	; 0x04
    26d8:	2b 83       	std	Y+3, r18	; 0x03
    26da:	8b 81       	ldd	r24, Y+3	; 0x03
    26dc:	9c 81       	ldd	r25, Y+4	; 0x04
    26de:	81 30       	cpi	r24, 0x01	; 1
    26e0:	91 05       	cpc	r25, r1
    26e2:	09 f4       	brne	.+2      	; 0x26e6 <Timer0_Init+0x4e>
    26e4:	5d c0       	rjmp	.+186    	; 0x27a0 <Timer0_Init+0x108>
    26e6:	eb 81       	ldd	r30, Y+3	; 0x03
    26e8:	fc 81       	ldd	r31, Y+4	; 0x04
    26ea:	e2 30       	cpi	r30, 0x02	; 2
    26ec:	f1 05       	cpc	r31, r1
    26ee:	34 f4       	brge	.+12     	; 0x26fc <Timer0_Init+0x64>
    26f0:	2b 81       	ldd	r18, Y+3	; 0x03
    26f2:	3c 81       	ldd	r19, Y+4	; 0x04
    26f4:	21 15       	cp	r18, r1
    26f6:	31 05       	cpc	r19, r1
    26f8:	71 f0       	breq	.+28     	; 0x2716 <Timer0_Init+0x7e>
    26fa:	32 c1       	rjmp	.+612    	; 0x2960 <Timer0_Init+0x2c8>
    26fc:	8b 81       	ldd	r24, Y+3	; 0x03
    26fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2700:	82 30       	cpi	r24, 0x02	; 2
    2702:	91 05       	cpc	r25, r1
    2704:	09 f4       	brne	.+2      	; 0x2708 <Timer0_Init+0x70>
    2706:	97 c0       	rjmp	.+302    	; 0x2836 <Timer0_Init+0x19e>
    2708:	eb 81       	ldd	r30, Y+3	; 0x03
    270a:	fc 81       	ldd	r31, Y+4	; 0x04
    270c:	e3 30       	cpi	r30, 0x03	; 3
    270e:	f1 05       	cpc	r31, r1
    2710:	09 f4       	brne	.+2      	; 0x2714 <Timer0_Init+0x7c>
    2712:	dc c0       	rjmp	.+440    	; 0x28cc <Timer0_Init+0x234>
    2714:	25 c1       	rjmp	.+586    	; 0x2960 <Timer0_Init+0x2c8>
		/*
		 * Configure wave form generation mode to work with normal mode
		 * Clear WGM00 bit in TCCR0 register
		 * Clear WGM01 bit in TCCR0 register
		 */
		TIMER0_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER , TIMER0_WAVE_FORM_GENERATION_BIT0);
    2716:	23 e5       	ldi	r18, 0x53	; 83
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	a3 e5       	ldi	r26, 0x53	; 83
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	e3 e5       	ldi	r30, 0x53	; 83
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	8f 7b       	andi	r24, 0xBF	; 191
    2726:	8c 93       	st	X, r24
    2728:	8c 91       	ld	r24, X
    272a:	f9 01       	movw	r30, r18
    272c:	80 83       	st	Z, r24
		TIMER0_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER , TIMER0_WAVE_FORM_GENERATION_BIT1);
    272e:	23 e5       	ldi	r18, 0x53	; 83
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	a3 e5       	ldi	r26, 0x53	; 83
    2734:	b0 e0       	ldi	r27, 0x00	; 0
    2736:	e3 e5       	ldi	r30, 0x53	; 83
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	80 81       	ld	r24, Z
    273c:	87 7f       	andi	r24, 0xF7	; 247
    273e:	8c 93       	st	X, r24
    2740:	8c 91       	ld	r24, X
    2742:	f9 01       	movw	r30, r18
    2744:	80 83       	st	Z, r24
		 * Configure compare output mode to work with normal port operation
		 * Decide the mode of OC0 from compare output modes with non PWM
		 * Configure COM00 bit in TCCR0 register
		 * Configure COM01 bit in TCCR0 register
		 */
		TIMER0_CONTROL_REGIRSTER = (TIMER0_CONTROL_REGIRSTER & TIMER0_COM0_MASK_CLEAR ) |
    2746:	a3 e5       	ldi	r26, 0x53	; 83
    2748:	b0 e0       	ldi	r27, 0x00	; 0
    274a:	e3 e5       	ldi	r30, 0x53	; 83
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	80 81       	ld	r24, Z
    2750:	28 2f       	mov	r18, r24
    2752:	2f 7c       	andi	r18, 0xCF	; 207
    2754:	e9 81       	ldd	r30, Y+1	; 0x01
    2756:	fa 81       	ldd	r31, Y+2	; 0x02
    2758:	84 81       	ldd	r24, Z+4	; 0x04
    275a:	88 2f       	mov	r24, r24
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	82 95       	swap	r24
    2760:	92 95       	swap	r25
    2762:	90 7f       	andi	r25, 0xF0	; 240
    2764:	98 27       	eor	r25, r24
    2766:	80 7f       	andi	r24, 0xF0	; 240
    2768:	98 27       	eor	r25, r24
    276a:	82 2b       	or	r24, r18
    276c:	8c 93       	st	X, r24
		/*
		 * Configure FOC0 bit in the TCCR0 register to be active
		 * As Timer0 is non-PWM
		 * Make FOC0 to be Active as it is overflow mode
		 */
		TIMER0_CONTROL_REGIRSTER = SET_BIT(TIMER0_CONTROL_REGIRSTER,TIMER0_FORCE_OUTPUT_COMPARE_BIT);
    276e:	23 e5       	ldi	r18, 0x53	; 83
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	a3 e5       	ldi	r26, 0x53	; 83
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	e3 e5       	ldi	r30, 0x53	; 83
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 81       	ld	r24, Z
    277c:	80 68       	ori	r24, 0x80	; 128
    277e:	8c 93       	st	X, r24
    2780:	8c 91       	ld	r24, X
    2782:	f9 01       	movw	r30, r18
    2784:	80 83       	st	Z, r24
		 * Enable Timer0 overflow interrupt
		 * wait for: -Enable I-bit "mask bit" in the SREG register
		 *           -TOV0 bit in the TIFR register to be set
		 * Timer0 overflow mode is ready to work after that
		 */
		TIMER0_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER0_INTERRUPT_MASK_REGISTER, TIMER0_OUTPUT_OVERFLOW_INTERRUPT);
    2786:	29 e5       	ldi	r18, 0x59	; 89
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	a9 e5       	ldi	r26, 0x59	; 89
    278c:	b0 e0       	ldi	r27, 0x00	; 0
    278e:	e9 e5       	ldi	r30, 0x59	; 89
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	80 81       	ld	r24, Z
    2794:	81 60       	ori	r24, 0x01	; 1
    2796:	8c 93       	st	X, r24
    2798:	8c 91       	ld	r24, X
    279a:	f9 01       	movw	r30, r18
    279c:	80 83       	st	Z, r24
    279e:	e0 c0       	rjmp	.+448    	; 0x2960 <Timer0_Init+0x2c8>
		/*
		 * Configure OC0 as Output PIN
		 * the pin where the PWM signal is generated from MC
		 */

		OC0_DIRECTION_PORT = SET_BIT(OC0_DIRECTION_PORT, OC0_PIN);
    27a0:	27 e3       	ldi	r18, 0x37	; 55
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	a7 e3       	ldi	r26, 0x37	; 55
    27a6:	b0 e0       	ldi	r27, 0x00	; 0
    27a8:	e7 e3       	ldi	r30, 0x37	; 55
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	80 81       	ld	r24, Z
    27ae:	88 60       	ori	r24, 0x08	; 8
    27b0:	8c 93       	st	X, r24
    27b2:	8c 91       	ld	r24, X
    27b4:	f9 01       	movw	r30, r18
    27b6:	80 83       	st	Z, r24

		/*
		 *Clear force output compare bit in Timer/Counter control register
		 *to work with pulse width modulation
		 */
		TIMER0_CONTROL_REGIRSTER = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_FORCE_OUTPUT_COMPARE_BIT);
    27b8:	23 e5       	ldi	r18, 0x53	; 83
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	a3 e5       	ldi	r26, 0x53	; 83
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	e3 e5       	ldi	r30, 0x53	; 83
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	8f 77       	andi	r24, 0x7F	; 127
    27c8:	8c 93       	st	X, r24
    27ca:	8c 91       	ld	r24, X
    27cc:	f9 01       	movw	r30, r18
    27ce:	80 83       	st	Z, r24
		/*
		 * Configure wave form generation mode to work with normal mode
		 * SET WGM00 bit in TCCR0 register
		 * Clear WGM01 bit in TCCR0 register
		 */
		TIMER0_CONTROL_REGIRSTER = SET_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_WAVE_FORM_GENERATION_BIT0);
    27d0:	23 e5       	ldi	r18, 0x53	; 83
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	a3 e5       	ldi	r26, 0x53	; 83
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	e3 e5       	ldi	r30, 0x53	; 83
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	80 64       	ori	r24, 0x40	; 64
    27e0:	8c 93       	st	X, r24
    27e2:	8c 91       	ld	r24, X
    27e4:	f9 01       	movw	r30, r18
    27e6:	80 83       	st	Z, r24
		TIMER0_CONTROL_REGIRSTER = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_WAVE_FORM_GENERATION_BIT1);
    27e8:	23 e5       	ldi	r18, 0x53	; 83
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	a3 e5       	ldi	r26, 0x53	; 83
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	e3 e5       	ldi	r30, 0x53	; 83
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	87 7f       	andi	r24, 0xF7	; 247
    27f8:	8c 93       	st	X, r24
    27fa:	8c 91       	ld	r24, X
    27fc:	f9 01       	movw	r30, r18
    27fe:	80 83       	st	Z, r24
		 * Configure compare output mode to work with normal port operation
		 * Decide the mode of OC0 from compare output modes with PWM_PhaseCorrect
		 * Configure COM00 bit in TCCR0 register
		 * Configure COM01 bit in TCCR0 register
		 */
		TIMER0_CONTROL_REGIRSTER = (TIMER0_CONTROL_REGIRSTER & TIMER0_COM0_MASK_CLEAR ) |
    2800:	a3 e5       	ldi	r26, 0x53	; 83
    2802:	b0 e0       	ldi	r27, 0x00	; 0
    2804:	e3 e5       	ldi	r30, 0x53	; 83
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	80 81       	ld	r24, Z
    280a:	28 2f       	mov	r18, r24
    280c:	2f 7c       	andi	r18, 0xCF	; 207
    280e:	e9 81       	ldd	r30, Y+1	; 0x01
    2810:	fa 81       	ldd	r31, Y+2	; 0x02
    2812:	86 81       	ldd	r24, Z+6	; 0x06
    2814:	88 2f       	mov	r24, r24
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	82 95       	swap	r24
    281a:	92 95       	swap	r25
    281c:	90 7f       	andi	r25, 0xF0	; 240
    281e:	98 27       	eor	r25, r24
    2820:	80 7f       	andi	r24, 0xF0	; 240
    2822:	98 27       	eor	r25, r24
    2824:	82 2b       	or	r24, r18
    2826:	8c 93       	st	X, r24
		/*
		 * Configure Compare match value for Timer0 to start count till reach it
		 * Anding with 0XFF to make sure the value won't exceed
		 * 255 as it is 8-bit Timer
		 */
		TIMER0_OUTPUT_COMPARE_REGISTER = ((config_PTR->timer0_compare_MatchValue)) & 0XFF;
    2828:	ac e5       	ldi	r26, 0x5C	; 92
    282a:	b0 e0       	ldi	r27, 0x00	; 0
    282c:	e9 81       	ldd	r30, Y+1	; 0x01
    282e:	fa 81       	ldd	r31, Y+2	; 0x02
    2830:	81 81       	ldd	r24, Z+1	; 0x01
    2832:	8c 93       	st	X, r24
    2834:	95 c0       	rjmp	.+298    	; 0x2960 <Timer0_Init+0x2c8>
		/*
		 * Configure wave form generation mode to work with CTC mode
		 * Clear WGM00 bit in TCCR0 register
		 * Clear WGM01 bit in TCCR0 register
		 */
		TIMER0_CONTROL_REGIRSTER = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_WAVE_FORM_GENERATION_BIT0);
    2836:	23 e5       	ldi	r18, 0x53	; 83
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	a3 e5       	ldi	r26, 0x53	; 83
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	e3 e5       	ldi	r30, 0x53	; 83
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	80 81       	ld	r24, Z
    2844:	8f 7b       	andi	r24, 0xBF	; 191
    2846:	8c 93       	st	X, r24
    2848:	8c 91       	ld	r24, X
    284a:	f9 01       	movw	r30, r18
    284c:	80 83       	st	Z, r24
		TIMER0_CONTROL_REGIRSTER = SET_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_WAVE_FORM_GENERATION_BIT1);
    284e:	23 e5       	ldi	r18, 0x53	; 83
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	a3 e5       	ldi	r26, 0x53	; 83
    2854:	b0 e0       	ldi	r27, 0x00	; 0
    2856:	e3 e5       	ldi	r30, 0x53	; 83
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	80 81       	ld	r24, Z
    285c:	88 60       	ori	r24, 0x08	; 8
    285e:	8c 93       	st	X, r24
    2860:	8c 91       	ld	r24, X
    2862:	f9 01       	movw	r30, r18
    2864:	80 83       	st	Z, r24
		 * Configure compare output mode to work with normal port operation
		 * Decide the mode of OC0 from compare output modes with non PWM
		 * Configure COM00 bit in TCCR0 register
		 * Configure COM01 bit in TCCR0 register
		 */
		TIMER0_CONTROL_REGIRSTER = (TIMER0_CONTROL_REGIRSTER & TIMER0_COM0_MASK_CLEAR ) |
    2866:	a3 e5       	ldi	r26, 0x53	; 83
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	e3 e5       	ldi	r30, 0x53	; 83
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	80 81       	ld	r24, Z
    2870:	28 2f       	mov	r18, r24
    2872:	2f 7c       	andi	r18, 0xCF	; 207
    2874:	e9 81       	ldd	r30, Y+1	; 0x01
    2876:	fa 81       	ldd	r31, Y+2	; 0x02
    2878:	84 81       	ldd	r24, Z+4	; 0x04
    287a:	88 2f       	mov	r24, r24
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	82 95       	swap	r24
    2880:	92 95       	swap	r25
    2882:	90 7f       	andi	r25, 0xF0	; 240
    2884:	98 27       	eor	r25, r24
    2886:	80 7f       	andi	r24, 0xF0	; 240
    2888:	98 27       	eor	r25, r24
    288a:	82 2b       	or	r24, r18
    288c:	8c 93       	st	X, r24
		/*
		 * Configure FOC0 bit in the TCCR0 register to be active
		 * As Timer0 is non-PWM
		 * Make FOC0 to be Active as it is compare mode
		 */
		TIMER0_CONTROL_REGIRSTER = SET_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_FORCE_OUTPUT_COMPARE_BIT);
    288e:	23 e5       	ldi	r18, 0x53	; 83
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	a3 e5       	ldi	r26, 0x53	; 83
    2894:	b0 e0       	ldi	r27, 0x00	; 0
    2896:	e3 e5       	ldi	r30, 0x53	; 83
    2898:	f0 e0       	ldi	r31, 0x00	; 0
    289a:	80 81       	ld	r24, Z
    289c:	80 68       	ori	r24, 0x80	; 128
    289e:	8c 93       	st	X, r24
    28a0:	8c 91       	ld	r24, X
    28a2:	f9 01       	movw	r30, r18
    28a4:	80 83       	st	Z, r24
		/*
		 * Configure Compare match value for Timer0 to start count from it
		 * Anding with 0XFF to make sure the value won't exceed
		 * 255 as it is 8-bit Timer
		 */
		TIMER0_OUTPUT_COMPARE_REGISTER = ((config_PTR->timer0_compare_MatchValue)) & 0XFF;
    28a6:	ac e5       	ldi	r26, 0x5C	; 92
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	e9 81       	ldd	r30, Y+1	; 0x01
    28ac:	fa 81       	ldd	r31, Y+2	; 0x02
    28ae:	81 81       	ldd	r24, Z+1	; 0x01
    28b0:	8c 93       	st	X, r24
		 * Enable Timer0 compare match interrupt
		 * wait for: -Enable I-bit "mask bit" in the SREG register
		 *           -OCF0 bit in the TIFR register to be set
		 * Timer0 compare match mode is ready to work after that
		 */
		TIMER0_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER0_INTERRUPT_MASK_REGISTER, TIMER0_OUTPUT_COMPARE_MATCH_INTERRUPT);
    28b2:	29 e5       	ldi	r18, 0x59	; 89
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	a9 e5       	ldi	r26, 0x59	; 89
    28b8:	b0 e0       	ldi	r27, 0x00	; 0
    28ba:	e9 e5       	ldi	r30, 0x59	; 89
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	80 81       	ld	r24, Z
    28c0:	82 60       	ori	r24, 0x02	; 2
    28c2:	8c 93       	st	X, r24
    28c4:	8c 91       	ld	r24, X
    28c6:	f9 01       	movw	r30, r18
    28c8:	80 83       	st	Z, r24
    28ca:	4a c0       	rjmp	.+148    	; 0x2960 <Timer0_Init+0x2c8>
		/*
		 * Configure OC0 as Output PIN
		 * the pin where the PWM signal is generated from MC
		 */

		OC0_DIRECTION_PORT = SET_BIT(OC0_DIRECTION_PORT, OC0_PIN);
    28cc:	27 e3       	ldi	r18, 0x37	; 55
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	a7 e3       	ldi	r26, 0x37	; 55
    28d2:	b0 e0       	ldi	r27, 0x00	; 0
    28d4:	e7 e3       	ldi	r30, 0x37	; 55
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	80 81       	ld	r24, Z
    28da:	88 60       	ori	r24, 0x08	; 8
    28dc:	8c 93       	st	X, r24
    28de:	8c 91       	ld	r24, X
    28e0:	f9 01       	movw	r30, r18
    28e2:	80 83       	st	Z, r24

		/*
		 *Clear force output compare bit in Timer/Counter control register
		 *to work with pulse width modulation
		 */
		TIMER0_CONTROL_REGIRSTER = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_FORCE_OUTPUT_COMPARE_BIT);
    28e4:	23 e5       	ldi	r18, 0x53	; 83
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	a3 e5       	ldi	r26, 0x53	; 83
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	e3 e5       	ldi	r30, 0x53	; 83
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	80 81       	ld	r24, Z
    28f2:	8f 77       	andi	r24, 0x7F	; 127
    28f4:	8c 93       	st	X, r24
    28f6:	8c 91       	ld	r24, X
    28f8:	f9 01       	movw	r30, r18
    28fa:	80 83       	st	Z, r24
		/*
		 * Configure wave form generation mode to work with FAST PWM mode
		 * SET WGM00 bit in TCCR0 register
		 * SET WGM01 bit in TCCR0 register
		 */
		TIMER0_CONTROL_REGIRSTER = SET_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_WAVE_FORM_GENERATION_BIT0);
    28fc:	23 e5       	ldi	r18, 0x53	; 83
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	a3 e5       	ldi	r26, 0x53	; 83
    2902:	b0 e0       	ldi	r27, 0x00	; 0
    2904:	e3 e5       	ldi	r30, 0x53	; 83
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
    290a:	80 64       	ori	r24, 0x40	; 64
    290c:	8c 93       	st	X, r24
    290e:	8c 91       	ld	r24, X
    2910:	f9 01       	movw	r30, r18
    2912:	80 83       	st	Z, r24
		TIMER0_CONTROL_REGIRSTER = SET_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_WAVE_FORM_GENERATION_BIT1);
    2914:	23 e5       	ldi	r18, 0x53	; 83
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	a3 e5       	ldi	r26, 0x53	; 83
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	e3 e5       	ldi	r30, 0x53	; 83
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	88 60       	ori	r24, 0x08	; 8
    2924:	8c 93       	st	X, r24
    2926:	8c 91       	ld	r24, X
    2928:	f9 01       	movw	r30, r18
    292a:	80 83       	st	Z, r24
		 * Configure compare output mode to work with normal port operation
		 * Decide the mode of OC0 from compare output modes with Fast PWM
		 * Configure COM00 bit in TCCR0 register
		 * Configure COM01 bit in TCCR0 register
		 */
		TIMER0_CONTROL_REGIRSTER = (TIMER0_CONTROL_REGIRSTER & TIMER0_COM0_MASK_CLEAR ) |
    292c:	a3 e5       	ldi	r26, 0x53	; 83
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	e3 e5       	ldi	r30, 0x53	; 83
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	80 81       	ld	r24, Z
    2936:	28 2f       	mov	r18, r24
    2938:	2f 7c       	andi	r18, 0xCF	; 207
    293a:	e9 81       	ldd	r30, Y+1	; 0x01
    293c:	fa 81       	ldd	r31, Y+2	; 0x02
    293e:	85 81       	ldd	r24, Z+5	; 0x05
    2940:	88 2f       	mov	r24, r24
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	82 95       	swap	r24
    2946:	92 95       	swap	r25
    2948:	90 7f       	andi	r25, 0xF0	; 240
    294a:	98 27       	eor	r25, r24
    294c:	80 7f       	andi	r24, 0xF0	; 240
    294e:	98 27       	eor	r25, r24
    2950:	82 2b       	or	r24, r18
    2952:	8c 93       	st	X, r24
		/*
		 * Configure Compare match value for Timer0 to start count till reach it
		 * Anding with 0XFF to make sure the value won't exceed
		 * 255 as it is 8-bit Timer
		 */
		TIMER0_OUTPUT_COMPARE_REGISTER = ((config_PTR->timer0_compare_MatchValue)) & 0XFF;
    2954:	ac e5       	ldi	r26, 0x5C	; 92
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	e9 81       	ldd	r30, Y+1	; 0x01
    295a:	fa 81       	ldd	r31, Y+2	; 0x02
    295c:	81 81       	ldd	r24, Z+1	; 0x01
    295e:	8c 93       	st	X, r24

		break;/*End of Fast PWM*/
	}/*End of switch case for timer0_mode*/

}/*End of Timer0_Init*/
    2960:	0f 90       	pop	r0
    2962:	0f 90       	pop	r0
    2964:	0f 90       	pop	r0
    2966:	0f 90       	pop	r0
    2968:	cf 91       	pop	r28
    296a:	df 91       	pop	r29
    296c:	08 95       	ret

0000296e <Timer0_setCallBack>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void Timer0_setCallBack( void(*a_ptr)(void) )
{
    296e:	df 93       	push	r29
    2970:	cf 93       	push	r28
    2972:	00 d0       	rcall	.+0      	; 0x2974 <Timer0_setCallBack+0x6>
    2974:	cd b7       	in	r28, 0x3d	; 61
    2976:	de b7       	in	r29, 0x3e	; 62
    2978:	9a 83       	std	Y+2, r25	; 0x02
    297a:	89 83       	std	Y+1, r24	; 0x01
	g_Timer0_callBackPtr = a_ptr;
    297c:	89 81       	ldd	r24, Y+1	; 0x01
    297e:	9a 81       	ldd	r25, Y+2	; 0x02
    2980:	90 93 75 00 	sts	0x0075, r25
    2984:	80 93 74 00 	sts	0x0074, r24
}
    2988:	0f 90       	pop	r0
    298a:	0f 90       	pop	r0
    298c:	cf 91       	pop	r28
    298e:	df 91       	pop	r29
    2990:	08 95       	ret

00002992 <Timer0_DeInit>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void Timer0_DeInit(void)
{
    2992:	df 93       	push	r29
    2994:	cf 93       	push	r28
    2996:	00 d0       	rcall	.+0      	; 0x2998 <Timer0_DeInit+0x6>
    2998:	00 d0       	rcall	.+0      	; 0x299a <Timer0_DeInit+0x8>
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62

	/*Clear all register in Timer0*/
	TIMER0_CONTROL_REGIRSTER        &= 0X00;
    299e:	e3 e5       	ldi	r30, 0x53	; 83
    29a0:	f0 e0       	ldi	r31, 0x00	; 0
    29a2:	80 81       	ld	r24, Z
    29a4:	e3 e5       	ldi	r30, 0x53	; 83
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	10 82       	st	Z, r1
	TIMER0_INITIAL_VALUE_REGISTER   &= 0X00;
    29aa:	e2 e5       	ldi	r30, 0x52	; 82
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	80 81       	ld	r24, Z
    29b0:	e2 e5       	ldi	r30, 0x52	; 82
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	10 82       	st	Z, r1
	TIMER0_OUTPUT_COMPARE_REGISTER  &= 0X00;
    29b6:	ec e5       	ldi	r30, 0x5C	; 92
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	80 81       	ld	r24, Z
    29bc:	ec e5       	ldi	r30, 0x5C	; 92
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	10 82       	st	Z, r1
	TIMER0_INTERRUPT_MASK_REGISTER  &= 0X00;
    29c2:	e9 e5       	ldi	r30, 0x59	; 89
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	80 81       	ld	r24, Z
    29c8:	e9 e5       	ldi	r30, 0x59	; 89
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	10 82       	st	Z, r1

}/*End of Timer0_DEInit*/
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	0f 90       	pop	r0
    29d6:	cf 91       	pop	r28
    29d8:	df 91       	pop	r29
    29da:	08 95       	ret

000029dc <Timer0_Stop>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void Timer0_Stop(void)
{
    29dc:	df 93       	push	r29
    29de:	cf 93       	push	r28
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the first 3-bits in TCCR0 register
	 * stop the clock of the timer
	 * timer0 will stop incrementing
	 */
	TIMER0_CONTROL_REGIRSTER = (TIMER0_CONTROL_REGIRSTER  & TIMER0_CLOCK_MASK_CLEAR);
    29e4:	a3 e5       	ldi	r26, 0x53	; 83
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	e3 e5       	ldi	r30, 0x53	; 83
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 81       	ld	r24, Z
    29ee:	88 7f       	andi	r24, 0xF8	; 248
    29f0:	8c 93       	st	X, r24
}
    29f2:	cf 91       	pop	r28
    29f4:	df 91       	pop	r29
    29f6:	08 95       	ret

000029f8 <Timer0_Start>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void Timer0_Start(Timer_Clock timer0_clock_value)
{
    29f8:	df 93       	push	r29
    29fa:	cf 93       	push	r28
    29fc:	0f 92       	push	r0
    29fe:	cd b7       	in	r28, 0x3d	; 61
    2a00:	de b7       	in	r29, 0x3e	; 62
    2a02:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Clear the first 3-bits in TCCR0 register
	 * stop the clock of the timer
	 * timer0 will stop incrementing
	 */
	TIMER0_CONTROL_REGIRSTER = (TIMER0_CONTROL_REGIRSTER  & TIMER0_CLOCK_MASK_CLEAR) | timer0_clock_value ;
    2a04:	a3 e5       	ldi	r26, 0x53	; 83
    2a06:	b0 e0       	ldi	r27, 0x00	; 0
    2a08:	e3 e5       	ldi	r30, 0x53	; 83
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	80 81       	ld	r24, Z
    2a0e:	98 2f       	mov	r25, r24
    2a10:	98 7f       	andi	r25, 0xF8	; 248
    2a12:	89 81       	ldd	r24, Y+1	; 0x01
    2a14:	89 2b       	or	r24, r25
    2a16:	8c 93       	st	X, r24
}
    2a18:	0f 90       	pop	r0
    2a1a:	cf 91       	pop	r28
    2a1c:	df 91       	pop	r29
    2a1e:	08 95       	ret

00002a20 <Timer0_Change_CompareMatchValue>:
 * [Out]            NONE
 *
 * [Returns]:       NONE
 ***************************************************************************************************/
void Timer0_Change_CompareMatchValue(uint8 timer0_newCompareValue)
{
    2a20:	df 93       	push	r29
    2a22:	cf 93       	push	r28
    2a24:	00 d0       	rcall	.+0      	; 0x2a26 <Timer0_Change_CompareMatchValue+0x6>
    2a26:	cd b7       	in	r28, 0x3d	; 61
    2a28:	de b7       	in	r29, 0x3e	; 62
    2a2a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Clear Output Compare Match register for Timer0
	 * then put the new compare value in it, Anding with 0XFF to make
	 * sure the value won't exceed 255 as it is 8-bit Timer
	 */
	TIMER0_OUTPUT_COMPARE_REGISTER = (TIMER0_OUTPUT_COMPARE_REGISTER & 0X00) |
    2a2c:	ec e5       	ldi	r30, 0x5C	; 92
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	80 81       	ld	r24, Z
    2a32:	ec e5       	ldi	r30, 0x5C	; 92
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	89 81       	ldd	r24, Y+1	; 0x01
    2a38:	80 83       	st	Z, r24
			(timer0_newCompareValue & 0XFF);
}
    2a3a:	0f 90       	pop	r0
    2a3c:	0f 90       	pop	r0
    2a3e:	cf 91       	pop	r28
    2a40:	df 91       	pop	r29
    2a42:	08 95       	ret

00002a44 <Timer1_Init>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void Timer1_Init(const Timer1_ConfigType* Timer1_config_PTR)
{
    2a44:	df 93       	push	r29
    2a46:	cf 93       	push	r28
    2a48:	cd b7       	in	r28, 0x3d	; 61
    2a4a:	de b7       	in	r29, 0x3e	; 62
    2a4c:	a2 97       	sbiw	r28, 0x22	; 34
    2a4e:	0f b6       	in	r0, 0x3f	; 63
    2a50:	f8 94       	cli
    2a52:	de bf       	out	0x3e, r29	; 62
    2a54:	0f be       	out	0x3f, r0	; 63
    2a56:	cd bf       	out	0x3d, r28	; 61
    2a58:	9a 83       	std	Y+2, r25	; 0x02
    2a5a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Configure initial value for Timer1 to start count from it
	 * Anding with 0XFFFF to make sure the value won't exceed
	 *  0XFFFF as it is 16-bit Timer
	 */
	TIMER1_INITIAL_VALUE_REGISTER = ( (Timer1_config_PTR->timer1_InitialValue) ) & 0XFFFF;
    2a5c:	ac e4       	ldi	r26, 0x4C	; 76
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	e9 81       	ldd	r30, Y+1	; 0x01
    2a62:	fa 81       	ldd	r31, Y+2	; 0x02
    2a64:	80 81       	ld	r24, Z
    2a66:	91 81       	ldd	r25, Z+1	; 0x01
    2a68:	11 96       	adiw	r26, 0x01	; 1
    2a6a:	9c 93       	st	X, r25
    2a6c:	8e 93       	st	-X, r24
	 * Configure Clock Pre-scaler value for Timer0 in TCCR1B Register
	 * Anding with 0XF8 to make sure the first 3-bits in TCCR1B register=0
	 * ORing with the selected timer clock to include it in the first 3-bits
	 * and keep the other bits as they are
	 */
	TIMER1_CONTROL_REGIRSTER_B =  (TIMER1_CONTROL_REGIRSTER_B & TIMER1_CLOCK_MASK_CLEAR) |
    2a6e:	ae e4       	ldi	r26, 0x4E	; 78
    2a70:	b0 e0       	ldi	r27, 0x00	; 0
    2a72:	ee e4       	ldi	r30, 0x4E	; 78
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	80 81       	ld	r24, Z
    2a78:	91 81       	ldd	r25, Z+1	; 0x01
    2a7a:	9c 01       	movw	r18, r24
    2a7c:	28 7f       	andi	r18, 0xF8	; 248
    2a7e:	30 70       	andi	r19, 0x00	; 0
    2a80:	e9 81       	ldd	r30, Y+1	; 0x01
    2a82:	fa 81       	ldd	r31, Y+2	; 0x02
    2a84:	86 81       	ldd	r24, Z+6	; 0x06
    2a86:	88 2f       	mov	r24, r24
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	82 2b       	or	r24, r18
    2a8c:	93 2b       	or	r25, r19
    2a8e:	11 96       	adiw	r26, 0x01	; 1
    2a90:	9c 93       	st	X, r25
    2a92:	8e 93       	st	-X, r24
			(Timer1_config_PTR->timer1_clock);

	switch ( (Timer1_config_PTR->timer1_mode) )
    2a94:	e9 81       	ldd	r30, Y+1	; 0x01
    2a96:	fa 81       	ldd	r31, Y+2	; 0x02
    2a98:	87 81       	ldd	r24, Z+7	; 0x07
    2a9a:	28 2f       	mov	r18, r24
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	3a a3       	std	Y+34, r19	; 0x22
    2aa0:	29 a3       	std	Y+33, r18	; 0x21
    2aa2:	89 a1       	ldd	r24, Y+33	; 0x21
    2aa4:	9a a1       	ldd	r25, Y+34	; 0x22
    2aa6:	87 30       	cpi	r24, 0x07	; 7
    2aa8:	91 05       	cpc	r25, r1
    2aaa:	09 f4       	brne	.+2      	; 0x2aae <Timer1_Init+0x6a>
    2aac:	8e c6       	rjmp	.+3356   	; 0x37ca <Timer1_Init+0xd86>
    2aae:	e9 a1       	ldd	r30, Y+33	; 0x21
    2ab0:	fa a1       	ldd	r31, Y+34	; 0x22
    2ab2:	e8 30       	cpi	r30, 0x08	; 8
    2ab4:	f1 05       	cpc	r31, r1
    2ab6:	5c f5       	brge	.+86     	; 0x2b0e <Timer1_Init+0xca>
    2ab8:	29 a1       	ldd	r18, Y+33	; 0x21
    2aba:	3a a1       	ldd	r19, Y+34	; 0x22
    2abc:	23 30       	cpi	r18, 0x03	; 3
    2abe:	31 05       	cpc	r19, r1
    2ac0:	09 f4       	brne	.+2      	; 0x2ac4 <Timer1_Init+0x80>
    2ac2:	e9 c2       	rjmp	.+1490   	; 0x3096 <Timer1_Init+0x652>
    2ac4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ac6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ac8:	84 30       	cpi	r24, 0x04	; 4
    2aca:	91 05       	cpc	r25, r1
    2acc:	9c f4       	brge	.+38     	; 0x2af4 <Timer1_Init+0xb0>
    2ace:	e9 a1       	ldd	r30, Y+33	; 0x21
    2ad0:	fa a1       	ldd	r31, Y+34	; 0x22
    2ad2:	e1 30       	cpi	r30, 0x01	; 1
    2ad4:	f1 05       	cpc	r31, r1
    2ad6:	09 f4       	brne	.+2      	; 0x2ada <Timer1_Init+0x96>
    2ad8:	10 c1       	rjmp	.+544    	; 0x2cfa <Timer1_Init+0x2b6>
    2ada:	29 a1       	ldd	r18, Y+33	; 0x21
    2adc:	3a a1       	ldd	r19, Y+34	; 0x22
    2ade:	22 30       	cpi	r18, 0x02	; 2
    2ae0:	31 05       	cpc	r19, r1
    2ae2:	0c f0       	brlt	.+2      	; 0x2ae6 <Timer1_Init+0xa2>
    2ae4:	f1 c1       	rjmp	.+994    	; 0x2ec8 <Timer1_Init+0x484>
    2ae6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ae8:	9a a1       	ldd	r25, Y+34	; 0x22
    2aea:	00 97       	sbiw	r24, 0x00	; 0
    2aec:	09 f4       	brne	.+2      	; 0x2af0 <Timer1_Init+0xac>
    2aee:	48 c0       	rjmp	.+144    	; 0x2b80 <Timer1_Init+0x13c>
    2af0:	0c 94 24 23 	jmp	0x4648	; 0x4648 <Timer1_Init+0x1c04>
    2af4:	e9 a1       	ldd	r30, Y+33	; 0x21
    2af6:	fa a1       	ldd	r31, Y+34	; 0x22
    2af8:	e5 30       	cpi	r30, 0x05	; 5
    2afa:	f1 05       	cpc	r31, r1
    2afc:	09 f4       	brne	.+2      	; 0x2b00 <Timer1_Init+0xbc>
    2afe:	99 c4       	rjmp	.+2354   	; 0x3432 <Timer1_Init+0x9ee>
    2b00:	29 a1       	ldd	r18, Y+33	; 0x21
    2b02:	3a a1       	ldd	r19, Y+34	; 0x22
    2b04:	26 30       	cpi	r18, 0x06	; 6
    2b06:	31 05       	cpc	r19, r1
    2b08:	0c f0       	brlt	.+2      	; 0x2b0c <Timer1_Init+0xc8>
    2b0a:	7a c5       	rjmp	.+2804   	; 0x3600 <Timer1_Init+0xbbc>
    2b0c:	ab c3       	rjmp	.+1878   	; 0x3264 <Timer1_Init+0x820>
    2b0e:	89 a1       	ldd	r24, Y+33	; 0x21
    2b10:	9a a1       	ldd	r25, Y+34	; 0x22
    2b12:	8b 30       	cpi	r24, 0x0B	; 11
    2b14:	91 05       	cpc	r25, r1
    2b16:	11 f4       	brne	.+4      	; 0x2b1c <Timer1_Init+0xd8>
    2b18:	0c 94 85 1f 	jmp	0x3f0a	; 0x3f0a <Timer1_Init+0x14c6>
    2b1c:	e9 a1       	ldd	r30, Y+33	; 0x21
    2b1e:	fa a1       	ldd	r31, Y+34	; 0x22
    2b20:	ec 30       	cpi	r30, 0x0C	; 12
    2b22:	f1 05       	cpc	r31, r1
    2b24:	7c f4       	brge	.+30     	; 0x2b44 <Timer1_Init+0x100>
    2b26:	29 a1       	ldd	r18, Y+33	; 0x21
    2b28:	3a a1       	ldd	r19, Y+34	; 0x22
    2b2a:	29 30       	cpi	r18, 0x09	; 9
    2b2c:	31 05       	cpc	r19, r1
    2b2e:	11 f4       	brne	.+4      	; 0x2b34 <Timer1_Init+0xf0>
    2b30:	0c 94 b5 1d 	jmp	0x3b6a	; 0x3b6a <Timer1_Init+0x1126>
    2b34:	89 a1       	ldd	r24, Y+33	; 0x21
    2b36:	9a a1       	ldd	r25, Y+34	; 0x22
    2b38:	8a 30       	cpi	r24, 0x0A	; 10
    2b3a:	91 05       	cpc	r25, r1
    2b3c:	14 f0       	brlt	.+4      	; 0x2b42 <Timer1_Init+0xfe>
    2b3e:	0c 94 99 1e 	jmp	0x3d32	; 0x3d32 <Timer1_Init+0x12ee>
    2b42:	27 c7       	rjmp	.+3662   	; 0x3992 <Timer1_Init+0xf4e>
    2b44:	e9 a1       	ldd	r30, Y+33	; 0x21
    2b46:	fa a1       	ldd	r31, Y+34	; 0x22
    2b48:	ed 30       	cpi	r30, 0x0D	; 13
    2b4a:	f1 05       	cpc	r31, r1
    2b4c:	11 f4       	brne	.+4      	; 0x2b52 <Timer1_Init+0x10e>
    2b4e:	0c 94 24 23 	jmp	0x4648	; 0x4648 <Timer1_Init+0x1c04>
    2b52:	29 a1       	ldd	r18, Y+33	; 0x21
    2b54:	3a a1       	ldd	r19, Y+34	; 0x22
    2b56:	2d 30       	cpi	r18, 0x0D	; 13
    2b58:	31 05       	cpc	r19, r1
    2b5a:	14 f4       	brge	.+4      	; 0x2b60 <Timer1_Init+0x11c>
    2b5c:	0c 94 69 20 	jmp	0x40d2	; 0x40d2 <Timer1_Init+0x168e>
    2b60:	89 a1       	ldd	r24, Y+33	; 0x21
    2b62:	9a a1       	ldd	r25, Y+34	; 0x22
    2b64:	8e 30       	cpi	r24, 0x0E	; 14
    2b66:	91 05       	cpc	r25, r1
    2b68:	11 f4       	brne	.+4      	; 0x2b6e <Timer1_Init+0x12a>
    2b6a:	0c 94 55 21 	jmp	0x42aa	; 0x42aa <Timer1_Init+0x1866>
    2b6e:	e9 a1       	ldd	r30, Y+33	; 0x21
    2b70:	fa a1       	ldd	r31, Y+34	; 0x22
    2b72:	ef 30       	cpi	r30, 0x0F	; 15
    2b74:	f1 05       	cpc	r31, r1
    2b76:	11 f4       	brne	.+4      	; 0x2b7c <Timer1_Init+0x138>
    2b78:	0c 94 41 22 	jmp	0x4482	; 0x4482 <Timer1_Init+0x1a3e>
    2b7c:	0c 94 24 23 	jmp	0x4648	; 0x4648 <Timer1_Init+0x1c04>
	case Normal:
		/*
		 * Configure wave form generation mode to work with normal mode
		 * Clear WGM10/WMG11 bit in TCCR1A register
		 */
		TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT10);
    2b80:	2f e4       	ldi	r18, 0x4F	; 79
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	af e4       	ldi	r26, 0x4F	; 79
    2b86:	b0 e0       	ldi	r27, 0x00	; 0
    2b88:	ef e4       	ldi	r30, 0x4F	; 79
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	80 81       	ld	r24, Z
    2b8e:	91 81       	ldd	r25, Z+1	; 0x01
    2b90:	8e 7f       	andi	r24, 0xFE	; 254
    2b92:	11 96       	adiw	r26, 0x01	; 1
    2b94:	9c 93       	st	X, r25
    2b96:	8e 93       	st	-X, r24
    2b98:	8d 91       	ld	r24, X+
    2b9a:	9c 91       	ld	r25, X
    2b9c:	f9 01       	movw	r30, r18
    2b9e:	91 83       	std	Z+1, r25	; 0x01
    2ba0:	80 83       	st	Z, r24
		TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT11);
    2ba2:	2f e4       	ldi	r18, 0x4F	; 79
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	af e4       	ldi	r26, 0x4F	; 79
    2ba8:	b0 e0       	ldi	r27, 0x00	; 0
    2baa:	ef e4       	ldi	r30, 0x4F	; 79
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
    2bb0:	91 81       	ldd	r25, Z+1	; 0x01
    2bb2:	8d 7f       	andi	r24, 0xFD	; 253
    2bb4:	11 96       	adiw	r26, 0x01	; 1
    2bb6:	9c 93       	st	X, r25
    2bb8:	8e 93       	st	-X, r24
    2bba:	8d 91       	ld	r24, X+
    2bbc:	9c 91       	ld	r25, X
    2bbe:	f9 01       	movw	r30, r18
    2bc0:	91 83       	std	Z+1, r25	; 0x01
    2bc2:	80 83       	st	Z, r24

		/*
		 * Configure wave form generation mode to work with normal mode
		 * Clear WGM12/WMG13 bit in TCCR1B register
		 */
		TIMER1_CONTROL_REGIRSTER_B =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT12);
    2bc4:	2e e4       	ldi	r18, 0x4E	; 78
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	ae e4       	ldi	r26, 0x4E	; 78
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	ee e4       	ldi	r30, 0x4E	; 78
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	80 81       	ld	r24, Z
    2bd2:	91 81       	ldd	r25, Z+1	; 0x01
    2bd4:	87 7f       	andi	r24, 0xF7	; 247
    2bd6:	11 96       	adiw	r26, 0x01	; 1
    2bd8:	9c 93       	st	X, r25
    2bda:	8e 93       	st	-X, r24
    2bdc:	8d 91       	ld	r24, X+
    2bde:	9c 91       	ld	r25, X
    2be0:	f9 01       	movw	r30, r18
    2be2:	91 83       	std	Z+1, r25	; 0x01
    2be4:	80 83       	st	Z, r24
		TIMER1_CONTROL_REGIRSTER_B =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT13);
    2be6:	2e e4       	ldi	r18, 0x4E	; 78
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	ae e4       	ldi	r26, 0x4E	; 78
    2bec:	b0 e0       	ldi	r27, 0x00	; 0
    2bee:	ee e4       	ldi	r30, 0x4E	; 78
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	80 81       	ld	r24, Z
    2bf4:	91 81       	ldd	r25, Z+1	; 0x01
    2bf6:	8f 7e       	andi	r24, 0xEF	; 239
    2bf8:	11 96       	adiw	r26, 0x01	; 1
    2bfa:	9c 93       	st	X, r25
    2bfc:	8e 93       	st	-X, r24
    2bfe:	8d 91       	ld	r24, X+
    2c00:	9c 91       	ld	r25, X
    2c02:	11 97       	sbiw	r26, 0x01	; 1
    2c04:	f9 01       	movw	r30, r18
    2c06:	91 83       	std	Z+1, r25	; 0x01
    2c08:	80 83       	st	Z, r24

		switch( (Timer1_config_PTR->channel) )
    2c0a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c0c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c0e:	80 85       	ldd	r24, Z+8	; 0x08
    2c10:	28 2f       	mov	r18, r24
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	38 a3       	std	Y+32, r19	; 0x20
    2c16:	2f 8f       	std	Y+31, r18	; 0x1f
    2c18:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c1a:	98 a1       	ldd	r25, Y+32	; 0x20
    2c1c:	00 97       	sbiw	r24, 0x00	; 0
    2c1e:	31 f0       	breq	.+12     	; 0x2c2c <Timer1_Init+0x1e8>
    2c20:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2c22:	f8 a1       	ldd	r31, Y+32	; 0x20
    2c24:	e1 30       	cpi	r30, 0x01	; 1
    2c26:	f1 05       	cpc	r31, r1
    2c28:	81 f1       	breq	.+96     	; 0x2c8a <Timer1_Init+0x246>
    2c2a:	59 c0       	rjmp	.+178    	; 0x2cde <Timer1_Init+0x29a>
			/*
			 * Configure compare output mode to work with Timer1
			 * with one mode from 4 modes in TCCR1A
			 * Configure COM1A0/COM1A1 bits in TCCR1A register
			 */
			TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1A_MASK_CLEAR) |
    2c2c:	af e4       	ldi	r26, 0x4F	; 79
    2c2e:	b0 e0       	ldi	r27, 0x00	; 0
    2c30:	ef e4       	ldi	r30, 0x4F	; 79
    2c32:	f0 e0       	ldi	r31, 0x00	; 0
    2c34:	80 81       	ld	r24, Z
    2c36:	91 81       	ldd	r25, Z+1	; 0x01
    2c38:	9c 01       	movw	r18, r24
    2c3a:	2f 73       	andi	r18, 0x3F	; 63
    2c3c:	30 70       	andi	r19, 0x00	; 0
    2c3e:	e9 81       	ldd	r30, Y+1	; 0x01
    2c40:	fa 81       	ldd	r31, Y+2	; 0x02
    2c42:	81 85       	ldd	r24, Z+9	; 0x09
    2c44:	88 2f       	mov	r24, r24
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	00 24       	eor	r0, r0
    2c4a:	96 95       	lsr	r25
    2c4c:	87 95       	ror	r24
    2c4e:	07 94       	ror	r0
    2c50:	96 95       	lsr	r25
    2c52:	87 95       	ror	r24
    2c54:	07 94       	ror	r0
    2c56:	98 2f       	mov	r25, r24
    2c58:	80 2d       	mov	r24, r0
    2c5a:	82 2b       	or	r24, r18
    2c5c:	93 2b       	or	r25, r19
    2c5e:	11 96       	adiw	r26, 0x01	; 1
    2c60:	9c 93       	st	X, r25
    2c62:	8e 93       	st	-X, r24
			/*
			 * Configure FOC1A bit in the TCCR1 register to be active
			 * As Timer1 is non-PWM
			 * Make FOC1A to be Active as it is overflow mode
			 */
			TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    2c64:	2f e4       	ldi	r18, 0x4F	; 79
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	af e4       	ldi	r26, 0x4F	; 79
    2c6a:	b0 e0       	ldi	r27, 0x00	; 0
    2c6c:	ef e4       	ldi	r30, 0x4F	; 79
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	80 81       	ld	r24, Z
    2c72:	91 81       	ldd	r25, Z+1	; 0x01
    2c74:	88 60       	ori	r24, 0x08	; 8
    2c76:	11 96       	adiw	r26, 0x01	; 1
    2c78:	9c 93       	st	X, r25
    2c7a:	8e 93       	st	-X, r24
    2c7c:	8d 91       	ld	r24, X+
    2c7e:	9c 91       	ld	r25, X
    2c80:	11 97       	sbiw	r26, 0x01	; 1
    2c82:	f9 01       	movw	r30, r18
    2c84:	91 83       	std	Z+1, r25	; 0x01
    2c86:	80 83       	st	Z, r24
    2c88:	2a c0       	rjmp	.+84     	; 0x2cde <Timer1_Init+0x29a>
			/*
			 * Configure compare output mode to work with Timer1
			 * with one mode from 4 modes in TCCR1A
			 * Configure COM1B0/COM1B1 bits in TCCR1A register
			 */
			TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1B_MASK_CLEAR) |
    2c8a:	af e4       	ldi	r26, 0x4F	; 79
    2c8c:	b0 e0       	ldi	r27, 0x00	; 0
    2c8e:	ef e4       	ldi	r30, 0x4F	; 79
    2c90:	f0 e0       	ldi	r31, 0x00	; 0
    2c92:	80 81       	ld	r24, Z
    2c94:	91 81       	ldd	r25, Z+1	; 0x01
    2c96:	9c 01       	movw	r18, r24
    2c98:	2f 7c       	andi	r18, 0xCF	; 207
    2c9a:	30 70       	andi	r19, 0x00	; 0
    2c9c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c9e:	fa 81       	ldd	r31, Y+2	; 0x02
    2ca0:	81 85       	ldd	r24, Z+9	; 0x09
    2ca2:	88 2f       	mov	r24, r24
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	82 95       	swap	r24
    2ca8:	92 95       	swap	r25
    2caa:	90 7f       	andi	r25, 0xF0	; 240
    2cac:	98 27       	eor	r25, r24
    2cae:	80 7f       	andi	r24, 0xF0	; 240
    2cb0:	98 27       	eor	r25, r24
    2cb2:	82 2b       	or	r24, r18
    2cb4:	93 2b       	or	r25, r19
    2cb6:	11 96       	adiw	r26, 0x01	; 1
    2cb8:	9c 93       	st	X, r25
    2cba:	8e 93       	st	-X, r24
			/*
			 * Configure FOC1B bit in the TCCR1 register to be active
			 * As Timer1 is non-PWM
			 * Make FOC1B to be Active as it is overflow mode
			 */
			TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    2cbc:	2f e4       	ldi	r18, 0x4F	; 79
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	af e4       	ldi	r26, 0x4F	; 79
    2cc2:	b0 e0       	ldi	r27, 0x00	; 0
    2cc4:	ef e4       	ldi	r30, 0x4F	; 79
    2cc6:	f0 e0       	ldi	r31, 0x00	; 0
    2cc8:	80 81       	ld	r24, Z
    2cca:	91 81       	ldd	r25, Z+1	; 0x01
    2ccc:	84 60       	ori	r24, 0x04	; 4
    2cce:	11 96       	adiw	r26, 0x01	; 1
    2cd0:	9c 93       	st	X, r25
    2cd2:	8e 93       	st	-X, r24
    2cd4:	8d 91       	ld	r24, X+
    2cd6:	9c 91       	ld	r25, X
    2cd8:	f9 01       	movw	r30, r18
    2cda:	91 83       	std	Z+1, r25	; 0x01
    2cdc:	80 83       	st	Z, r24
		 * Enable Timer1 overflow interrupt
		 * wait for: -Enable I-bit "mask bit" in the SREG register
		 *           -TOV1 bit in the TIFR register to be set
		 * Timer1 overflow mode is ready to work after that
		 */
		TIMER1_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER1_INTERRUPT_MASK_REGISTER,TIMER1_OUTPUT_OVERFLOW_INTERRUPT);
    2cde:	29 e5       	ldi	r18, 0x59	; 89
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	a9 e5       	ldi	r26, 0x59	; 89
    2ce4:	b0 e0       	ldi	r27, 0x00	; 0
    2ce6:	e9 e5       	ldi	r30, 0x59	; 89
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	80 81       	ld	r24, Z
    2cec:	84 60       	ori	r24, 0x04	; 4
    2cee:	8c 93       	st	X, r24
    2cf0:	8c 91       	ld	r24, X
    2cf2:	f9 01       	movw	r30, r18
    2cf4:	80 83       	st	Z, r24
    2cf6:	0c 94 24 23 	jmp	0x4648	; 0x4648 <Timer1_Init+0x1c04>
			/*
			 * Configure wave form generation mode to work with PWM_PhaseCorrect_8bit mode
			 * Set WGM10 bit in TCCR1A register
			 * Clear WGM11 bit in TCCR1A register
			 */
			TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT10);
    2cfa:	2f e4       	ldi	r18, 0x4F	; 79
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	af e4       	ldi	r26, 0x4F	; 79
    2d00:	b0 e0       	ldi	r27, 0x00	; 0
    2d02:	ef e4       	ldi	r30, 0x4F	; 79
    2d04:	f0 e0       	ldi	r31, 0x00	; 0
    2d06:	80 81       	ld	r24, Z
    2d08:	91 81       	ldd	r25, Z+1	; 0x01
    2d0a:	81 60       	ori	r24, 0x01	; 1
    2d0c:	11 96       	adiw	r26, 0x01	; 1
    2d0e:	9c 93       	st	X, r25
    2d10:	8e 93       	st	-X, r24
    2d12:	8d 91       	ld	r24, X+
    2d14:	9c 91       	ld	r25, X
    2d16:	f9 01       	movw	r30, r18
    2d18:	91 83       	std	Z+1, r25	; 0x01
    2d1a:	80 83       	st	Z, r24
			TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT11);
    2d1c:	2f e4       	ldi	r18, 0x4F	; 79
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	af e4       	ldi	r26, 0x4F	; 79
    2d22:	b0 e0       	ldi	r27, 0x00	; 0
    2d24:	ef e4       	ldi	r30, 0x4F	; 79
    2d26:	f0 e0       	ldi	r31, 0x00	; 0
    2d28:	80 81       	ld	r24, Z
    2d2a:	91 81       	ldd	r25, Z+1	; 0x01
    2d2c:	8d 7f       	andi	r24, 0xFD	; 253
    2d2e:	11 96       	adiw	r26, 0x01	; 1
    2d30:	9c 93       	st	X, r25
    2d32:	8e 93       	st	-X, r24
    2d34:	8d 91       	ld	r24, X+
    2d36:	9c 91       	ld	r25, X
    2d38:	f9 01       	movw	r30, r18
    2d3a:	91 83       	std	Z+1, r25	; 0x01
    2d3c:	80 83       	st	Z, r24

			/*
			 * Configure wave form generation mode to work with PWM_PhaseCorrect_8bit mode
			 * Clear WGM12/WMG13 bit in TCCR1B register
			 */
			TIMER1_CONTROL_REGIRSTER_B =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT12);
    2d3e:	2e e4       	ldi	r18, 0x4E	; 78
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	ae e4       	ldi	r26, 0x4E	; 78
    2d44:	b0 e0       	ldi	r27, 0x00	; 0
    2d46:	ee e4       	ldi	r30, 0x4E	; 78
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	80 81       	ld	r24, Z
    2d4c:	91 81       	ldd	r25, Z+1	; 0x01
    2d4e:	87 7f       	andi	r24, 0xF7	; 247
    2d50:	11 96       	adiw	r26, 0x01	; 1
    2d52:	9c 93       	st	X, r25
    2d54:	8e 93       	st	-X, r24
    2d56:	8d 91       	ld	r24, X+
    2d58:	9c 91       	ld	r25, X
    2d5a:	f9 01       	movw	r30, r18
    2d5c:	91 83       	std	Z+1, r25	; 0x01
    2d5e:	80 83       	st	Z, r24
			TIMER1_CONTROL_REGIRSTER_B =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT13);
    2d60:	2e e4       	ldi	r18, 0x4E	; 78
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	ae e4       	ldi	r26, 0x4E	; 78
    2d66:	b0 e0       	ldi	r27, 0x00	; 0
    2d68:	ee e4       	ldi	r30, 0x4E	; 78
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	80 81       	ld	r24, Z
    2d6e:	91 81       	ldd	r25, Z+1	; 0x01
    2d70:	8f 7e       	andi	r24, 0xEF	; 239
    2d72:	11 96       	adiw	r26, 0x01	; 1
    2d74:	9c 93       	st	X, r25
    2d76:	8e 93       	st	-X, r24
    2d78:	8d 91       	ld	r24, X+
    2d7a:	9c 91       	ld	r25, X
    2d7c:	11 97       	sbiw	r26, 0x01	; 1
    2d7e:	f9 01       	movw	r30, r18
    2d80:	91 83       	std	Z+1, r25	; 0x01
    2d82:	80 83       	st	Z, r24

			switch(Timer1_config_PTR->channel)
    2d84:	e9 81       	ldd	r30, Y+1	; 0x01
    2d86:	fa 81       	ldd	r31, Y+2	; 0x02
    2d88:	80 85       	ldd	r24, Z+8	; 0x08
    2d8a:	28 2f       	mov	r18, r24
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	3e 8f       	std	Y+30, r19	; 0x1e
    2d90:	2d 8f       	std	Y+29, r18	; 0x1d
    2d92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d94:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d96:	00 97       	sbiw	r24, 0x00	; 0
    2d98:	41 f0       	breq	.+16     	; 0x2daa <Timer1_Init+0x366>
    2d9a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2d9c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2d9e:	e1 30       	cpi	r30, 0x01	; 1
    2da0:	f1 05       	cpc	r31, r1
    2da2:	09 f4       	brne	.+2      	; 0x2da6 <Timer1_Init+0x362>
    2da4:	46 c0       	rjmp	.+140    	; 0x2e32 <Timer1_Init+0x3ee>
    2da6:	0c 94 24 23 	jmp	0x4648	; 0x4648 <Timer1_Init+0x1c04>
			case ChannelA:
				/*
				 * Configure OC1A as Output PIN
				 * the pin where the PWM signal is generated from MC
				 */
				OC1A_DIRECTION_PORT = SET_BIT(OC1A_DIRECTION_PORT, OC1A_PIN);
    2daa:	21 e3       	ldi	r18, 0x31	; 49
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	a1 e3       	ldi	r26, 0x31	; 49
    2db0:	b0 e0       	ldi	r27, 0x00	; 0
    2db2:	e1 e3       	ldi	r30, 0x31	; 49
    2db4:	f0 e0       	ldi	r31, 0x00	; 0
    2db6:	80 81       	ld	r24, Z
    2db8:	80 62       	ori	r24, 0x20	; 32
    2dba:	8c 93       	st	X, r24
    2dbc:	8c 91       	ld	r24, X
    2dbe:	f9 01       	movw	r30, r18
    2dc0:	80 83       	st	Z, r24
				/*
				 * Configure FOC1A bit in the TCCR1 register to be low
				 * As Timer1 is PWM mode
				 * Make FOC1A to be low as it is PWM_PhaseCorrect_8bit mode
				 */
				TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    2dc2:	2f e4       	ldi	r18, 0x4F	; 79
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	af e4       	ldi	r26, 0x4F	; 79
    2dc8:	b0 e0       	ldi	r27, 0x00	; 0
    2dca:	ef e4       	ldi	r30, 0x4F	; 79
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	80 81       	ld	r24, Z
    2dd0:	91 81       	ldd	r25, Z+1	; 0x01
    2dd2:	87 7f       	andi	r24, 0xF7	; 247
    2dd4:	11 96       	adiw	r26, 0x01	; 1
    2dd6:	9c 93       	st	X, r25
    2dd8:	8e 93       	st	-X, r24
    2dda:	8d 91       	ld	r24, X+
    2ddc:	9c 91       	ld	r25, X
    2dde:	f9 01       	movw	r30, r18
    2de0:	91 83       	std	Z+1, r25	; 0x01
    2de2:	80 83       	st	Z, r24
				/*
				 * Configure compare output mode to work with Timer1
				 * with one mode from 4 modes in TCCR1A
				 * Configure COM1A0/COM1A1 bits in TCCR1A register
				 */
				TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1A_MASK_CLEAR) |
    2de4:	af e4       	ldi	r26, 0x4F	; 79
    2de6:	b0 e0       	ldi	r27, 0x00	; 0
    2de8:	ef e4       	ldi	r30, 0x4F	; 79
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	80 81       	ld	r24, Z
    2dee:	91 81       	ldd	r25, Z+1	; 0x01
    2df0:	9c 01       	movw	r18, r24
    2df2:	2f 73       	andi	r18, 0x3F	; 63
    2df4:	30 70       	andi	r19, 0x00	; 0
    2df6:	e9 81       	ldd	r30, Y+1	; 0x01
    2df8:	fa 81       	ldd	r31, Y+2	; 0x02
    2dfa:	83 85       	ldd	r24, Z+11	; 0x0b
    2dfc:	88 2f       	mov	r24, r24
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	00 24       	eor	r0, r0
    2e02:	96 95       	lsr	r25
    2e04:	87 95       	ror	r24
    2e06:	07 94       	ror	r0
    2e08:	96 95       	lsr	r25
    2e0a:	87 95       	ror	r24
    2e0c:	07 94       	ror	r0
    2e0e:	98 2f       	mov	r25, r24
    2e10:	80 2d       	mov	r24, r0
    2e12:	82 2b       	or	r24, r18
    2e14:	93 2b       	or	r25, r19
    2e16:	11 96       	adiw	r26, 0x01	; 1
    2e18:	9c 93       	st	X, r25
    2e1a:	8e 93       	st	-X, r24
				/*
				 * Configure Compare match value for Timer1 to start count from it
				 * Anding with 0XFFFF to make sure the value won't exceed
				 * OXFFFF as it is 16-bit Timer
				 */
				TIMER1_OUTPUT_COMPARE_REGISTER_A = ((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF;
    2e1c:	aa e4       	ldi	r26, 0x4A	; 74
    2e1e:	b0 e0       	ldi	r27, 0x00	; 0
    2e20:	e9 81       	ldd	r30, Y+1	; 0x01
    2e22:	fa 81       	ldd	r31, Y+2	; 0x02
    2e24:	82 81       	ldd	r24, Z+2	; 0x02
    2e26:	93 81       	ldd	r25, Z+3	; 0x03
    2e28:	11 96       	adiw	r26, 0x01	; 1
    2e2a:	9c 93       	st	X, r25
    2e2c:	8e 93       	st	-X, r24
    2e2e:	0c 94 24 23 	jmp	0x4648	; 0x4648 <Timer1_Init+0x1c04>
			case ChannelB:
				/*
				 * Configure OC1A as Output PIN
				 * the pin where the PWM signal is generated from MC
				 */
				OC1B_DIRECTION_PORT = SET_BIT(OC1B_DIRECTION_PORT, OC1B_PIN);
    2e32:	21 e3       	ldi	r18, 0x31	; 49
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	a1 e3       	ldi	r26, 0x31	; 49
    2e38:	b0 e0       	ldi	r27, 0x00	; 0
    2e3a:	e1 e3       	ldi	r30, 0x31	; 49
    2e3c:	f0 e0       	ldi	r31, 0x00	; 0
    2e3e:	80 81       	ld	r24, Z
    2e40:	80 61       	ori	r24, 0x10	; 16
    2e42:	8c 93       	st	X, r24
    2e44:	8c 91       	ld	r24, X
    2e46:	f9 01       	movw	r30, r18
    2e48:	80 83       	st	Z, r24
				/*
				 * Configure FOC1B bit in the TCCR1 register to be low
				 * As Timer1 is PWM
				 * Make FOC1B to be low as it is PWM_PhaseCorrect_8bit mode
				 */
				TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    2e4a:	2f e4       	ldi	r18, 0x4F	; 79
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	af e4       	ldi	r26, 0x4F	; 79
    2e50:	b0 e0       	ldi	r27, 0x00	; 0
    2e52:	ef e4       	ldi	r30, 0x4F	; 79
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	80 81       	ld	r24, Z
    2e58:	91 81       	ldd	r25, Z+1	; 0x01
    2e5a:	8b 7f       	andi	r24, 0xFB	; 251
    2e5c:	11 96       	adiw	r26, 0x01	; 1
    2e5e:	9c 93       	st	X, r25
    2e60:	8e 93       	st	-X, r24
    2e62:	8d 91       	ld	r24, X+
    2e64:	9c 91       	ld	r25, X
    2e66:	f9 01       	movw	r30, r18
    2e68:	91 83       	std	Z+1, r25	; 0x01
    2e6a:	80 83       	st	Z, r24
				/*
				 * Configure compare output mode to work with Timer1
				 * with one mode from 4 modes in TCCR1A
				 * Configure COM1B0/COM1B1 bits in TCCR1A register
				 */
				TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1B_MASK_CLEAR) |
    2e6c:	af e4       	ldi	r26, 0x4F	; 79
    2e6e:	b0 e0       	ldi	r27, 0x00	; 0
    2e70:	ef e4       	ldi	r30, 0x4F	; 79
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	80 81       	ld	r24, Z
    2e76:	91 81       	ldd	r25, Z+1	; 0x01
    2e78:	9c 01       	movw	r18, r24
    2e7a:	2f 7c       	andi	r18, 0xCF	; 207
    2e7c:	30 70       	andi	r19, 0x00	; 0
    2e7e:	e9 81       	ldd	r30, Y+1	; 0x01
    2e80:	fa 81       	ldd	r31, Y+2	; 0x02
    2e82:	83 85       	ldd	r24, Z+11	; 0x0b
    2e84:	88 2f       	mov	r24, r24
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	82 95       	swap	r24
    2e8a:	92 95       	swap	r25
    2e8c:	90 7f       	andi	r25, 0xF0	; 240
    2e8e:	98 27       	eor	r25, r24
    2e90:	80 7f       	andi	r24, 0xF0	; 240
    2e92:	98 27       	eor	r25, r24
    2e94:	82 2b       	or	r24, r18
    2e96:	93 2b       	or	r25, r19
    2e98:	11 96       	adiw	r26, 0x01	; 1
    2e9a:	9c 93       	st	X, r25
    2e9c:	8e 93       	st	-X, r24
				 * Configure Compare match value for Timer1 to start count from it
				 * Anding with 0XFFFF to make sure the value won't exceed
				 * OXFFFF as it is 16-bit Timer
				 * to make it count right put OCR1A  greater than the value in OCR1B by 1
				 */
				TIMER1_OUTPUT_COMPARE_REGISTER_A = (((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF) + 1;
    2e9e:	aa e4       	ldi	r26, 0x4A	; 74
    2ea0:	b0 e0       	ldi	r27, 0x00	; 0
    2ea2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ea4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ea6:	82 81       	ldd	r24, Z+2	; 0x02
    2ea8:	93 81       	ldd	r25, Z+3	; 0x03
    2eaa:	01 96       	adiw	r24, 0x01	; 1
    2eac:	11 96       	adiw	r26, 0x01	; 1
    2eae:	9c 93       	st	X, r25
    2eb0:	8e 93       	st	-X, r24
				TIMER1_OUTPUT_COMPARE_REGISTER_B = ((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF;
    2eb2:	a8 e4       	ldi	r26, 0x48	; 72
    2eb4:	b0 e0       	ldi	r27, 0x00	; 0
    2eb6:	e9 81       	ldd	r30, Y+1	; 0x01
    2eb8:	fa 81       	ldd	r31, Y+2	; 0x02
    2eba:	82 81       	ldd	r24, Z+2	; 0x02
    2ebc:	93 81       	ldd	r25, Z+3	; 0x03
    2ebe:	11 96       	adiw	r26, 0x01	; 1
    2ec0:	9c 93       	st	X, r25
    2ec2:	8e 93       	st	-X, r24
    2ec4:	0c 94 24 23 	jmp	0x4648	; 0x4648 <Timer1_Init+0x1c04>
				/*
				 * Configure wave form generation mode to work with PWM_PhaseCorrect_9bit mode
				 * Clear WGM10 bit in TCCR1A register
				 * Set WGM11 bit in TCCR1A register
				 */
				TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT10);
    2ec8:	2f e4       	ldi	r18, 0x4F	; 79
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	af e4       	ldi	r26, 0x4F	; 79
    2ece:	b0 e0       	ldi	r27, 0x00	; 0
    2ed0:	ef e4       	ldi	r30, 0x4F	; 79
    2ed2:	f0 e0       	ldi	r31, 0x00	; 0
    2ed4:	80 81       	ld	r24, Z
    2ed6:	91 81       	ldd	r25, Z+1	; 0x01
    2ed8:	8e 7f       	andi	r24, 0xFE	; 254
    2eda:	11 96       	adiw	r26, 0x01	; 1
    2edc:	9c 93       	st	X, r25
    2ede:	8e 93       	st	-X, r24
    2ee0:	8d 91       	ld	r24, X+
    2ee2:	9c 91       	ld	r25, X
    2ee4:	f9 01       	movw	r30, r18
    2ee6:	91 83       	std	Z+1, r25	; 0x01
    2ee8:	80 83       	st	Z, r24
				TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT11);
    2eea:	2f e4       	ldi	r18, 0x4F	; 79
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	af e4       	ldi	r26, 0x4F	; 79
    2ef0:	b0 e0       	ldi	r27, 0x00	; 0
    2ef2:	ef e4       	ldi	r30, 0x4F	; 79
    2ef4:	f0 e0       	ldi	r31, 0x00	; 0
    2ef6:	80 81       	ld	r24, Z
    2ef8:	91 81       	ldd	r25, Z+1	; 0x01
    2efa:	82 60       	ori	r24, 0x02	; 2
    2efc:	11 96       	adiw	r26, 0x01	; 1
    2efe:	9c 93       	st	X, r25
    2f00:	8e 93       	st	-X, r24
    2f02:	8d 91       	ld	r24, X+
    2f04:	9c 91       	ld	r25, X
    2f06:	f9 01       	movw	r30, r18
    2f08:	91 83       	std	Z+1, r25	; 0x01
    2f0a:	80 83       	st	Z, r24

				/*
				 * Configure wave form generation mode to work with PWM_PhaseCorrect_9bit mode
				 * Clear WGM12/WMG13 bit in TCCR1B register
				 */
				TIMER1_CONTROL_REGIRSTER_B =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT12);
    2f0c:	2e e4       	ldi	r18, 0x4E	; 78
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	ae e4       	ldi	r26, 0x4E	; 78
    2f12:	b0 e0       	ldi	r27, 0x00	; 0
    2f14:	ee e4       	ldi	r30, 0x4E	; 78
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	80 81       	ld	r24, Z
    2f1a:	91 81       	ldd	r25, Z+1	; 0x01
    2f1c:	87 7f       	andi	r24, 0xF7	; 247
    2f1e:	11 96       	adiw	r26, 0x01	; 1
    2f20:	9c 93       	st	X, r25
    2f22:	8e 93       	st	-X, r24
    2f24:	8d 91       	ld	r24, X+
    2f26:	9c 91       	ld	r25, X
    2f28:	f9 01       	movw	r30, r18
    2f2a:	91 83       	std	Z+1, r25	; 0x01
    2f2c:	80 83       	st	Z, r24
				TIMER1_CONTROL_REGIRSTER_B =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT13);
    2f2e:	2e e4       	ldi	r18, 0x4E	; 78
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	ae e4       	ldi	r26, 0x4E	; 78
    2f34:	b0 e0       	ldi	r27, 0x00	; 0
    2f36:	ee e4       	ldi	r30, 0x4E	; 78
    2f38:	f0 e0       	ldi	r31, 0x00	; 0
    2f3a:	80 81       	ld	r24, Z
    2f3c:	91 81       	ldd	r25, Z+1	; 0x01
    2f3e:	8f 7e       	andi	r24, 0xEF	; 239
    2f40:	11 96       	adiw	r26, 0x01	; 1
    2f42:	9c 93       	st	X, r25
    2f44:	8e 93       	st	-X, r24
    2f46:	8d 91       	ld	r24, X+
    2f48:	9c 91       	ld	r25, X
    2f4a:	11 97       	sbiw	r26, 0x01	; 1
    2f4c:	f9 01       	movw	r30, r18
    2f4e:	91 83       	std	Z+1, r25	; 0x01
    2f50:	80 83       	st	Z, r24

				switch(Timer1_config_PTR->channel)
    2f52:	e9 81       	ldd	r30, Y+1	; 0x01
    2f54:	fa 81       	ldd	r31, Y+2	; 0x02
    2f56:	80 85       	ldd	r24, Z+8	; 0x08
    2f58:	28 2f       	mov	r18, r24
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	3c 8f       	std	Y+28, r19	; 0x1c
    2f5e:	2b 8f       	std	Y+27, r18	; 0x1b
    2f60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f64:	00 97       	sbiw	r24, 0x00	; 0
    2f66:	41 f0       	breq	.+16     	; 0x2f78 <Timer1_Init+0x534>
    2f68:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2f6a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2f6c:	e1 30       	cpi	r30, 0x01	; 1
    2f6e:	f1 05       	cpc	r31, r1
    2f70:	09 f4       	brne	.+2      	; 0x2f74 <Timer1_Init+0x530>
    2f72:	46 c0       	rjmp	.+140    	; 0x3000 <Timer1_Init+0x5bc>
    2f74:	0c 94 24 23 	jmp	0x4648	; 0x4648 <Timer1_Init+0x1c04>
				case ChannelA:
					/*
					 * Configure OC1A as Output PIN
					 * the pin where the PWM signal is generated from MC
					 */
					OC1A_DIRECTION_PORT = SET_BIT(OC1A_DIRECTION_PORT, OC1A_PIN);
    2f78:	21 e3       	ldi	r18, 0x31	; 49
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	a1 e3       	ldi	r26, 0x31	; 49
    2f7e:	b0 e0       	ldi	r27, 0x00	; 0
    2f80:	e1 e3       	ldi	r30, 0x31	; 49
    2f82:	f0 e0       	ldi	r31, 0x00	; 0
    2f84:	80 81       	ld	r24, Z
    2f86:	80 62       	ori	r24, 0x20	; 32
    2f88:	8c 93       	st	X, r24
    2f8a:	8c 91       	ld	r24, X
    2f8c:	f9 01       	movw	r30, r18
    2f8e:	80 83       	st	Z, r24
					/*
					 * Configure FOC1A bit in the TCCR1 register to be low
					 * As Timer1 is PWM mode
					 * Make FOC1A to be low as it is PWM_PhaseCorrect_9bit mode
					 */
					TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    2f90:	2f e4       	ldi	r18, 0x4F	; 79
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	af e4       	ldi	r26, 0x4F	; 79
    2f96:	b0 e0       	ldi	r27, 0x00	; 0
    2f98:	ef e4       	ldi	r30, 0x4F	; 79
    2f9a:	f0 e0       	ldi	r31, 0x00	; 0
    2f9c:	80 81       	ld	r24, Z
    2f9e:	91 81       	ldd	r25, Z+1	; 0x01
    2fa0:	87 7f       	andi	r24, 0xF7	; 247
    2fa2:	11 96       	adiw	r26, 0x01	; 1
    2fa4:	9c 93       	st	X, r25
    2fa6:	8e 93       	st	-X, r24
    2fa8:	8d 91       	ld	r24, X+
    2faa:	9c 91       	ld	r25, X
    2fac:	f9 01       	movw	r30, r18
    2fae:	91 83       	std	Z+1, r25	; 0x01
    2fb0:	80 83       	st	Z, r24
					/*
					 * Configure compare output mode to work with Timer1
					 * with one mode from 4 modes in TCCR1A
					 * Configure COM1A0/COM1A1 bits in TCCR1A register
					 */
					TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1A_MASK_CLEAR) |
    2fb2:	af e4       	ldi	r26, 0x4F	; 79
    2fb4:	b0 e0       	ldi	r27, 0x00	; 0
    2fb6:	ef e4       	ldi	r30, 0x4F	; 79
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	80 81       	ld	r24, Z
    2fbc:	91 81       	ldd	r25, Z+1	; 0x01
    2fbe:	9c 01       	movw	r18, r24
    2fc0:	2f 73       	andi	r18, 0x3F	; 63
    2fc2:	30 70       	andi	r19, 0x00	; 0
    2fc4:	e9 81       	ldd	r30, Y+1	; 0x01
    2fc6:	fa 81       	ldd	r31, Y+2	; 0x02
    2fc8:	83 85       	ldd	r24, Z+11	; 0x0b
    2fca:	88 2f       	mov	r24, r24
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	00 24       	eor	r0, r0
    2fd0:	96 95       	lsr	r25
    2fd2:	87 95       	ror	r24
    2fd4:	07 94       	ror	r0
    2fd6:	96 95       	lsr	r25
    2fd8:	87 95       	ror	r24
    2fda:	07 94       	ror	r0
    2fdc:	98 2f       	mov	r25, r24
    2fde:	80 2d       	mov	r24, r0
    2fe0:	82 2b       	or	r24, r18
    2fe2:	93 2b       	or	r25, r19
    2fe4:	11 96       	adiw	r26, 0x01	; 1
    2fe6:	9c 93       	st	X, r25
    2fe8:	8e 93       	st	-X, r24
					/*
					 * Configure Compare match value for Timer1 to start count from it
					 * Anding with 0XFFFF to make sure the value won't exceed
					 * OXFFFF as it is 16-bit Timer
					 */
					TIMER1_OUTPUT_COMPARE_REGISTER_A = ((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF;
    2fea:	aa e4       	ldi	r26, 0x4A	; 74
    2fec:	b0 e0       	ldi	r27, 0x00	; 0
    2fee:	e9 81       	ldd	r30, Y+1	; 0x01
    2ff0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ff2:	82 81       	ldd	r24, Z+2	; 0x02
    2ff4:	93 81       	ldd	r25, Z+3	; 0x03
    2ff6:	11 96       	adiw	r26, 0x01	; 1
    2ff8:	9c 93       	st	X, r25
    2ffa:	8e 93       	st	-X, r24
    2ffc:	0c 94 24 23 	jmp	0x4648	; 0x4648 <Timer1_Init+0x1c04>
				case ChannelB:
					/*
					 * Configure OC1A as Output PIN
					 * the pin where the PWM signal is generated from MC
					 */
					OC1B_DIRECTION_PORT = SET_BIT(OC1B_DIRECTION_PORT, OC1B_PIN);
    3000:	21 e3       	ldi	r18, 0x31	; 49
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	a1 e3       	ldi	r26, 0x31	; 49
    3006:	b0 e0       	ldi	r27, 0x00	; 0
    3008:	e1 e3       	ldi	r30, 0x31	; 49
    300a:	f0 e0       	ldi	r31, 0x00	; 0
    300c:	80 81       	ld	r24, Z
    300e:	80 61       	ori	r24, 0x10	; 16
    3010:	8c 93       	st	X, r24
    3012:	8c 91       	ld	r24, X
    3014:	f9 01       	movw	r30, r18
    3016:	80 83       	st	Z, r24
					/*
					 * Configure FOC1B bit in the TCCR1 register to be low
					 * As Timer1 is PWM
					 * Make FOC1B to be low as it is PWM_PhaseCorrect_9bit mode
					 */
					TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    3018:	2f e4       	ldi	r18, 0x4F	; 79
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	af e4       	ldi	r26, 0x4F	; 79
    301e:	b0 e0       	ldi	r27, 0x00	; 0
    3020:	ef e4       	ldi	r30, 0x4F	; 79
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	80 81       	ld	r24, Z
    3026:	91 81       	ldd	r25, Z+1	; 0x01
    3028:	8b 7f       	andi	r24, 0xFB	; 251
    302a:	11 96       	adiw	r26, 0x01	; 1
    302c:	9c 93       	st	X, r25
    302e:	8e 93       	st	-X, r24
    3030:	8d 91       	ld	r24, X+
    3032:	9c 91       	ld	r25, X
    3034:	f9 01       	movw	r30, r18
    3036:	91 83       	std	Z+1, r25	; 0x01
    3038:	80 83       	st	Z, r24
					/*
					 * Configure compare output mode to work with Timer1
					 * with one mode from 4 modes in TCCR1A
					 * Configure COM1B0/COM1B1 bits in TCCR1A register
					 */
					TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1B_MASK_CLEAR) |
    303a:	af e4       	ldi	r26, 0x4F	; 79
    303c:	b0 e0       	ldi	r27, 0x00	; 0
    303e:	ef e4       	ldi	r30, 0x4F	; 79
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	80 81       	ld	r24, Z
    3044:	91 81       	ldd	r25, Z+1	; 0x01
    3046:	9c 01       	movw	r18, r24
    3048:	2f 7c       	andi	r18, 0xCF	; 207
    304a:	30 70       	andi	r19, 0x00	; 0
    304c:	e9 81       	ldd	r30, Y+1	; 0x01
    304e:	fa 81       	ldd	r31, Y+2	; 0x02
    3050:	83 85       	ldd	r24, Z+11	; 0x0b
    3052:	88 2f       	mov	r24, r24
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	82 95       	swap	r24
    3058:	92 95       	swap	r25
    305a:	90 7f       	andi	r25, 0xF0	; 240
    305c:	98 27       	eor	r25, r24
    305e:	80 7f       	andi	r24, 0xF0	; 240
    3060:	98 27       	eor	r25, r24
    3062:	82 2b       	or	r24, r18
    3064:	93 2b       	or	r25, r19
    3066:	11 96       	adiw	r26, 0x01	; 1
    3068:	9c 93       	st	X, r25
    306a:	8e 93       	st	-X, r24
					 * Configure Compare match value for Timer1 to start count from it
					 * Anding with 0XFFFF to make sure the value won't exceed
					 * OXFFFF as it is 16-bit Timer
					 * to make it count right put OCR1A  greater than the value in OCR1B by 1
					 */
					TIMER1_OUTPUT_COMPARE_REGISTER_A = (((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF) + 1;
    306c:	aa e4       	ldi	r26, 0x4A	; 74
    306e:	b0 e0       	ldi	r27, 0x00	; 0
    3070:	e9 81       	ldd	r30, Y+1	; 0x01
    3072:	fa 81       	ldd	r31, Y+2	; 0x02
    3074:	82 81       	ldd	r24, Z+2	; 0x02
    3076:	93 81       	ldd	r25, Z+3	; 0x03
    3078:	01 96       	adiw	r24, 0x01	; 1
    307a:	11 96       	adiw	r26, 0x01	; 1
    307c:	9c 93       	st	X, r25
    307e:	8e 93       	st	-X, r24
					TIMER1_OUTPUT_COMPARE_REGISTER_B = ((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF;
    3080:	a8 e4       	ldi	r26, 0x48	; 72
    3082:	b0 e0       	ldi	r27, 0x00	; 0
    3084:	e9 81       	ldd	r30, Y+1	; 0x01
    3086:	fa 81       	ldd	r31, Y+2	; 0x02
    3088:	82 81       	ldd	r24, Z+2	; 0x02
    308a:	93 81       	ldd	r25, Z+3	; 0x03
    308c:	11 96       	adiw	r26, 0x01	; 1
    308e:	9c 93       	st	X, r25
    3090:	8e 93       	st	-X, r24
    3092:	0c 94 24 23 	jmp	0x4648	; 0x4648 <Timer1_Init+0x1c04>
					/*
					 * Configure wave form generation mode to work with PWM_PhaseCorrect_10bit mode
					 * Set WGM10 bit in TCCR1A register
					 * Set WGM11 bit in TCCR1A register
					 */
					TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT10);
    3096:	2f e4       	ldi	r18, 0x4F	; 79
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	af e4       	ldi	r26, 0x4F	; 79
    309c:	b0 e0       	ldi	r27, 0x00	; 0
    309e:	ef e4       	ldi	r30, 0x4F	; 79
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	80 81       	ld	r24, Z
    30a4:	91 81       	ldd	r25, Z+1	; 0x01
    30a6:	81 60       	ori	r24, 0x01	; 1
    30a8:	11 96       	adiw	r26, 0x01	; 1
    30aa:	9c 93       	st	X, r25
    30ac:	8e 93       	st	-X, r24
    30ae:	8d 91       	ld	r24, X+
    30b0:	9c 91       	ld	r25, X
    30b2:	f9 01       	movw	r30, r18
    30b4:	91 83       	std	Z+1, r25	; 0x01
    30b6:	80 83       	st	Z, r24
					TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT11);
    30b8:	2f e4       	ldi	r18, 0x4F	; 79
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	af e4       	ldi	r26, 0x4F	; 79
    30be:	b0 e0       	ldi	r27, 0x00	; 0
    30c0:	ef e4       	ldi	r30, 0x4F	; 79
    30c2:	f0 e0       	ldi	r31, 0x00	; 0
    30c4:	80 81       	ld	r24, Z
    30c6:	91 81       	ldd	r25, Z+1	; 0x01
    30c8:	82 60       	ori	r24, 0x02	; 2
    30ca:	11 96       	adiw	r26, 0x01	; 1
    30cc:	9c 93       	st	X, r25
    30ce:	8e 93       	st	-X, r24
    30d0:	8d 91       	ld	r24, X+
    30d2:	9c 91       	ld	r25, X
    30d4:	f9 01       	movw	r30, r18
    30d6:	91 83       	std	Z+1, r25	; 0x01
    30d8:	80 83       	st	Z, r24

					/*
					 * Configure wave form generation mode to work with PWM_PhaseCorrect_10bit mode
					 * Clear WGM12/WMG13 bit in TCCR1B register
					 */
					TIMER1_CONTROL_REGIRSTER_B =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT12);
    30da:	2e e4       	ldi	r18, 0x4E	; 78
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	ae e4       	ldi	r26, 0x4E	; 78
    30e0:	b0 e0       	ldi	r27, 0x00	; 0
    30e2:	ee e4       	ldi	r30, 0x4E	; 78
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	80 81       	ld	r24, Z
    30e8:	91 81       	ldd	r25, Z+1	; 0x01
    30ea:	87 7f       	andi	r24, 0xF7	; 247
    30ec:	11 96       	adiw	r26, 0x01	; 1
    30ee:	9c 93       	st	X, r25
    30f0:	8e 93       	st	-X, r24
    30f2:	8d 91       	ld	r24, X+
    30f4:	9c 91       	ld	r25, X
    30f6:	f9 01       	movw	r30, r18
    30f8:	91 83       	std	Z+1, r25	; 0x01
    30fa:	80 83       	st	Z, r24
					TIMER1_CONTROL_REGIRSTER_B =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT13);
    30fc:	2e e4       	ldi	r18, 0x4E	; 78
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	ae e4       	ldi	r26, 0x4E	; 78
    3102:	b0 e0       	ldi	r27, 0x00	; 0
    3104:	ee e4       	ldi	r30, 0x4E	; 78
    3106:	f0 e0       	ldi	r31, 0x00	; 0
    3108:	80 81       	ld	r24, Z
    310a:	91 81       	ldd	r25, Z+1	; 0x01
    310c:	8f 7e       	andi	r24, 0xEF	; 239
    310e:	11 96       	adiw	r26, 0x01	; 1
    3110:	9c 93       	st	X, r25
    3112:	8e 93       	st	-X, r24
    3114:	8d 91       	ld	r24, X+
    3116:	9c 91       	ld	r25, X
    3118:	11 97       	sbiw	r26, 0x01	; 1
    311a:	f9 01       	movw	r30, r18
    311c:	91 83       	std	Z+1, r25	; 0x01
    311e:	80 83       	st	Z, r24

					switch(Timer1_config_PTR->channel)
    3120:	e9 81       	ldd	r30, Y+1	; 0x01
    3122:	fa 81       	ldd	r31, Y+2	; 0x02
    3124:	80 85       	ldd	r24, Z+8	; 0x08
    3126:	28 2f       	mov	r18, r24
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	3a 8f       	std	Y+26, r19	; 0x1a
    312c:	29 8f       	std	Y+25, r18	; 0x19
    312e:	89 8d       	ldd	r24, Y+25	; 0x19
    3130:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3132:	00 97       	sbiw	r24, 0x00	; 0
    3134:	41 f0       	breq	.+16     	; 0x3146 <Timer1_Init+0x702>
    3136:	e9 8d       	ldd	r30, Y+25	; 0x19
    3138:	fa 8d       	ldd	r31, Y+26	; 0x1a
    313a:	e1 30       	cpi	r30, 0x01	; 1
    313c:	f1 05       	cpc	r31, r1
    313e:	09 f4       	brne	.+2      	; 0x3142 <Timer1_Init+0x6fe>
    3140:	46 c0       	rjmp	.+140    	; 0x31ce <Timer1_Init+0x78a>
    3142:	0c 94 24 23 	jmp	0x4648	; 0x4648 <Timer1_Init+0x1c04>
					case ChannelA:
						/*
						 * Configure OC1A as Output PIN
						 * the pin where the PWM signal is generated from MC
						 */
						OC1A_DIRECTION_PORT = SET_BIT(OC1A_DIRECTION_PORT, OC1A_PIN);
    3146:	21 e3       	ldi	r18, 0x31	; 49
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	a1 e3       	ldi	r26, 0x31	; 49
    314c:	b0 e0       	ldi	r27, 0x00	; 0
    314e:	e1 e3       	ldi	r30, 0x31	; 49
    3150:	f0 e0       	ldi	r31, 0x00	; 0
    3152:	80 81       	ld	r24, Z
    3154:	80 62       	ori	r24, 0x20	; 32
    3156:	8c 93       	st	X, r24
    3158:	8c 91       	ld	r24, X
    315a:	f9 01       	movw	r30, r18
    315c:	80 83       	st	Z, r24
						/*
						 * Configure FOC1A bit in the TCCR1 register to be low
						 * As Timer1 is PWM mode
						 * Make FOC1A to be low as it is PWM_PhaseCorrect_10bit mode
						 */
						TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    315e:	2f e4       	ldi	r18, 0x4F	; 79
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	af e4       	ldi	r26, 0x4F	; 79
    3164:	b0 e0       	ldi	r27, 0x00	; 0
    3166:	ef e4       	ldi	r30, 0x4F	; 79
    3168:	f0 e0       	ldi	r31, 0x00	; 0
    316a:	80 81       	ld	r24, Z
    316c:	91 81       	ldd	r25, Z+1	; 0x01
    316e:	87 7f       	andi	r24, 0xF7	; 247
    3170:	11 96       	adiw	r26, 0x01	; 1
    3172:	9c 93       	st	X, r25
    3174:	8e 93       	st	-X, r24
    3176:	8d 91       	ld	r24, X+
    3178:	9c 91       	ld	r25, X
    317a:	f9 01       	movw	r30, r18
    317c:	91 83       	std	Z+1, r25	; 0x01
    317e:	80 83       	st	Z, r24
						/*
						 * Configure compare output mode to work with Timer1
						 * with one mode from 4 modes in TCCR1A
						 * Configure COM1A0/COM1A1 bits in TCCR1A register
						 */
						TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1A_MASK_CLEAR) |
    3180:	af e4       	ldi	r26, 0x4F	; 79
    3182:	b0 e0       	ldi	r27, 0x00	; 0
    3184:	ef e4       	ldi	r30, 0x4F	; 79
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	80 81       	ld	r24, Z
    318a:	91 81       	ldd	r25, Z+1	; 0x01
    318c:	9c 01       	movw	r18, r24
    318e:	2f 73       	andi	r18, 0x3F	; 63
    3190:	30 70       	andi	r19, 0x00	; 0
    3192:	e9 81       	ldd	r30, Y+1	; 0x01
    3194:	fa 81       	ldd	r31, Y+2	; 0x02
    3196:	83 85       	ldd	r24, Z+11	; 0x0b
    3198:	88 2f       	mov	r24, r24
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	00 24       	eor	r0, r0
    319e:	96 95       	lsr	r25
    31a0:	87 95       	ror	r24
    31a2:	07 94       	ror	r0
    31a4:	96 95       	lsr	r25
    31a6:	87 95       	ror	r24
    31a8:	07 94       	ror	r0
    31aa:	98 2f       	mov	r25, r24
    31ac:	80 2d       	mov	r24, r0
    31ae:	82 2b       	or	r24, r18
    31b0:	93 2b       	or	r25, r19
    31b2:	11 96       	adiw	r26, 0x01	; 1
    31b4:	9c 93       	st	X, r25
    31b6:	8e 93       	st	-X, r24
						/*
						 * Configure Compare match value for Timer1 to start count from it
						 * Anding with 0XFFFF to make sure the value won't exceed
						 * OXFFFF as it is 16-bit Timer
						 */
						TIMER1_OUTPUT_COMPARE_REGISTER_A = ((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF;
    31b8:	aa e4       	ldi	r26, 0x4A	; 74
    31ba:	b0 e0       	ldi	r27, 0x00	; 0
    31bc:	e9 81       	ldd	r30, Y+1	; 0x01
    31be:	fa 81       	ldd	r31, Y+2	; 0x02
    31c0:	82 81       	ldd	r24, Z+2	; 0x02
    31c2:	93 81       	ldd	r25, Z+3	; 0x03
    31c4:	11 96       	adiw	r26, 0x01	; 1
    31c6:	9c 93       	st	X, r25
    31c8:	8e 93       	st	-X, r24
    31ca:	0c 94 24 23 	jmp	0x4648	; 0x4648 <Timer1_Init+0x1c04>
					case ChannelB:
						/*
						 * Configure OC1A as Output PIN
						 * the pin where the PWM signal is generated from MC
						 */
						OC1B_DIRECTION_PORT = SET_BIT(OC1B_DIRECTION_PORT, OC1B_PIN);
    31ce:	21 e3       	ldi	r18, 0x31	; 49
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	a1 e3       	ldi	r26, 0x31	; 49
    31d4:	b0 e0       	ldi	r27, 0x00	; 0
    31d6:	e1 e3       	ldi	r30, 0x31	; 49
    31d8:	f0 e0       	ldi	r31, 0x00	; 0
    31da:	80 81       	ld	r24, Z
    31dc:	80 61       	ori	r24, 0x10	; 16
    31de:	8c 93       	st	X, r24
    31e0:	8c 91       	ld	r24, X
    31e2:	f9 01       	movw	r30, r18
    31e4:	80 83       	st	Z, r24
						/*
						 * Configure FOC1B bit in the TCCR1 register to be low
						 * As Timer1 is PWM
						 * Make FOC1B to be low as it is PWM_PhaseCorrect_10bit mode
						 */
						TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    31e6:	2f e4       	ldi	r18, 0x4F	; 79
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	af e4       	ldi	r26, 0x4F	; 79
    31ec:	b0 e0       	ldi	r27, 0x00	; 0
    31ee:	ef e4       	ldi	r30, 0x4F	; 79
    31f0:	f0 e0       	ldi	r31, 0x00	; 0
    31f2:	80 81       	ld	r24, Z
    31f4:	91 81       	ldd	r25, Z+1	; 0x01
    31f6:	8b 7f       	andi	r24, 0xFB	; 251
    31f8:	11 96       	adiw	r26, 0x01	; 1
    31fa:	9c 93       	st	X, r25
    31fc:	8e 93       	st	-X, r24
    31fe:	8d 91       	ld	r24, X+
    3200:	9c 91       	ld	r25, X
    3202:	f9 01       	movw	r30, r18
    3204:	91 83       	std	Z+1, r25	; 0x01
    3206:	80 83       	st	Z, r24
						/*
						 * Configure compare output mode to work with Timer1
						 * with one mode from 4 modes in TCCR1A
						 * Configure COM1B0/COM1B1 bits in TCCR1A register
						 */
						TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1B_MASK_CLEAR) |
    3208:	af e4       	ldi	r26, 0x4F	; 79
    320a:	b0 e0       	ldi	r27, 0x00	; 0
    320c:	ef e4       	ldi	r30, 0x4F	; 79
    320e:	f0 e0       	ldi	r31, 0x00	; 0
    3210:	80 81       	ld	r24, Z
    3212:	91 81       	ldd	r25, Z+1	; 0x01
    3214:	9c 01       	movw	r18, r24
    3216:	2f 7c       	andi	r18, 0xCF	; 207
    3218:	30 70       	andi	r19, 0x00	; 0
    321a:	e9 81       	ldd	r30, Y+1	; 0x01
    321c:	fa 81       	ldd	r31, Y+2	; 0x02
    321e:	83 85       	ldd	r24, Z+11	; 0x0b
    3220:	88 2f       	mov	r24, r24
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	82 95       	swap	r24
    3226:	92 95       	swap	r25
    3228:	90 7f       	andi	r25, 0xF0	; 240
    322a:	98 27       	eor	r25, r24
    322c:	80 7f       	andi	r24, 0xF0	; 240
    322e:	98 27       	eor	r25, r24
    3230:	82 2b       	or	r24, r18
    3232:	93 2b       	or	r25, r19
    3234:	11 96       	adiw	r26, 0x01	; 1
    3236:	9c 93       	st	X, r25
    3238:	8e 93       	st	-X, r24
						 * Configure Compare match value for Timer1 to start count from it
						 * Anding with 0XFFFF to make sure the value won't exceed
						 * OXFFFF as it is 16-bit Timer
						 * to make it count right put OCR1A  greater than the value in OCR1B by 1
						 */
						TIMER1_OUTPUT_COMPARE_REGISTER_A = (((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF) + 1;
    323a:	aa e4       	ldi	r26, 0x4A	; 74
    323c:	b0 e0       	ldi	r27, 0x00	; 0
    323e:	e9 81       	ldd	r30, Y+1	; 0x01
    3240:	fa 81       	ldd	r31, Y+2	; 0x02
    3242:	82 81       	ldd	r24, Z+2	; 0x02
    3244:	93 81       	ldd	r25, Z+3	; 0x03
    3246:	01 96       	adiw	r24, 0x01	; 1
    3248:	11 96       	adiw	r26, 0x01	; 1
    324a:	9c 93       	st	X, r25
    324c:	8e 93       	st	-X, r24
						TIMER1_OUTPUT_COMPARE_REGISTER_B = ((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF;
    324e:	a8 e4       	ldi	r26, 0x48	; 72
    3250:	b0 e0       	ldi	r27, 0x00	; 0
    3252:	e9 81       	ldd	r30, Y+1	; 0x01
    3254:	fa 81       	ldd	r31, Y+2	; 0x02
    3256:	82 81       	ldd	r24, Z+2	; 0x02
    3258:	93 81       	ldd	r25, Z+3	; 0x03
    325a:	11 96       	adiw	r26, 0x01	; 1
    325c:	9c 93       	st	X, r25
    325e:	8e 93       	st	-X, r24
    3260:	0c 94 24 23 	jmp	0x4648	; 0x4648 <Timer1_Init+0x1c04>

						/*
						 * Configure wave form generation mode to work with compare mode
						 * Clear WGM10/WMG11 bit in TCCR1A register
						 */
						TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT10);
    3264:	2f e4       	ldi	r18, 0x4F	; 79
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	af e4       	ldi	r26, 0x4F	; 79
    326a:	b0 e0       	ldi	r27, 0x00	; 0
    326c:	ef e4       	ldi	r30, 0x4F	; 79
    326e:	f0 e0       	ldi	r31, 0x00	; 0
    3270:	80 81       	ld	r24, Z
    3272:	91 81       	ldd	r25, Z+1	; 0x01
    3274:	8e 7f       	andi	r24, 0xFE	; 254
    3276:	11 96       	adiw	r26, 0x01	; 1
    3278:	9c 93       	st	X, r25
    327a:	8e 93       	st	-X, r24
    327c:	8d 91       	ld	r24, X+
    327e:	9c 91       	ld	r25, X
    3280:	f9 01       	movw	r30, r18
    3282:	91 83       	std	Z+1, r25	; 0x01
    3284:	80 83       	st	Z, r24
						TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT11);
    3286:	2f e4       	ldi	r18, 0x4F	; 79
    3288:	30 e0       	ldi	r19, 0x00	; 0
    328a:	af e4       	ldi	r26, 0x4F	; 79
    328c:	b0 e0       	ldi	r27, 0x00	; 0
    328e:	ef e4       	ldi	r30, 0x4F	; 79
    3290:	f0 e0       	ldi	r31, 0x00	; 0
    3292:	80 81       	ld	r24, Z
    3294:	91 81       	ldd	r25, Z+1	; 0x01
    3296:	8d 7f       	andi	r24, 0xFD	; 253
    3298:	11 96       	adiw	r26, 0x01	; 1
    329a:	9c 93       	st	X, r25
    329c:	8e 93       	st	-X, r24
    329e:	8d 91       	ld	r24, X+
    32a0:	9c 91       	ld	r25, X
    32a2:	f9 01       	movw	r30, r18
    32a4:	91 83       	std	Z+1, r25	; 0x01
    32a6:	80 83       	st	Z, r24
						/*
						 * Configure wave form generation mode to work with normal mode
						 * Clear WMG13 bit in TCCR1B register
						 * Set WMG12 bit in TCCR1B register
						 */
						TIMER1_CONTROL_REGIRSTER_B =  SET_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT12);
    32a8:	2e e4       	ldi	r18, 0x4E	; 78
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	ae e4       	ldi	r26, 0x4E	; 78
    32ae:	b0 e0       	ldi	r27, 0x00	; 0
    32b0:	ee e4       	ldi	r30, 0x4E	; 78
    32b2:	f0 e0       	ldi	r31, 0x00	; 0
    32b4:	80 81       	ld	r24, Z
    32b6:	91 81       	ldd	r25, Z+1	; 0x01
    32b8:	88 60       	ori	r24, 0x08	; 8
    32ba:	11 96       	adiw	r26, 0x01	; 1
    32bc:	9c 93       	st	X, r25
    32be:	8e 93       	st	-X, r24
    32c0:	8d 91       	ld	r24, X+
    32c2:	9c 91       	ld	r25, X
    32c4:	f9 01       	movw	r30, r18
    32c6:	91 83       	std	Z+1, r25	; 0x01
    32c8:	80 83       	st	Z, r24
						TIMER1_CONTROL_REGIRSTER_B =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT13);
    32ca:	2e e4       	ldi	r18, 0x4E	; 78
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	ae e4       	ldi	r26, 0x4E	; 78
    32d0:	b0 e0       	ldi	r27, 0x00	; 0
    32d2:	ee e4       	ldi	r30, 0x4E	; 78
    32d4:	f0 e0       	ldi	r31, 0x00	; 0
    32d6:	80 81       	ld	r24, Z
    32d8:	91 81       	ldd	r25, Z+1	; 0x01
    32da:	8f 7e       	andi	r24, 0xEF	; 239
    32dc:	11 96       	adiw	r26, 0x01	; 1
    32de:	9c 93       	st	X, r25
    32e0:	8e 93       	st	-X, r24
    32e2:	8d 91       	ld	r24, X+
    32e4:	9c 91       	ld	r25, X
    32e6:	11 97       	sbiw	r26, 0x01	; 1
    32e8:	f9 01       	movw	r30, r18
    32ea:	91 83       	std	Z+1, r25	; 0x01
    32ec:	80 83       	st	Z, r24

						switch(Timer1_config_PTR->channel)
    32ee:	e9 81       	ldd	r30, Y+1	; 0x01
    32f0:	fa 81       	ldd	r31, Y+2	; 0x02
    32f2:	80 85       	ldd	r24, Z+8	; 0x08
    32f4:	28 2f       	mov	r18, r24
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	38 8f       	std	Y+24, r19	; 0x18
    32fa:	2f 8b       	std	Y+23, r18	; 0x17
    32fc:	8f 89       	ldd	r24, Y+23	; 0x17
    32fe:	98 8d       	ldd	r25, Y+24	; 0x18
    3300:	00 97       	sbiw	r24, 0x00	; 0
    3302:	41 f0       	breq	.+16     	; 0x3314 <Timer1_Init+0x8d0>
    3304:	ef 89       	ldd	r30, Y+23	; 0x17
    3306:	f8 8d       	ldd	r31, Y+24	; 0x18
    3308:	e1 30       	cpi	r30, 0x01	; 1
    330a:	f1 05       	cpc	r31, r1
    330c:	09 f4       	brne	.+2      	; 0x3310 <Timer1_Init+0x8cc>
    330e:	46 c0       	rjmp	.+140    	; 0x339c <Timer1_Init+0x958>
    3310:	0c 94 24 23 	jmp	0x4648	; 0x4648 <Timer1_Init+0x1c04>
							/*
							 * Configure FOC1A bit in the TCCR1 register to be active
							 * As Timer1 is non-PWM
							 * Make FOC1A to be Active as it is compare mode
							 */
							TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    3314:	2f e4       	ldi	r18, 0x4F	; 79
    3316:	30 e0       	ldi	r19, 0x00	; 0
    3318:	af e4       	ldi	r26, 0x4F	; 79
    331a:	b0 e0       	ldi	r27, 0x00	; 0
    331c:	ef e4       	ldi	r30, 0x4F	; 79
    331e:	f0 e0       	ldi	r31, 0x00	; 0
    3320:	80 81       	ld	r24, Z
    3322:	91 81       	ldd	r25, Z+1	; 0x01
    3324:	88 60       	ori	r24, 0x08	; 8
    3326:	11 96       	adiw	r26, 0x01	; 1
    3328:	9c 93       	st	X, r25
    332a:	8e 93       	st	-X, r24
    332c:	8d 91       	ld	r24, X+
    332e:	9c 91       	ld	r25, X
    3330:	f9 01       	movw	r30, r18
    3332:	91 83       	std	Z+1, r25	; 0x01
    3334:	80 83       	st	Z, r24
							/*
							 * Configure compare output mode to work with Timer1
							 * with one mode from 4 modes in TCCR1A
							 * Configure COM1A0/COM1A1 bits in TCCR1A register
							 */
							TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1A_MASK_CLEAR) |
    3336:	af e4       	ldi	r26, 0x4F	; 79
    3338:	b0 e0       	ldi	r27, 0x00	; 0
    333a:	ef e4       	ldi	r30, 0x4F	; 79
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	80 81       	ld	r24, Z
    3340:	91 81       	ldd	r25, Z+1	; 0x01
    3342:	9c 01       	movw	r18, r24
    3344:	2f 73       	andi	r18, 0x3F	; 63
    3346:	30 70       	andi	r19, 0x00	; 0
    3348:	e9 81       	ldd	r30, Y+1	; 0x01
    334a:	fa 81       	ldd	r31, Y+2	; 0x02
    334c:	81 85       	ldd	r24, Z+9	; 0x09
    334e:	88 2f       	mov	r24, r24
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	00 24       	eor	r0, r0
    3354:	96 95       	lsr	r25
    3356:	87 95       	ror	r24
    3358:	07 94       	ror	r0
    335a:	96 95       	lsr	r25
    335c:	87 95       	ror	r24
    335e:	07 94       	ror	r0
    3360:	98 2f       	mov	r25, r24
    3362:	80 2d       	mov	r24, r0
    3364:	82 2b       	or	r24, r18
    3366:	93 2b       	or	r25, r19
    3368:	11 96       	adiw	r26, 0x01	; 1
    336a:	9c 93       	st	X, r25
    336c:	8e 93       	st	-X, r24
							/*
							 * Configure Compare match value for Timer1 to start count from it
							 * Anding with 0XFFFF to make sure the value won't exceed
							 * OXFFFF as it is 16-bit Timer
							 */
							TIMER1_OUTPUT_COMPARE_REGISTER_A = ((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF;
    336e:	aa e4       	ldi	r26, 0x4A	; 74
    3370:	b0 e0       	ldi	r27, 0x00	; 0
    3372:	e9 81       	ldd	r30, Y+1	; 0x01
    3374:	fa 81       	ldd	r31, Y+2	; 0x02
    3376:	82 81       	ldd	r24, Z+2	; 0x02
    3378:	93 81       	ldd	r25, Z+3	; 0x03
    337a:	11 96       	adiw	r26, 0x01	; 1
    337c:	9c 93       	st	X, r25
    337e:	8e 93       	st	-X, r24
							 * Enable Timer1 compare match interrupt
							 * wait for: -Enable I-bit "mask bit" in the SREG register
							 *           -OCF1 bit in the TIFR register to be set
							 * Timer1 compare match mode is ready to work after that
							 */
							TIMER1_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER1_INTERRUPT_MASK_REGISTER,TIMER1_OUTPUT_COMPARE_MATCH_INTERRUPT_A);
    3380:	29 e5       	ldi	r18, 0x59	; 89
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	a9 e5       	ldi	r26, 0x59	; 89
    3386:	b0 e0       	ldi	r27, 0x00	; 0
    3388:	e9 e5       	ldi	r30, 0x59	; 89
    338a:	f0 e0       	ldi	r31, 0x00	; 0
    338c:	80 81       	ld	r24, Z
    338e:	80 61       	ori	r24, 0x10	; 16
    3390:	8c 93       	st	X, r24
    3392:	8c 91       	ld	r24, X
    3394:	f9 01       	movw	r30, r18
    3396:	80 83       	st	Z, r24
    3398:	0c 94 24 23 	jmp	0x4648	; 0x4648 <Timer1_Init+0x1c04>
							/*
							 * Configure FOC1B bit in the TCCR1 register to be active
							 * As Timer1 is non-PWM
							 * Make FOC1B to be Active as it is compare mode
							 */
							TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    339c:	2f e4       	ldi	r18, 0x4F	; 79
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	af e4       	ldi	r26, 0x4F	; 79
    33a2:	b0 e0       	ldi	r27, 0x00	; 0
    33a4:	ef e4       	ldi	r30, 0x4F	; 79
    33a6:	f0 e0       	ldi	r31, 0x00	; 0
    33a8:	80 81       	ld	r24, Z
    33aa:	91 81       	ldd	r25, Z+1	; 0x01
    33ac:	84 60       	ori	r24, 0x04	; 4
    33ae:	11 96       	adiw	r26, 0x01	; 1
    33b0:	9c 93       	st	X, r25
    33b2:	8e 93       	st	-X, r24
    33b4:	8d 91       	ld	r24, X+
    33b6:	9c 91       	ld	r25, X
    33b8:	f9 01       	movw	r30, r18
    33ba:	91 83       	std	Z+1, r25	; 0x01
    33bc:	80 83       	st	Z, r24
							/*
							 * Configure compare output mode to work with Timer1
							 * with one mode from 4 modes in TCCR1A
							 * Configure COM1B0/COM1B1 bits in TCCR1A register
							 */
							TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1B_MASK_CLEAR) |
    33be:	af e4       	ldi	r26, 0x4F	; 79
    33c0:	b0 e0       	ldi	r27, 0x00	; 0
    33c2:	ef e4       	ldi	r30, 0x4F	; 79
    33c4:	f0 e0       	ldi	r31, 0x00	; 0
    33c6:	80 81       	ld	r24, Z
    33c8:	91 81       	ldd	r25, Z+1	; 0x01
    33ca:	9c 01       	movw	r18, r24
    33cc:	2f 7c       	andi	r18, 0xCF	; 207
    33ce:	30 70       	andi	r19, 0x00	; 0
    33d0:	e9 81       	ldd	r30, Y+1	; 0x01
    33d2:	fa 81       	ldd	r31, Y+2	; 0x02
    33d4:	81 85       	ldd	r24, Z+9	; 0x09
    33d6:	88 2f       	mov	r24, r24
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	82 95       	swap	r24
    33dc:	92 95       	swap	r25
    33de:	90 7f       	andi	r25, 0xF0	; 240
    33e0:	98 27       	eor	r25, r24
    33e2:	80 7f       	andi	r24, 0xF0	; 240
    33e4:	98 27       	eor	r25, r24
    33e6:	82 2b       	or	r24, r18
    33e8:	93 2b       	or	r25, r19
    33ea:	11 96       	adiw	r26, 0x01	; 1
    33ec:	9c 93       	st	X, r25
    33ee:	8e 93       	st	-X, r24
							 * Configure Compare match value for Timer1 to start count from it
							 * Anding with 0XFFFF to make sure the value won't exceed
							 * OXFFFF as it is 16-bit Timer
							 * to make it count right put OCR1A  greater than the value in OCR1B by 1
							 */
							TIMER1_OUTPUT_COMPARE_REGISTER_A = (((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF) + 1;
    33f0:	aa e4       	ldi	r26, 0x4A	; 74
    33f2:	b0 e0       	ldi	r27, 0x00	; 0
    33f4:	e9 81       	ldd	r30, Y+1	; 0x01
    33f6:	fa 81       	ldd	r31, Y+2	; 0x02
    33f8:	82 81       	ldd	r24, Z+2	; 0x02
    33fa:	93 81       	ldd	r25, Z+3	; 0x03
    33fc:	01 96       	adiw	r24, 0x01	; 1
    33fe:	11 96       	adiw	r26, 0x01	; 1
    3400:	9c 93       	st	X, r25
    3402:	8e 93       	st	-X, r24
							TIMER1_OUTPUT_COMPARE_REGISTER_B = ((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF;
    3404:	a8 e4       	ldi	r26, 0x48	; 72
    3406:	b0 e0       	ldi	r27, 0x00	; 0
    3408:	e9 81       	ldd	r30, Y+1	; 0x01
    340a:	fa 81       	ldd	r31, Y+2	; 0x02
    340c:	82 81       	ldd	r24, Z+2	; 0x02
    340e:	93 81       	ldd	r25, Z+3	; 0x03
    3410:	11 96       	adiw	r26, 0x01	; 1
    3412:	9c 93       	st	X, r25
    3414:	8e 93       	st	-X, r24
							 * Enable Timer1 compare match interrupt
							 * wait for: -Enable I-bit "mask bit" in the SREG register
							 *           -OCF1 bit in the TIFR register to be set
							 * Timer1 compare match mode is ready to work after that
							 */
							TIMER1_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER1_INTERRUPT_MASK_REGISTER,TIMER1_OUTPUT_COMPARE_MATCH_INTERRUPT_B);
    3416:	29 e5       	ldi	r18, 0x59	; 89
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	a9 e5       	ldi	r26, 0x59	; 89
    341c:	b0 e0       	ldi	r27, 0x00	; 0
    341e:	e9 e5       	ldi	r30, 0x59	; 89
    3420:	f0 e0       	ldi	r31, 0x00	; 0
    3422:	80 81       	ld	r24, Z
    3424:	88 60       	ori	r24, 0x08	; 8
    3426:	8c 93       	st	X, r24
    3428:	8c 91       	ld	r24, X
    342a:	f9 01       	movw	r30, r18
    342c:	80 83       	st	Z, r24
    342e:	0c 94 24 23 	jmp	0x4648	; 0x4648 <Timer1_Init+0x1c04>
							/*
							 * Configure wave form generation mode to work with FAST_PWM_8bit mode
							 * Set WGM10 bit in TCCR1A register
							 * Clear WGM11 bit in TCCR1A register
							 */
							TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT10);
    3432:	2f e4       	ldi	r18, 0x4F	; 79
    3434:	30 e0       	ldi	r19, 0x00	; 0
    3436:	af e4       	ldi	r26, 0x4F	; 79
    3438:	b0 e0       	ldi	r27, 0x00	; 0
    343a:	ef e4       	ldi	r30, 0x4F	; 79
    343c:	f0 e0       	ldi	r31, 0x00	; 0
    343e:	80 81       	ld	r24, Z
    3440:	91 81       	ldd	r25, Z+1	; 0x01
    3442:	81 60       	ori	r24, 0x01	; 1
    3444:	11 96       	adiw	r26, 0x01	; 1
    3446:	9c 93       	st	X, r25
    3448:	8e 93       	st	-X, r24
    344a:	8d 91       	ld	r24, X+
    344c:	9c 91       	ld	r25, X
    344e:	f9 01       	movw	r30, r18
    3450:	91 83       	std	Z+1, r25	; 0x01
    3452:	80 83       	st	Z, r24
							TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT11);
    3454:	2f e4       	ldi	r18, 0x4F	; 79
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	af e4       	ldi	r26, 0x4F	; 79
    345a:	b0 e0       	ldi	r27, 0x00	; 0
    345c:	ef e4       	ldi	r30, 0x4F	; 79
    345e:	f0 e0       	ldi	r31, 0x00	; 0
    3460:	80 81       	ld	r24, Z
    3462:	91 81       	ldd	r25, Z+1	; 0x01
    3464:	8d 7f       	andi	r24, 0xFD	; 253
    3466:	11 96       	adiw	r26, 0x01	; 1
    3468:	9c 93       	st	X, r25
    346a:	8e 93       	st	-X, r24
    346c:	8d 91       	ld	r24, X+
    346e:	9c 91       	ld	r25, X
    3470:	f9 01       	movw	r30, r18
    3472:	91 83       	std	Z+1, r25	; 0x01
    3474:	80 83       	st	Z, r24
							/*
							 * Configure wave form generation mode to work with FAST_PWM_8bit mode
							 * Set WGM12 bit in TCCR1B register
							 * Clear WMG13 bit in TCCR1B register
							 */
							TIMER1_CONTROL_REGIRSTER_B =  SET_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT12);
    3476:	2e e4       	ldi	r18, 0x4E	; 78
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	ae e4       	ldi	r26, 0x4E	; 78
    347c:	b0 e0       	ldi	r27, 0x00	; 0
    347e:	ee e4       	ldi	r30, 0x4E	; 78
    3480:	f0 e0       	ldi	r31, 0x00	; 0
    3482:	80 81       	ld	r24, Z
    3484:	91 81       	ldd	r25, Z+1	; 0x01
    3486:	88 60       	ori	r24, 0x08	; 8
    3488:	11 96       	adiw	r26, 0x01	; 1
    348a:	9c 93       	st	X, r25
    348c:	8e 93       	st	-X, r24
    348e:	8d 91       	ld	r24, X+
    3490:	9c 91       	ld	r25, X
    3492:	f9 01       	movw	r30, r18
    3494:	91 83       	std	Z+1, r25	; 0x01
    3496:	80 83       	st	Z, r24
							TIMER1_CONTROL_REGIRSTER_B =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT13);
    3498:	2e e4       	ldi	r18, 0x4E	; 78
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	ae e4       	ldi	r26, 0x4E	; 78
    349e:	b0 e0       	ldi	r27, 0x00	; 0
    34a0:	ee e4       	ldi	r30, 0x4E	; 78
    34a2:	f0 e0       	ldi	r31, 0x00	; 0
    34a4:	80 81       	ld	r24, Z
    34a6:	91 81       	ldd	r25, Z+1	; 0x01
    34a8:	8f 7e       	andi	r24, 0xEF	; 239
    34aa:	11 96       	adiw	r26, 0x01	; 1
    34ac:	9c 93       	st	X, r25
    34ae:	8e 93       	st	-X, r24
    34b0:	8d 91       	ld	r24, X+
    34b2:	9c 91       	ld	r25, X
    34b4:	11 97       	sbiw	r26, 0x01	; 1
    34b6:	f9 01       	movw	r30, r18
    34b8:	91 83       	std	Z+1, r25	; 0x01
    34ba:	80 83       	st	Z, r24

							switch(Timer1_config_PTR->channel)
    34bc:	e9 81       	ldd	r30, Y+1	; 0x01
    34be:	fa 81       	ldd	r31, Y+2	; 0x02
    34c0:	80 85       	ldd	r24, Z+8	; 0x08
    34c2:	28 2f       	mov	r18, r24
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	3e 8b       	std	Y+22, r19	; 0x16
    34c8:	2d 8b       	std	Y+21, r18	; 0x15
    34ca:	8d 89       	ldd	r24, Y+21	; 0x15
    34cc:	9e 89       	ldd	r25, Y+22	; 0x16
    34ce:	00 97       	sbiw	r24, 0x00	; 0
    34d0:	41 f0       	breq	.+16     	; 0x34e2 <Timer1_Init+0xa9e>
    34d2:	ed 89       	ldd	r30, Y+21	; 0x15
    34d4:	fe 89       	ldd	r31, Y+22	; 0x16
    34d6:	e1 30       	cpi	r30, 0x01	; 1
    34d8:	f1 05       	cpc	r31, r1
    34da:	09 f4       	brne	.+2      	; 0x34de <Timer1_Init+0xa9a>
    34dc:	46 c0       	rjmp	.+140    	; 0x356a <Timer1_Init+0xb26>
    34de:	0c 94 24 23 	jmp	0x4648	; 0x4648 <Timer1_Init+0x1c04>
							case ChannelA:
								/*
								 * Configure OC1A as Output PIN
								 * the pin where the PWM signal is generated from MC
								 */
								OC1A_DIRECTION_PORT = SET_BIT(OC1A_DIRECTION_PORT, OC1A_PIN);
    34e2:	21 e3       	ldi	r18, 0x31	; 49
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	a1 e3       	ldi	r26, 0x31	; 49
    34e8:	b0 e0       	ldi	r27, 0x00	; 0
    34ea:	e1 e3       	ldi	r30, 0x31	; 49
    34ec:	f0 e0       	ldi	r31, 0x00	; 0
    34ee:	80 81       	ld	r24, Z
    34f0:	80 62       	ori	r24, 0x20	; 32
    34f2:	8c 93       	st	X, r24
    34f4:	8c 91       	ld	r24, X
    34f6:	f9 01       	movw	r30, r18
    34f8:	80 83       	st	Z, r24
								/*
								 * Configure FOC1A bit in the TCCR1 register to be low
								 * As Timer1 is PWM mode
								 * Make FOC1A to be low as it is FAST_PWM_8bit mode
								 */
								TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    34fa:	2f e4       	ldi	r18, 0x4F	; 79
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	af e4       	ldi	r26, 0x4F	; 79
    3500:	b0 e0       	ldi	r27, 0x00	; 0
    3502:	ef e4       	ldi	r30, 0x4F	; 79
    3504:	f0 e0       	ldi	r31, 0x00	; 0
    3506:	80 81       	ld	r24, Z
    3508:	91 81       	ldd	r25, Z+1	; 0x01
    350a:	87 7f       	andi	r24, 0xF7	; 247
    350c:	11 96       	adiw	r26, 0x01	; 1
    350e:	9c 93       	st	X, r25
    3510:	8e 93       	st	-X, r24
    3512:	8d 91       	ld	r24, X+
    3514:	9c 91       	ld	r25, X
    3516:	f9 01       	movw	r30, r18
    3518:	91 83       	std	Z+1, r25	; 0x01
    351a:	80 83       	st	Z, r24
								/*
								 * Configure compare output mode to work with Timer1
								 * with one mode from 4 modes in TCCR1A
								 * Configure COM1A0/COM1A1 bits in TCCR1A register
								 */
								TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1A_MASK_CLEAR) |
    351c:	af e4       	ldi	r26, 0x4F	; 79
    351e:	b0 e0       	ldi	r27, 0x00	; 0
    3520:	ef e4       	ldi	r30, 0x4F	; 79
    3522:	f0 e0       	ldi	r31, 0x00	; 0
    3524:	80 81       	ld	r24, Z
    3526:	91 81       	ldd	r25, Z+1	; 0x01
    3528:	9c 01       	movw	r18, r24
    352a:	2f 73       	andi	r18, 0x3F	; 63
    352c:	30 70       	andi	r19, 0x00	; 0
    352e:	e9 81       	ldd	r30, Y+1	; 0x01
    3530:	fa 81       	ldd	r31, Y+2	; 0x02
    3532:	82 85       	ldd	r24, Z+10	; 0x0a
    3534:	88 2f       	mov	r24, r24
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	00 24       	eor	r0, r0
    353a:	96 95       	lsr	r25
    353c:	87 95       	ror	r24
    353e:	07 94       	ror	r0
    3540:	96 95       	lsr	r25
    3542:	87 95       	ror	r24
    3544:	07 94       	ror	r0
    3546:	98 2f       	mov	r25, r24
    3548:	80 2d       	mov	r24, r0
    354a:	82 2b       	or	r24, r18
    354c:	93 2b       	or	r25, r19
    354e:	11 96       	adiw	r26, 0x01	; 1
    3550:	9c 93       	st	X, r25
    3552:	8e 93       	st	-X, r24
								/*
								 * Configure Compare match value for Timer1 to start count from it
								 * Anding with 0XFFFF to make sure the value won't exceed
								 * OXFFFF as it is 16-bit Timer
								 */
								TIMER1_OUTPUT_COMPARE_REGISTER_A = ((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF;
    3554:	aa e4       	ldi	r26, 0x4A	; 74
    3556:	b0 e0       	ldi	r27, 0x00	; 0
    3558:	e9 81       	ldd	r30, Y+1	; 0x01
    355a:	fa 81       	ldd	r31, Y+2	; 0x02
    355c:	82 81       	ldd	r24, Z+2	; 0x02
    355e:	93 81       	ldd	r25, Z+3	; 0x03
    3560:	11 96       	adiw	r26, 0x01	; 1
    3562:	9c 93       	st	X, r25
    3564:	8e 93       	st	-X, r24
    3566:	0c 94 24 23 	jmp	0x4648	; 0x4648 <Timer1_Init+0x1c04>
							case ChannelB:
								/*
								 * Configure OC1A as Output PIN
								 * the pin where the PWM signal is generated from MC
								 */
								OC1B_DIRECTION_PORT = SET_BIT(OC1B_DIRECTION_PORT, OC1B_PIN);
    356a:	21 e3       	ldi	r18, 0x31	; 49
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	a1 e3       	ldi	r26, 0x31	; 49
    3570:	b0 e0       	ldi	r27, 0x00	; 0
    3572:	e1 e3       	ldi	r30, 0x31	; 49
    3574:	f0 e0       	ldi	r31, 0x00	; 0
    3576:	80 81       	ld	r24, Z
    3578:	80 61       	ori	r24, 0x10	; 16
    357a:	8c 93       	st	X, r24
    357c:	8c 91       	ld	r24, X
    357e:	f9 01       	movw	r30, r18
    3580:	80 83       	st	Z, r24
								/*
								 * Configure FOC1B bit in the TCCR1 register to be low
								 * As Timer1 is PWM
								 * Make FOC1B to be low as it is FAST_PWM_8bit mode
								 */
								TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    3582:	2f e4       	ldi	r18, 0x4F	; 79
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	af e4       	ldi	r26, 0x4F	; 79
    3588:	b0 e0       	ldi	r27, 0x00	; 0
    358a:	ef e4       	ldi	r30, 0x4F	; 79
    358c:	f0 e0       	ldi	r31, 0x00	; 0
    358e:	80 81       	ld	r24, Z
    3590:	91 81       	ldd	r25, Z+1	; 0x01
    3592:	8b 7f       	andi	r24, 0xFB	; 251
    3594:	11 96       	adiw	r26, 0x01	; 1
    3596:	9c 93       	st	X, r25
    3598:	8e 93       	st	-X, r24
    359a:	8d 91       	ld	r24, X+
    359c:	9c 91       	ld	r25, X
    359e:	f9 01       	movw	r30, r18
    35a0:	91 83       	std	Z+1, r25	; 0x01
    35a2:	80 83       	st	Z, r24
								/*
								 * Configure compare output mode to work with Timer1
								 * with one mode from 4 modes in TCCR1A
								 * Configure COM1B0/COM1B1 bits in TCCR1A register
								 */
								TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1B_MASK_CLEAR) |
    35a4:	af e4       	ldi	r26, 0x4F	; 79
    35a6:	b0 e0       	ldi	r27, 0x00	; 0
    35a8:	ef e4       	ldi	r30, 0x4F	; 79
    35aa:	f0 e0       	ldi	r31, 0x00	; 0
    35ac:	80 81       	ld	r24, Z
    35ae:	91 81       	ldd	r25, Z+1	; 0x01
    35b0:	9c 01       	movw	r18, r24
    35b2:	2f 7c       	andi	r18, 0xCF	; 207
    35b4:	30 70       	andi	r19, 0x00	; 0
    35b6:	e9 81       	ldd	r30, Y+1	; 0x01
    35b8:	fa 81       	ldd	r31, Y+2	; 0x02
    35ba:	82 85       	ldd	r24, Z+10	; 0x0a
    35bc:	88 2f       	mov	r24, r24
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	82 95       	swap	r24
    35c2:	92 95       	swap	r25
    35c4:	90 7f       	andi	r25, 0xF0	; 240
    35c6:	98 27       	eor	r25, r24
    35c8:	80 7f       	andi	r24, 0xF0	; 240
    35ca:	98 27       	eor	r25, r24
    35cc:	82 2b       	or	r24, r18
    35ce:	93 2b       	or	r25, r19
    35d0:	11 96       	adiw	r26, 0x01	; 1
    35d2:	9c 93       	st	X, r25
    35d4:	8e 93       	st	-X, r24
								 * Configure Compare match value for Timer1 to start count from it
								 * Anding with 0XFFFF to make sure the value won't exceed
								 * OXFFFF as it is 16-bit Timer
								 * to make it count right put OCR1A  greater than the value in OCR1B by 1
								 */
								TIMER1_OUTPUT_COMPARE_REGISTER_A = (((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF) + 1;
    35d6:	aa e4       	ldi	r26, 0x4A	; 74
    35d8:	b0 e0       	ldi	r27, 0x00	; 0
    35da:	e9 81       	ldd	r30, Y+1	; 0x01
    35dc:	fa 81       	ldd	r31, Y+2	; 0x02
    35de:	82 81       	ldd	r24, Z+2	; 0x02
    35e0:	93 81       	ldd	r25, Z+3	; 0x03
    35e2:	01 96       	adiw	r24, 0x01	; 1
    35e4:	11 96       	adiw	r26, 0x01	; 1
    35e6:	9c 93       	st	X, r25
    35e8:	8e 93       	st	-X, r24
								TIMER1_OUTPUT_COMPARE_REGISTER_B = ((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF;
    35ea:	a8 e4       	ldi	r26, 0x48	; 72
    35ec:	b0 e0       	ldi	r27, 0x00	; 0
    35ee:	e9 81       	ldd	r30, Y+1	; 0x01
    35f0:	fa 81       	ldd	r31, Y+2	; 0x02
    35f2:	82 81       	ldd	r24, Z+2	; 0x02
    35f4:	93 81       	ldd	r25, Z+3	; 0x03
    35f6:	11 96       	adiw	r26, 0x01	; 1
    35f8:	9c 93       	st	X, r25
    35fa:	8e 93       	st	-X, r24
    35fc:	0c 94 24 23 	jmp	0x4648	; 0x4648 <Timer1_Init+0x1c04>
								/*
								 * Configure wave form generation mode to work with FAST_PWM_9bit mode
								 * Clear WGM10 bit in TCCR1A register
								 * Set WGM11 bit in TCCR1A register
								 */
								TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT10);
    3600:	2f e4       	ldi	r18, 0x4F	; 79
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	af e4       	ldi	r26, 0x4F	; 79
    3606:	b0 e0       	ldi	r27, 0x00	; 0
    3608:	ef e4       	ldi	r30, 0x4F	; 79
    360a:	f0 e0       	ldi	r31, 0x00	; 0
    360c:	80 81       	ld	r24, Z
    360e:	91 81       	ldd	r25, Z+1	; 0x01
    3610:	8e 7f       	andi	r24, 0xFE	; 254
    3612:	11 96       	adiw	r26, 0x01	; 1
    3614:	9c 93       	st	X, r25
    3616:	8e 93       	st	-X, r24
    3618:	8d 91       	ld	r24, X+
    361a:	9c 91       	ld	r25, X
    361c:	f9 01       	movw	r30, r18
    361e:	91 83       	std	Z+1, r25	; 0x01
    3620:	80 83       	st	Z, r24
								TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT11);
    3622:	2f e4       	ldi	r18, 0x4F	; 79
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	af e4       	ldi	r26, 0x4F	; 79
    3628:	b0 e0       	ldi	r27, 0x00	; 0
    362a:	ef e4       	ldi	r30, 0x4F	; 79
    362c:	f0 e0       	ldi	r31, 0x00	; 0
    362e:	80 81       	ld	r24, Z
    3630:	91 81       	ldd	r25, Z+1	; 0x01
    3632:	82 60       	ori	r24, 0x02	; 2
    3634:	11 96       	adiw	r26, 0x01	; 1
    3636:	9c 93       	st	X, r25
    3638:	8e 93       	st	-X, r24
    363a:	8d 91       	ld	r24, X+
    363c:	9c 91       	ld	r25, X
    363e:	f9 01       	movw	r30, r18
    3640:	91 83       	std	Z+1, r25	; 0x01
    3642:	80 83       	st	Z, r24
								/*
								 * Configure wave form generation mode to work with FAST_PWM_9bit mode
								 * Set WGM12 bit in TCCR1B register
								 * Clear WMG13 bit in TCCR1B register
								 */
								TIMER1_CONTROL_REGIRSTER_B =  SET_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT12);
    3644:	2e e4       	ldi	r18, 0x4E	; 78
    3646:	30 e0       	ldi	r19, 0x00	; 0
    3648:	ae e4       	ldi	r26, 0x4E	; 78
    364a:	b0 e0       	ldi	r27, 0x00	; 0
    364c:	ee e4       	ldi	r30, 0x4E	; 78
    364e:	f0 e0       	ldi	r31, 0x00	; 0
    3650:	80 81       	ld	r24, Z
    3652:	91 81       	ldd	r25, Z+1	; 0x01
    3654:	88 60       	ori	r24, 0x08	; 8
    3656:	11 96       	adiw	r26, 0x01	; 1
    3658:	9c 93       	st	X, r25
    365a:	8e 93       	st	-X, r24
    365c:	8d 91       	ld	r24, X+
    365e:	9c 91       	ld	r25, X
    3660:	f9 01       	movw	r30, r18
    3662:	91 83       	std	Z+1, r25	; 0x01
    3664:	80 83       	st	Z, r24
								TIMER1_CONTROL_REGIRSTER_B =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT13);
    3666:	2e e4       	ldi	r18, 0x4E	; 78
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	ae e4       	ldi	r26, 0x4E	; 78
    366c:	b0 e0       	ldi	r27, 0x00	; 0
    366e:	ee e4       	ldi	r30, 0x4E	; 78
    3670:	f0 e0       	ldi	r31, 0x00	; 0
    3672:	80 81       	ld	r24, Z
    3674:	91 81       	ldd	r25, Z+1	; 0x01
    3676:	8f 7e       	andi	r24, 0xEF	; 239
    3678:	11 96       	adiw	r26, 0x01	; 1
    367a:	9c 93       	st	X, r25
    367c:	8e 93       	st	-X, r24
    367e:	8d 91       	ld	r24, X+
    3680:	9c 91       	ld	r25, X
    3682:	11 97       	sbiw	r26, 0x01	; 1
    3684:	f9 01       	movw	r30, r18
    3686:	91 83       	std	Z+1, r25	; 0x01
    3688:	80 83       	st	Z, r24

								switch(Timer1_config_PTR->channel)
    368a:	e9 81       	ldd	r30, Y+1	; 0x01
    368c:	fa 81       	ldd	r31, Y+2	; 0x02
    368e:	80 85       	ldd	r24, Z+8	; 0x08
    3690:	28 2f       	mov	r18, r24
    3692:	30 e0       	ldi	r19, 0x00	; 0
    3694:	3c 8b       	std	Y+20, r19	; 0x14
    3696:	2b 8b       	std	Y+19, r18	; 0x13
    3698:	8b 89       	ldd	r24, Y+19	; 0x13
    369a:	9c 89       	ldd	r25, Y+20	; 0x14
    369c:	00 97       	sbiw	r24, 0x00	; 0
    369e:	41 f0       	breq	.+16     	; 0x36b0 <Timer1_Init+0xc6c>
    36a0:	eb 89       	ldd	r30, Y+19	; 0x13
    36a2:	fc 89       	ldd	r31, Y+20	; 0x14
    36a4:	e1 30       	cpi	r30, 0x01	; 1
    36a6:	f1 05       	cpc	r31, r1
    36a8:	09 f4       	brne	.+2      	; 0x36ac <Timer1_Init+0xc68>
    36aa:	45 c0       	rjmp	.+138    	; 0x3736 <Timer1_Init+0xcf2>
    36ac:	0c 94 24 23 	jmp	0x4648	; 0x4648 <Timer1_Init+0x1c04>
								case ChannelA:
									/*
									 * Configure OC1A as Output PIN
									 * the pin where the PWM signal is generated from MC
									 */
									OC1A_DIRECTION_PORT = SET_BIT(OC1A_DIRECTION_PORT, OC1A_PIN);
    36b0:	21 e3       	ldi	r18, 0x31	; 49
    36b2:	30 e0       	ldi	r19, 0x00	; 0
    36b4:	a1 e3       	ldi	r26, 0x31	; 49
    36b6:	b0 e0       	ldi	r27, 0x00	; 0
    36b8:	e1 e3       	ldi	r30, 0x31	; 49
    36ba:	f0 e0       	ldi	r31, 0x00	; 0
    36bc:	80 81       	ld	r24, Z
    36be:	80 62       	ori	r24, 0x20	; 32
    36c0:	8c 93       	st	X, r24
    36c2:	8c 91       	ld	r24, X
    36c4:	f9 01       	movw	r30, r18
    36c6:	80 83       	st	Z, r24
									/*
									 * Configure FOC1A bit in the TCCR1 register to be low
									 * As Timer1 is PWM mode
									 * Make FOC1A to be low as it is FAST_PWM_9bit mode
									 */
									TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    36c8:	2f e4       	ldi	r18, 0x4F	; 79
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	af e4       	ldi	r26, 0x4F	; 79
    36ce:	b0 e0       	ldi	r27, 0x00	; 0
    36d0:	ef e4       	ldi	r30, 0x4F	; 79
    36d2:	f0 e0       	ldi	r31, 0x00	; 0
    36d4:	80 81       	ld	r24, Z
    36d6:	91 81       	ldd	r25, Z+1	; 0x01
    36d8:	87 7f       	andi	r24, 0xF7	; 247
    36da:	11 96       	adiw	r26, 0x01	; 1
    36dc:	9c 93       	st	X, r25
    36de:	8e 93       	st	-X, r24
    36e0:	8d 91       	ld	r24, X+
    36e2:	9c 91       	ld	r25, X
    36e4:	f9 01       	movw	r30, r18
    36e6:	91 83       	std	Z+1, r25	; 0x01
    36e8:	80 83       	st	Z, r24
									/*
									 * Configure compare output mode to work with Timer1
									 * with one mode from 4 modes in TCCR1A
									 * Configure COM1A0/COM1A1 bits in TCCR1A register
									 */
									TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1A_MASK_CLEAR) |
    36ea:	af e4       	ldi	r26, 0x4F	; 79
    36ec:	b0 e0       	ldi	r27, 0x00	; 0
    36ee:	ef e4       	ldi	r30, 0x4F	; 79
    36f0:	f0 e0       	ldi	r31, 0x00	; 0
    36f2:	80 81       	ld	r24, Z
    36f4:	91 81       	ldd	r25, Z+1	; 0x01
    36f6:	9c 01       	movw	r18, r24
    36f8:	2f 73       	andi	r18, 0x3F	; 63
    36fa:	30 70       	andi	r19, 0x00	; 0
    36fc:	e9 81       	ldd	r30, Y+1	; 0x01
    36fe:	fa 81       	ldd	r31, Y+2	; 0x02
    3700:	82 85       	ldd	r24, Z+10	; 0x0a
    3702:	88 2f       	mov	r24, r24
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	00 24       	eor	r0, r0
    3708:	96 95       	lsr	r25
    370a:	87 95       	ror	r24
    370c:	07 94       	ror	r0
    370e:	96 95       	lsr	r25
    3710:	87 95       	ror	r24
    3712:	07 94       	ror	r0
    3714:	98 2f       	mov	r25, r24
    3716:	80 2d       	mov	r24, r0
    3718:	82 2b       	or	r24, r18
    371a:	93 2b       	or	r25, r19
    371c:	11 96       	adiw	r26, 0x01	; 1
    371e:	9c 93       	st	X, r25
    3720:	8e 93       	st	-X, r24
									/*
									 * Configure Compare match value for Timer1 to start count from it
									 * Anding with 0XFFFF to make sure the value won't exceed
									 * OXFFFF as it is 16-bit Timer
									 */
									TIMER1_OUTPUT_COMPARE_REGISTER_A = ((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF;
    3722:	aa e4       	ldi	r26, 0x4A	; 74
    3724:	b0 e0       	ldi	r27, 0x00	; 0
    3726:	e9 81       	ldd	r30, Y+1	; 0x01
    3728:	fa 81       	ldd	r31, Y+2	; 0x02
    372a:	82 81       	ldd	r24, Z+2	; 0x02
    372c:	93 81       	ldd	r25, Z+3	; 0x03
    372e:	11 96       	adiw	r26, 0x01	; 1
    3730:	9c 93       	st	X, r25
    3732:	8e 93       	st	-X, r24
    3734:	89 c7       	rjmp	.+3858   	; 0x4648 <Timer1_Init+0x1c04>
								case ChannelB:
									/*
									 * Configure OC1A as Output PIN
									 * the pin where the PWM signal is generated from MC
									 */
									OC1B_DIRECTION_PORT = SET_BIT(OC1B_DIRECTION_PORT, OC1B_PIN);
    3736:	21 e3       	ldi	r18, 0x31	; 49
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	a1 e3       	ldi	r26, 0x31	; 49
    373c:	b0 e0       	ldi	r27, 0x00	; 0
    373e:	e1 e3       	ldi	r30, 0x31	; 49
    3740:	f0 e0       	ldi	r31, 0x00	; 0
    3742:	80 81       	ld	r24, Z
    3744:	80 61       	ori	r24, 0x10	; 16
    3746:	8c 93       	st	X, r24
    3748:	8c 91       	ld	r24, X
    374a:	f9 01       	movw	r30, r18
    374c:	80 83       	st	Z, r24
									/*
									 * Configure FOC1B bit in the TCCR1 register to be low
									 * As Timer1 is PWM
									 * Make FOC1B to be low as it is FAST_PWM_9bit mode
									 */
									TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    374e:	2f e4       	ldi	r18, 0x4F	; 79
    3750:	30 e0       	ldi	r19, 0x00	; 0
    3752:	af e4       	ldi	r26, 0x4F	; 79
    3754:	b0 e0       	ldi	r27, 0x00	; 0
    3756:	ef e4       	ldi	r30, 0x4F	; 79
    3758:	f0 e0       	ldi	r31, 0x00	; 0
    375a:	80 81       	ld	r24, Z
    375c:	91 81       	ldd	r25, Z+1	; 0x01
    375e:	8b 7f       	andi	r24, 0xFB	; 251
    3760:	11 96       	adiw	r26, 0x01	; 1
    3762:	9c 93       	st	X, r25
    3764:	8e 93       	st	-X, r24
    3766:	8d 91       	ld	r24, X+
    3768:	9c 91       	ld	r25, X
    376a:	f9 01       	movw	r30, r18
    376c:	91 83       	std	Z+1, r25	; 0x01
    376e:	80 83       	st	Z, r24
									/*
									 * Configure compare output mode to work with Timer1
									 * with one mode from 4 modes in TCCR1A
									 * Configure COM1B0/COM1B1 bits in TCCR1A register
									 */
									TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1B_MASK_CLEAR) |
    3770:	af e4       	ldi	r26, 0x4F	; 79
    3772:	b0 e0       	ldi	r27, 0x00	; 0
    3774:	ef e4       	ldi	r30, 0x4F	; 79
    3776:	f0 e0       	ldi	r31, 0x00	; 0
    3778:	80 81       	ld	r24, Z
    377a:	91 81       	ldd	r25, Z+1	; 0x01
    377c:	9c 01       	movw	r18, r24
    377e:	2f 7c       	andi	r18, 0xCF	; 207
    3780:	30 70       	andi	r19, 0x00	; 0
    3782:	e9 81       	ldd	r30, Y+1	; 0x01
    3784:	fa 81       	ldd	r31, Y+2	; 0x02
    3786:	82 85       	ldd	r24, Z+10	; 0x0a
    3788:	88 2f       	mov	r24, r24
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	82 95       	swap	r24
    378e:	92 95       	swap	r25
    3790:	90 7f       	andi	r25, 0xF0	; 240
    3792:	98 27       	eor	r25, r24
    3794:	80 7f       	andi	r24, 0xF0	; 240
    3796:	98 27       	eor	r25, r24
    3798:	82 2b       	or	r24, r18
    379a:	93 2b       	or	r25, r19
    379c:	11 96       	adiw	r26, 0x01	; 1
    379e:	9c 93       	st	X, r25
    37a0:	8e 93       	st	-X, r24
									 * Configure Compare match value for Timer1 to start count from it
									 * Anding with 0XFFFF to make sure the value won't exceed
									 * OXFFFF as it is 16-bit Timer
									 * to make it count right put OCR1A  greater than the value in OCR1B by 1
									 */
									TIMER1_OUTPUT_COMPARE_REGISTER_A = (((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF) + 1;
    37a2:	aa e4       	ldi	r26, 0x4A	; 74
    37a4:	b0 e0       	ldi	r27, 0x00	; 0
    37a6:	e9 81       	ldd	r30, Y+1	; 0x01
    37a8:	fa 81       	ldd	r31, Y+2	; 0x02
    37aa:	82 81       	ldd	r24, Z+2	; 0x02
    37ac:	93 81       	ldd	r25, Z+3	; 0x03
    37ae:	01 96       	adiw	r24, 0x01	; 1
    37b0:	11 96       	adiw	r26, 0x01	; 1
    37b2:	9c 93       	st	X, r25
    37b4:	8e 93       	st	-X, r24
									TIMER1_OUTPUT_COMPARE_REGISTER_B = ((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF;
    37b6:	a8 e4       	ldi	r26, 0x48	; 72
    37b8:	b0 e0       	ldi	r27, 0x00	; 0
    37ba:	e9 81       	ldd	r30, Y+1	; 0x01
    37bc:	fa 81       	ldd	r31, Y+2	; 0x02
    37be:	82 81       	ldd	r24, Z+2	; 0x02
    37c0:	93 81       	ldd	r25, Z+3	; 0x03
    37c2:	11 96       	adiw	r26, 0x01	; 1
    37c4:	9c 93       	st	X, r25
    37c6:	8e 93       	st	-X, r24
    37c8:	3f c7       	rjmp	.+3710   	; 0x4648 <Timer1_Init+0x1c04>
									/*
									 * Configure wave form generation mode to work with FAST_PWM_10bit mode
									 * Set WGM10 bit in TCCR1A register
									 * Set WGM11 bit in TCCR1A register
									 */
									TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT10);
    37ca:	2f e4       	ldi	r18, 0x4F	; 79
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	af e4       	ldi	r26, 0x4F	; 79
    37d0:	b0 e0       	ldi	r27, 0x00	; 0
    37d2:	ef e4       	ldi	r30, 0x4F	; 79
    37d4:	f0 e0       	ldi	r31, 0x00	; 0
    37d6:	80 81       	ld	r24, Z
    37d8:	91 81       	ldd	r25, Z+1	; 0x01
    37da:	81 60       	ori	r24, 0x01	; 1
    37dc:	11 96       	adiw	r26, 0x01	; 1
    37de:	9c 93       	st	X, r25
    37e0:	8e 93       	st	-X, r24
    37e2:	8d 91       	ld	r24, X+
    37e4:	9c 91       	ld	r25, X
    37e6:	f9 01       	movw	r30, r18
    37e8:	91 83       	std	Z+1, r25	; 0x01
    37ea:	80 83       	st	Z, r24
									TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT11);
    37ec:	2f e4       	ldi	r18, 0x4F	; 79
    37ee:	30 e0       	ldi	r19, 0x00	; 0
    37f0:	af e4       	ldi	r26, 0x4F	; 79
    37f2:	b0 e0       	ldi	r27, 0x00	; 0
    37f4:	ef e4       	ldi	r30, 0x4F	; 79
    37f6:	f0 e0       	ldi	r31, 0x00	; 0
    37f8:	80 81       	ld	r24, Z
    37fa:	91 81       	ldd	r25, Z+1	; 0x01
    37fc:	82 60       	ori	r24, 0x02	; 2
    37fe:	11 96       	adiw	r26, 0x01	; 1
    3800:	9c 93       	st	X, r25
    3802:	8e 93       	st	-X, r24
    3804:	8d 91       	ld	r24, X+
    3806:	9c 91       	ld	r25, X
    3808:	f9 01       	movw	r30, r18
    380a:	91 83       	std	Z+1, r25	; 0x01
    380c:	80 83       	st	Z, r24
									/*
									 * Configure wave form generation mode to work with FAST_PWM_10bit mode
									 * Set WGM12 bit in TCCR1B register
									 * Clear WMG13 bit in TCCR1B register
									 */
									TIMER1_CONTROL_REGIRSTER_B =  SET_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT12);
    380e:	2e e4       	ldi	r18, 0x4E	; 78
    3810:	30 e0       	ldi	r19, 0x00	; 0
    3812:	ae e4       	ldi	r26, 0x4E	; 78
    3814:	b0 e0       	ldi	r27, 0x00	; 0
    3816:	ee e4       	ldi	r30, 0x4E	; 78
    3818:	f0 e0       	ldi	r31, 0x00	; 0
    381a:	80 81       	ld	r24, Z
    381c:	91 81       	ldd	r25, Z+1	; 0x01
    381e:	88 60       	ori	r24, 0x08	; 8
    3820:	11 96       	adiw	r26, 0x01	; 1
    3822:	9c 93       	st	X, r25
    3824:	8e 93       	st	-X, r24
    3826:	8d 91       	ld	r24, X+
    3828:	9c 91       	ld	r25, X
    382a:	f9 01       	movw	r30, r18
    382c:	91 83       	std	Z+1, r25	; 0x01
    382e:	80 83       	st	Z, r24
									TIMER1_CONTROL_REGIRSTER_B =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT13);
    3830:	2e e4       	ldi	r18, 0x4E	; 78
    3832:	30 e0       	ldi	r19, 0x00	; 0
    3834:	ae e4       	ldi	r26, 0x4E	; 78
    3836:	b0 e0       	ldi	r27, 0x00	; 0
    3838:	ee e4       	ldi	r30, 0x4E	; 78
    383a:	f0 e0       	ldi	r31, 0x00	; 0
    383c:	80 81       	ld	r24, Z
    383e:	91 81       	ldd	r25, Z+1	; 0x01
    3840:	8f 7e       	andi	r24, 0xEF	; 239
    3842:	11 96       	adiw	r26, 0x01	; 1
    3844:	9c 93       	st	X, r25
    3846:	8e 93       	st	-X, r24
    3848:	8d 91       	ld	r24, X+
    384a:	9c 91       	ld	r25, X
    384c:	11 97       	sbiw	r26, 0x01	; 1
    384e:	f9 01       	movw	r30, r18
    3850:	91 83       	std	Z+1, r25	; 0x01
    3852:	80 83       	st	Z, r24

									switch(Timer1_config_PTR->channel)
    3854:	e9 81       	ldd	r30, Y+1	; 0x01
    3856:	fa 81       	ldd	r31, Y+2	; 0x02
    3858:	80 85       	ldd	r24, Z+8	; 0x08
    385a:	28 2f       	mov	r18, r24
    385c:	30 e0       	ldi	r19, 0x00	; 0
    385e:	3a 8b       	std	Y+18, r19	; 0x12
    3860:	29 8b       	std	Y+17, r18	; 0x11
    3862:	89 89       	ldd	r24, Y+17	; 0x11
    3864:	9a 89       	ldd	r25, Y+18	; 0x12
    3866:	00 97       	sbiw	r24, 0x00	; 0
    3868:	39 f0       	breq	.+14     	; 0x3878 <Timer1_Init+0xe34>
    386a:	e9 89       	ldd	r30, Y+17	; 0x11
    386c:	fa 89       	ldd	r31, Y+18	; 0x12
    386e:	e1 30       	cpi	r30, 0x01	; 1
    3870:	f1 05       	cpc	r31, r1
    3872:	09 f4       	brne	.+2      	; 0x3876 <Timer1_Init+0xe32>
    3874:	44 c0       	rjmp	.+136    	; 0x38fe <Timer1_Init+0xeba>
    3876:	e8 c6       	rjmp	.+3536   	; 0x4648 <Timer1_Init+0x1c04>
									case ChannelA:
										/*
										 * Configure OC1A as Output PIN
										 * the pin where the PWM signal is generated from MC
										 */
										OC1A_DIRECTION_PORT = SET_BIT(OC1A_DIRECTION_PORT, OC1A_PIN);
    3878:	21 e3       	ldi	r18, 0x31	; 49
    387a:	30 e0       	ldi	r19, 0x00	; 0
    387c:	a1 e3       	ldi	r26, 0x31	; 49
    387e:	b0 e0       	ldi	r27, 0x00	; 0
    3880:	e1 e3       	ldi	r30, 0x31	; 49
    3882:	f0 e0       	ldi	r31, 0x00	; 0
    3884:	80 81       	ld	r24, Z
    3886:	80 62       	ori	r24, 0x20	; 32
    3888:	8c 93       	st	X, r24
    388a:	8c 91       	ld	r24, X
    388c:	f9 01       	movw	r30, r18
    388e:	80 83       	st	Z, r24
										/*
										 * Configure FOC1A bit in the TCCR1 register to be low
										 * As Timer1 is PWM mode
										 * Make FOC1A to be low as it is FAST_PWM_10bit mode
										 */
										TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    3890:	2f e4       	ldi	r18, 0x4F	; 79
    3892:	30 e0       	ldi	r19, 0x00	; 0
    3894:	af e4       	ldi	r26, 0x4F	; 79
    3896:	b0 e0       	ldi	r27, 0x00	; 0
    3898:	ef e4       	ldi	r30, 0x4F	; 79
    389a:	f0 e0       	ldi	r31, 0x00	; 0
    389c:	80 81       	ld	r24, Z
    389e:	91 81       	ldd	r25, Z+1	; 0x01
    38a0:	87 7f       	andi	r24, 0xF7	; 247
    38a2:	11 96       	adiw	r26, 0x01	; 1
    38a4:	9c 93       	st	X, r25
    38a6:	8e 93       	st	-X, r24
    38a8:	8d 91       	ld	r24, X+
    38aa:	9c 91       	ld	r25, X
    38ac:	f9 01       	movw	r30, r18
    38ae:	91 83       	std	Z+1, r25	; 0x01
    38b0:	80 83       	st	Z, r24
										/*
										 * Configure compare output mode to work with Timer1
										 * with one mode from 4 modes in TCCR1A
										 * Configure COM1A0/COM1A1 bits in TCCR1A register
										 */
										TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1A_MASK_CLEAR) |
    38b2:	af e4       	ldi	r26, 0x4F	; 79
    38b4:	b0 e0       	ldi	r27, 0x00	; 0
    38b6:	ef e4       	ldi	r30, 0x4F	; 79
    38b8:	f0 e0       	ldi	r31, 0x00	; 0
    38ba:	80 81       	ld	r24, Z
    38bc:	91 81       	ldd	r25, Z+1	; 0x01
    38be:	9c 01       	movw	r18, r24
    38c0:	2f 73       	andi	r18, 0x3F	; 63
    38c2:	30 70       	andi	r19, 0x00	; 0
    38c4:	e9 81       	ldd	r30, Y+1	; 0x01
    38c6:	fa 81       	ldd	r31, Y+2	; 0x02
    38c8:	82 85       	ldd	r24, Z+10	; 0x0a
    38ca:	88 2f       	mov	r24, r24
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	00 24       	eor	r0, r0
    38d0:	96 95       	lsr	r25
    38d2:	87 95       	ror	r24
    38d4:	07 94       	ror	r0
    38d6:	96 95       	lsr	r25
    38d8:	87 95       	ror	r24
    38da:	07 94       	ror	r0
    38dc:	98 2f       	mov	r25, r24
    38de:	80 2d       	mov	r24, r0
    38e0:	82 2b       	or	r24, r18
    38e2:	93 2b       	or	r25, r19
    38e4:	11 96       	adiw	r26, 0x01	; 1
    38e6:	9c 93       	st	X, r25
    38e8:	8e 93       	st	-X, r24
										/*
										 * Configure Compare match value for Timer1 to start count from it
										 * Anding with 0XFFFF to make sure the value won't exceed
										 * OXFFFF as it is 16-bit Timer
										 */
										TIMER1_OUTPUT_COMPARE_REGISTER_A = ((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF;
    38ea:	aa e4       	ldi	r26, 0x4A	; 74
    38ec:	b0 e0       	ldi	r27, 0x00	; 0
    38ee:	e9 81       	ldd	r30, Y+1	; 0x01
    38f0:	fa 81       	ldd	r31, Y+2	; 0x02
    38f2:	82 81       	ldd	r24, Z+2	; 0x02
    38f4:	93 81       	ldd	r25, Z+3	; 0x03
    38f6:	11 96       	adiw	r26, 0x01	; 1
    38f8:	9c 93       	st	X, r25
    38fa:	8e 93       	st	-X, r24
    38fc:	a5 c6       	rjmp	.+3402   	; 0x4648 <Timer1_Init+0x1c04>
									case ChannelB:
										/*
										 * Configure OC1A as Output PIN
										 * the pin where the PWM signal is generated from MC
										 */
										OC1B_DIRECTION_PORT = SET_BIT(OC1B_DIRECTION_PORT, OC1B_PIN);
    38fe:	21 e3       	ldi	r18, 0x31	; 49
    3900:	30 e0       	ldi	r19, 0x00	; 0
    3902:	a1 e3       	ldi	r26, 0x31	; 49
    3904:	b0 e0       	ldi	r27, 0x00	; 0
    3906:	e1 e3       	ldi	r30, 0x31	; 49
    3908:	f0 e0       	ldi	r31, 0x00	; 0
    390a:	80 81       	ld	r24, Z
    390c:	80 61       	ori	r24, 0x10	; 16
    390e:	8c 93       	st	X, r24
    3910:	8c 91       	ld	r24, X
    3912:	f9 01       	movw	r30, r18
    3914:	80 83       	st	Z, r24
										/*
										 * Configure FOC1B bit in the TCCR1 register to be low
										 * As Timer1 is PWM
										 * Make FOC1B to be low as it is FAST_PWM_10bit mode
										 */
										TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    3916:	2f e4       	ldi	r18, 0x4F	; 79
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	af e4       	ldi	r26, 0x4F	; 79
    391c:	b0 e0       	ldi	r27, 0x00	; 0
    391e:	ef e4       	ldi	r30, 0x4F	; 79
    3920:	f0 e0       	ldi	r31, 0x00	; 0
    3922:	80 81       	ld	r24, Z
    3924:	91 81       	ldd	r25, Z+1	; 0x01
    3926:	8b 7f       	andi	r24, 0xFB	; 251
    3928:	11 96       	adiw	r26, 0x01	; 1
    392a:	9c 93       	st	X, r25
    392c:	8e 93       	st	-X, r24
    392e:	8d 91       	ld	r24, X+
    3930:	9c 91       	ld	r25, X
    3932:	f9 01       	movw	r30, r18
    3934:	91 83       	std	Z+1, r25	; 0x01
    3936:	80 83       	st	Z, r24
										/*
										 * Configure compare output mode to work with Timer1
										 * with one mode from 4 modes in TCCR1A
										 * Configure COM1B0/COM1B1 bits in TCCR1A register
										 */
										TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1B_MASK_CLEAR) |
    3938:	af e4       	ldi	r26, 0x4F	; 79
    393a:	b0 e0       	ldi	r27, 0x00	; 0
    393c:	ef e4       	ldi	r30, 0x4F	; 79
    393e:	f0 e0       	ldi	r31, 0x00	; 0
    3940:	80 81       	ld	r24, Z
    3942:	91 81       	ldd	r25, Z+1	; 0x01
    3944:	9c 01       	movw	r18, r24
    3946:	2f 7c       	andi	r18, 0xCF	; 207
    3948:	30 70       	andi	r19, 0x00	; 0
    394a:	e9 81       	ldd	r30, Y+1	; 0x01
    394c:	fa 81       	ldd	r31, Y+2	; 0x02
    394e:	82 85       	ldd	r24, Z+10	; 0x0a
    3950:	88 2f       	mov	r24, r24
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	82 95       	swap	r24
    3956:	92 95       	swap	r25
    3958:	90 7f       	andi	r25, 0xF0	; 240
    395a:	98 27       	eor	r25, r24
    395c:	80 7f       	andi	r24, 0xF0	; 240
    395e:	98 27       	eor	r25, r24
    3960:	82 2b       	or	r24, r18
    3962:	93 2b       	or	r25, r19
    3964:	11 96       	adiw	r26, 0x01	; 1
    3966:	9c 93       	st	X, r25
    3968:	8e 93       	st	-X, r24
										 * Configure Compare match value for Timer1 to start count from it
										 * Anding with 0XFFFF to make sure the value won't exceed
										 * OXFFFF as it is 16-bit Timer
										 * to make it count right put OCR1A  greater than the value in OCR1B by 1
										 */
										TIMER1_OUTPUT_COMPARE_REGISTER_A = (((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF) + 1;
    396a:	aa e4       	ldi	r26, 0x4A	; 74
    396c:	b0 e0       	ldi	r27, 0x00	; 0
    396e:	e9 81       	ldd	r30, Y+1	; 0x01
    3970:	fa 81       	ldd	r31, Y+2	; 0x02
    3972:	82 81       	ldd	r24, Z+2	; 0x02
    3974:	93 81       	ldd	r25, Z+3	; 0x03
    3976:	01 96       	adiw	r24, 0x01	; 1
    3978:	11 96       	adiw	r26, 0x01	; 1
    397a:	9c 93       	st	X, r25
    397c:	8e 93       	st	-X, r24
										TIMER1_OUTPUT_COMPARE_REGISTER_B = ((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF;
    397e:	a8 e4       	ldi	r26, 0x48	; 72
    3980:	b0 e0       	ldi	r27, 0x00	; 0
    3982:	e9 81       	ldd	r30, Y+1	; 0x01
    3984:	fa 81       	ldd	r31, Y+2	; 0x02
    3986:	82 81       	ldd	r24, Z+2	; 0x02
    3988:	93 81       	ldd	r25, Z+3	; 0x03
    398a:	11 96       	adiw	r26, 0x01	; 1
    398c:	9c 93       	st	X, r25
    398e:	8e 93       	st	-X, r24
    3990:	5b c6       	rjmp	.+3254   	; 0x4648 <Timer1_Init+0x1c04>
										/*
										 * Configure wave form generation mode to work with PWM_Phase_FrequencyCorrect_ICR1 mode
										 * Clear WGM10 bit in TCCR1A register
										 * Clear WGM11 bit in TCCR1A register
										 */
										TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT10);
    3992:	2f e4       	ldi	r18, 0x4F	; 79
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	af e4       	ldi	r26, 0x4F	; 79
    3998:	b0 e0       	ldi	r27, 0x00	; 0
    399a:	ef e4       	ldi	r30, 0x4F	; 79
    399c:	f0 e0       	ldi	r31, 0x00	; 0
    399e:	80 81       	ld	r24, Z
    39a0:	91 81       	ldd	r25, Z+1	; 0x01
    39a2:	8e 7f       	andi	r24, 0xFE	; 254
    39a4:	11 96       	adiw	r26, 0x01	; 1
    39a6:	9c 93       	st	X, r25
    39a8:	8e 93       	st	-X, r24
    39aa:	8d 91       	ld	r24, X+
    39ac:	9c 91       	ld	r25, X
    39ae:	f9 01       	movw	r30, r18
    39b0:	91 83       	std	Z+1, r25	; 0x01
    39b2:	80 83       	st	Z, r24
										TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT11);
    39b4:	2f e4       	ldi	r18, 0x4F	; 79
    39b6:	30 e0       	ldi	r19, 0x00	; 0
    39b8:	af e4       	ldi	r26, 0x4F	; 79
    39ba:	b0 e0       	ldi	r27, 0x00	; 0
    39bc:	ef e4       	ldi	r30, 0x4F	; 79
    39be:	f0 e0       	ldi	r31, 0x00	; 0
    39c0:	80 81       	ld	r24, Z
    39c2:	91 81       	ldd	r25, Z+1	; 0x01
    39c4:	8d 7f       	andi	r24, 0xFD	; 253
    39c6:	11 96       	adiw	r26, 0x01	; 1
    39c8:	9c 93       	st	X, r25
    39ca:	8e 93       	st	-X, r24
    39cc:	8d 91       	ld	r24, X+
    39ce:	9c 91       	ld	r25, X
    39d0:	f9 01       	movw	r30, r18
    39d2:	91 83       	std	Z+1, r25	; 0x01
    39d4:	80 83       	st	Z, r24
										/*
										 * Configure wave form generation mode to work with PWM_Phase_FrequencyCorrect_ICR1 mode
										 * Clear WGM12 bit in TCCR1B register
										 * Set WMG13 bit in TCCR1B register
										 */
										TIMER1_CONTROL_REGIRSTER_B =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT12);
    39d6:	2e e4       	ldi	r18, 0x4E	; 78
    39d8:	30 e0       	ldi	r19, 0x00	; 0
    39da:	ae e4       	ldi	r26, 0x4E	; 78
    39dc:	b0 e0       	ldi	r27, 0x00	; 0
    39de:	ee e4       	ldi	r30, 0x4E	; 78
    39e0:	f0 e0       	ldi	r31, 0x00	; 0
    39e2:	80 81       	ld	r24, Z
    39e4:	91 81       	ldd	r25, Z+1	; 0x01
    39e6:	87 7f       	andi	r24, 0xF7	; 247
    39e8:	11 96       	adiw	r26, 0x01	; 1
    39ea:	9c 93       	st	X, r25
    39ec:	8e 93       	st	-X, r24
    39ee:	8d 91       	ld	r24, X+
    39f0:	9c 91       	ld	r25, X
    39f2:	f9 01       	movw	r30, r18
    39f4:	91 83       	std	Z+1, r25	; 0x01
    39f6:	80 83       	st	Z, r24
										TIMER1_CONTROL_REGIRSTER_B =  SET_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT13);
    39f8:	2e e4       	ldi	r18, 0x4E	; 78
    39fa:	30 e0       	ldi	r19, 0x00	; 0
    39fc:	ae e4       	ldi	r26, 0x4E	; 78
    39fe:	b0 e0       	ldi	r27, 0x00	; 0
    3a00:	ee e4       	ldi	r30, 0x4E	; 78
    3a02:	f0 e0       	ldi	r31, 0x00	; 0
    3a04:	80 81       	ld	r24, Z
    3a06:	91 81       	ldd	r25, Z+1	; 0x01
    3a08:	80 61       	ori	r24, 0x10	; 16
    3a0a:	11 96       	adiw	r26, 0x01	; 1
    3a0c:	9c 93       	st	X, r25
    3a0e:	8e 93       	st	-X, r24
    3a10:	8d 91       	ld	r24, X+
    3a12:	9c 91       	ld	r25, X
    3a14:	f9 01       	movw	r30, r18
    3a16:	91 83       	std	Z+1, r25	; 0x01
    3a18:	80 83       	st	Z, r24
										/*
										 * Configure Input capture value for Timer1 to be the top from it
										 * Anding with 0XFFFF to make sure the value won't exceed
										 * OXFFFF as it is 16-bit Timer
										 */
										TIMER1_INPUT_CAPTURE_REGISTER  = ( (Timer1_config_PTR->timer1_InputCaptureValue) & 0XFFFF) ;
    3a1a:	a6 e4       	ldi	r26, 0x46	; 70
    3a1c:	b0 e0       	ldi	r27, 0x00	; 0
    3a1e:	e9 81       	ldd	r30, Y+1	; 0x01
    3a20:	fa 81       	ldd	r31, Y+2	; 0x02
    3a22:	84 81       	ldd	r24, Z+4	; 0x04
    3a24:	95 81       	ldd	r25, Z+5	; 0x05
    3a26:	11 96       	adiw	r26, 0x01	; 1
    3a28:	9c 93       	st	X, r25
    3a2a:	8e 93       	st	-X, r24

										switch(Timer1_config_PTR->channel)
    3a2c:	e9 81       	ldd	r30, Y+1	; 0x01
    3a2e:	fa 81       	ldd	r31, Y+2	; 0x02
    3a30:	80 85       	ldd	r24, Z+8	; 0x08
    3a32:	28 2f       	mov	r18, r24
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	38 8b       	std	Y+16, r19	; 0x10
    3a38:	2f 87       	std	Y+15, r18	; 0x0f
    3a3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a3c:	98 89       	ldd	r25, Y+16	; 0x10
    3a3e:	00 97       	sbiw	r24, 0x00	; 0
    3a40:	39 f0       	breq	.+14     	; 0x3a50 <Timer1_Init+0x100c>
    3a42:	ef 85       	ldd	r30, Y+15	; 0x0f
    3a44:	f8 89       	ldd	r31, Y+16	; 0x10
    3a46:	e1 30       	cpi	r30, 0x01	; 1
    3a48:	f1 05       	cpc	r31, r1
    3a4a:	09 f4       	brne	.+2      	; 0x3a4e <Timer1_Init+0x100a>
    3a4c:	44 c0       	rjmp	.+136    	; 0x3ad6 <Timer1_Init+0x1092>
    3a4e:	fc c5       	rjmp	.+3064   	; 0x4648 <Timer1_Init+0x1c04>
										case ChannelA:
											/*
											 * Configure OC1A as Output PIN
											 * the pin where the PWM signal is generated from MC
											 */
											OC1A_DIRECTION_PORT = SET_BIT(OC1A_DIRECTION_PORT, OC1A_PIN);
    3a50:	21 e3       	ldi	r18, 0x31	; 49
    3a52:	30 e0       	ldi	r19, 0x00	; 0
    3a54:	a1 e3       	ldi	r26, 0x31	; 49
    3a56:	b0 e0       	ldi	r27, 0x00	; 0
    3a58:	e1 e3       	ldi	r30, 0x31	; 49
    3a5a:	f0 e0       	ldi	r31, 0x00	; 0
    3a5c:	80 81       	ld	r24, Z
    3a5e:	80 62       	ori	r24, 0x20	; 32
    3a60:	8c 93       	st	X, r24
    3a62:	8c 91       	ld	r24, X
    3a64:	f9 01       	movw	r30, r18
    3a66:	80 83       	st	Z, r24
											/*
											 * Configure FOC1A bit in the TCCR1 register to be low
											 * As Timer1 is PWM mode
											 * Make FOC1A to be low as it is FAST_PWM_10bit mode
											 */
											TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    3a68:	2f e4       	ldi	r18, 0x4F	; 79
    3a6a:	30 e0       	ldi	r19, 0x00	; 0
    3a6c:	af e4       	ldi	r26, 0x4F	; 79
    3a6e:	b0 e0       	ldi	r27, 0x00	; 0
    3a70:	ef e4       	ldi	r30, 0x4F	; 79
    3a72:	f0 e0       	ldi	r31, 0x00	; 0
    3a74:	80 81       	ld	r24, Z
    3a76:	91 81       	ldd	r25, Z+1	; 0x01
    3a78:	87 7f       	andi	r24, 0xF7	; 247
    3a7a:	11 96       	adiw	r26, 0x01	; 1
    3a7c:	9c 93       	st	X, r25
    3a7e:	8e 93       	st	-X, r24
    3a80:	8d 91       	ld	r24, X+
    3a82:	9c 91       	ld	r25, X
    3a84:	f9 01       	movw	r30, r18
    3a86:	91 83       	std	Z+1, r25	; 0x01
    3a88:	80 83       	st	Z, r24
											/*
											 * Configure compare output mode to work with Timer1
											 * with one mode from 4 modes in TCCR1A
											 * Configure COM1A0/COM1A1 bits in TCCR1A register
											 */
											TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1A_MASK_CLEAR) |
    3a8a:	af e4       	ldi	r26, 0x4F	; 79
    3a8c:	b0 e0       	ldi	r27, 0x00	; 0
    3a8e:	ef e4       	ldi	r30, 0x4F	; 79
    3a90:	f0 e0       	ldi	r31, 0x00	; 0
    3a92:	80 81       	ld	r24, Z
    3a94:	91 81       	ldd	r25, Z+1	; 0x01
    3a96:	9c 01       	movw	r18, r24
    3a98:	2f 73       	andi	r18, 0x3F	; 63
    3a9a:	30 70       	andi	r19, 0x00	; 0
    3a9c:	e9 81       	ldd	r30, Y+1	; 0x01
    3a9e:	fa 81       	ldd	r31, Y+2	; 0x02
    3aa0:	83 85       	ldd	r24, Z+11	; 0x0b
    3aa2:	88 2f       	mov	r24, r24
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	00 24       	eor	r0, r0
    3aa8:	96 95       	lsr	r25
    3aaa:	87 95       	ror	r24
    3aac:	07 94       	ror	r0
    3aae:	96 95       	lsr	r25
    3ab0:	87 95       	ror	r24
    3ab2:	07 94       	ror	r0
    3ab4:	98 2f       	mov	r25, r24
    3ab6:	80 2d       	mov	r24, r0
    3ab8:	82 2b       	or	r24, r18
    3aba:	93 2b       	or	r25, r19
    3abc:	11 96       	adiw	r26, 0x01	; 1
    3abe:	9c 93       	st	X, r25
    3ac0:	8e 93       	st	-X, r24
											/*
											 * Configure Compare match value for Timer1 to start count from it
											 * Anding with 0XFFFF to make sure the value won't exceed
											 * OXFFFF as it is 16-bit Timer
											 */
											TIMER1_OUTPUT_COMPARE_REGISTER_A = ((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF;
    3ac2:	aa e4       	ldi	r26, 0x4A	; 74
    3ac4:	b0 e0       	ldi	r27, 0x00	; 0
    3ac6:	e9 81       	ldd	r30, Y+1	; 0x01
    3ac8:	fa 81       	ldd	r31, Y+2	; 0x02
    3aca:	82 81       	ldd	r24, Z+2	; 0x02
    3acc:	93 81       	ldd	r25, Z+3	; 0x03
    3ace:	11 96       	adiw	r26, 0x01	; 1
    3ad0:	9c 93       	st	X, r25
    3ad2:	8e 93       	st	-X, r24
    3ad4:	b9 c5       	rjmp	.+2930   	; 0x4648 <Timer1_Init+0x1c04>
										case ChannelB:
											/*
											 * Configure OC1A as Output PIN
											 * the pin where the PWM signal is generated from MC
											 */
											OC1B_DIRECTION_PORT = SET_BIT(OC1B_DIRECTION_PORT, OC1B_PIN);
    3ad6:	21 e3       	ldi	r18, 0x31	; 49
    3ad8:	30 e0       	ldi	r19, 0x00	; 0
    3ada:	a1 e3       	ldi	r26, 0x31	; 49
    3adc:	b0 e0       	ldi	r27, 0x00	; 0
    3ade:	e1 e3       	ldi	r30, 0x31	; 49
    3ae0:	f0 e0       	ldi	r31, 0x00	; 0
    3ae2:	80 81       	ld	r24, Z
    3ae4:	80 61       	ori	r24, 0x10	; 16
    3ae6:	8c 93       	st	X, r24
    3ae8:	8c 91       	ld	r24, X
    3aea:	f9 01       	movw	r30, r18
    3aec:	80 83       	st	Z, r24
											/*
											 * Configure FOC1B bit in the TCCR1 register to be low
											 * As Timer1 is PWM
											 * Make FOC1B to be low as it is FAST_PWM_10bit mode
											 */
											TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    3aee:	2f e4       	ldi	r18, 0x4F	; 79
    3af0:	30 e0       	ldi	r19, 0x00	; 0
    3af2:	af e4       	ldi	r26, 0x4F	; 79
    3af4:	b0 e0       	ldi	r27, 0x00	; 0
    3af6:	ef e4       	ldi	r30, 0x4F	; 79
    3af8:	f0 e0       	ldi	r31, 0x00	; 0
    3afa:	80 81       	ld	r24, Z
    3afc:	91 81       	ldd	r25, Z+1	; 0x01
    3afe:	8b 7f       	andi	r24, 0xFB	; 251
    3b00:	11 96       	adiw	r26, 0x01	; 1
    3b02:	9c 93       	st	X, r25
    3b04:	8e 93       	st	-X, r24
    3b06:	8d 91       	ld	r24, X+
    3b08:	9c 91       	ld	r25, X
    3b0a:	f9 01       	movw	r30, r18
    3b0c:	91 83       	std	Z+1, r25	; 0x01
    3b0e:	80 83       	st	Z, r24
											/*
											 * Configure compare output mode to work with Timer1
											 * with one mode from 4 modes in TCCR1A
											 * Configure COM1B0/COM1B1 bits in TCCR1A register
											 */
											TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1B_MASK_CLEAR) |
    3b10:	af e4       	ldi	r26, 0x4F	; 79
    3b12:	b0 e0       	ldi	r27, 0x00	; 0
    3b14:	ef e4       	ldi	r30, 0x4F	; 79
    3b16:	f0 e0       	ldi	r31, 0x00	; 0
    3b18:	80 81       	ld	r24, Z
    3b1a:	91 81       	ldd	r25, Z+1	; 0x01
    3b1c:	9c 01       	movw	r18, r24
    3b1e:	2f 7c       	andi	r18, 0xCF	; 207
    3b20:	30 70       	andi	r19, 0x00	; 0
    3b22:	e9 81       	ldd	r30, Y+1	; 0x01
    3b24:	fa 81       	ldd	r31, Y+2	; 0x02
    3b26:	83 85       	ldd	r24, Z+11	; 0x0b
    3b28:	88 2f       	mov	r24, r24
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	82 95       	swap	r24
    3b2e:	92 95       	swap	r25
    3b30:	90 7f       	andi	r25, 0xF0	; 240
    3b32:	98 27       	eor	r25, r24
    3b34:	80 7f       	andi	r24, 0xF0	; 240
    3b36:	98 27       	eor	r25, r24
    3b38:	82 2b       	or	r24, r18
    3b3a:	93 2b       	or	r25, r19
    3b3c:	11 96       	adiw	r26, 0x01	; 1
    3b3e:	9c 93       	st	X, r25
    3b40:	8e 93       	st	-X, r24
											 * Configure Compare match value for Timer1 to start count from it
											 * Anding with 0XFFFF to make sure the value won't exceed
											 * OXFFFF as it is 16-bit Timer
											 * to make it count right put OCR1A  greater than the value in OCR1B by 1
											 */
											TIMER1_OUTPUT_COMPARE_REGISTER_A = (((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF) + 1;
    3b42:	aa e4       	ldi	r26, 0x4A	; 74
    3b44:	b0 e0       	ldi	r27, 0x00	; 0
    3b46:	e9 81       	ldd	r30, Y+1	; 0x01
    3b48:	fa 81       	ldd	r31, Y+2	; 0x02
    3b4a:	82 81       	ldd	r24, Z+2	; 0x02
    3b4c:	93 81       	ldd	r25, Z+3	; 0x03
    3b4e:	01 96       	adiw	r24, 0x01	; 1
    3b50:	11 96       	adiw	r26, 0x01	; 1
    3b52:	9c 93       	st	X, r25
    3b54:	8e 93       	st	-X, r24
											TIMER1_OUTPUT_COMPARE_REGISTER_B = ((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF;
    3b56:	a8 e4       	ldi	r26, 0x48	; 72
    3b58:	b0 e0       	ldi	r27, 0x00	; 0
    3b5a:	e9 81       	ldd	r30, Y+1	; 0x01
    3b5c:	fa 81       	ldd	r31, Y+2	; 0x02
    3b5e:	82 81       	ldd	r24, Z+2	; 0x02
    3b60:	93 81       	ldd	r25, Z+3	; 0x03
    3b62:	11 96       	adiw	r26, 0x01	; 1
    3b64:	9c 93       	st	X, r25
    3b66:	8e 93       	st	-X, r24
    3b68:	6f c5       	rjmp	.+2782   	; 0x4648 <Timer1_Init+0x1c04>
											/*
											 * Configure wave form generation mode to work with PWM_Phase_FrequencyCorrect_OCR1A mode
											 * Set WGM10 bit in TCCR1A register
											 * Clear WGM11 bit in TCCR1A register
											 */
											TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT10);
    3b6a:	2f e4       	ldi	r18, 0x4F	; 79
    3b6c:	30 e0       	ldi	r19, 0x00	; 0
    3b6e:	af e4       	ldi	r26, 0x4F	; 79
    3b70:	b0 e0       	ldi	r27, 0x00	; 0
    3b72:	ef e4       	ldi	r30, 0x4F	; 79
    3b74:	f0 e0       	ldi	r31, 0x00	; 0
    3b76:	80 81       	ld	r24, Z
    3b78:	91 81       	ldd	r25, Z+1	; 0x01
    3b7a:	81 60       	ori	r24, 0x01	; 1
    3b7c:	11 96       	adiw	r26, 0x01	; 1
    3b7e:	9c 93       	st	X, r25
    3b80:	8e 93       	st	-X, r24
    3b82:	8d 91       	ld	r24, X+
    3b84:	9c 91       	ld	r25, X
    3b86:	f9 01       	movw	r30, r18
    3b88:	91 83       	std	Z+1, r25	; 0x01
    3b8a:	80 83       	st	Z, r24
											TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT11);
    3b8c:	2f e4       	ldi	r18, 0x4F	; 79
    3b8e:	30 e0       	ldi	r19, 0x00	; 0
    3b90:	af e4       	ldi	r26, 0x4F	; 79
    3b92:	b0 e0       	ldi	r27, 0x00	; 0
    3b94:	ef e4       	ldi	r30, 0x4F	; 79
    3b96:	f0 e0       	ldi	r31, 0x00	; 0
    3b98:	80 81       	ld	r24, Z
    3b9a:	91 81       	ldd	r25, Z+1	; 0x01
    3b9c:	8d 7f       	andi	r24, 0xFD	; 253
    3b9e:	11 96       	adiw	r26, 0x01	; 1
    3ba0:	9c 93       	st	X, r25
    3ba2:	8e 93       	st	-X, r24
    3ba4:	8d 91       	ld	r24, X+
    3ba6:	9c 91       	ld	r25, X
    3ba8:	f9 01       	movw	r30, r18
    3baa:	91 83       	std	Z+1, r25	; 0x01
    3bac:	80 83       	st	Z, r24
											/*
											 * Configure wave form generation mode to work with PWM_Phase_FrequencyCorrect_OCR1A mode
											 * Clear WGM12 bit in TCCR1B register
											 * Set WMG13 bit in TCCR1B register
											 */
											TIMER1_CONTROL_REGIRSTER_B =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT12);
    3bae:	2e e4       	ldi	r18, 0x4E	; 78
    3bb0:	30 e0       	ldi	r19, 0x00	; 0
    3bb2:	ae e4       	ldi	r26, 0x4E	; 78
    3bb4:	b0 e0       	ldi	r27, 0x00	; 0
    3bb6:	ee e4       	ldi	r30, 0x4E	; 78
    3bb8:	f0 e0       	ldi	r31, 0x00	; 0
    3bba:	80 81       	ld	r24, Z
    3bbc:	91 81       	ldd	r25, Z+1	; 0x01
    3bbe:	87 7f       	andi	r24, 0xF7	; 247
    3bc0:	11 96       	adiw	r26, 0x01	; 1
    3bc2:	9c 93       	st	X, r25
    3bc4:	8e 93       	st	-X, r24
    3bc6:	8d 91       	ld	r24, X+
    3bc8:	9c 91       	ld	r25, X
    3bca:	f9 01       	movw	r30, r18
    3bcc:	91 83       	std	Z+1, r25	; 0x01
    3bce:	80 83       	st	Z, r24
											TIMER1_CONTROL_REGIRSTER_B =  SET_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT13);
    3bd0:	2e e4       	ldi	r18, 0x4E	; 78
    3bd2:	30 e0       	ldi	r19, 0x00	; 0
    3bd4:	ae e4       	ldi	r26, 0x4E	; 78
    3bd6:	b0 e0       	ldi	r27, 0x00	; 0
    3bd8:	ee e4       	ldi	r30, 0x4E	; 78
    3bda:	f0 e0       	ldi	r31, 0x00	; 0
    3bdc:	80 81       	ld	r24, Z
    3bde:	91 81       	ldd	r25, Z+1	; 0x01
    3be0:	80 61       	ori	r24, 0x10	; 16
    3be2:	11 96       	adiw	r26, 0x01	; 1
    3be4:	9c 93       	st	X, r25
    3be6:	8e 93       	st	-X, r24
    3be8:	8d 91       	ld	r24, X+
    3bea:	9c 91       	ld	r25, X
    3bec:	11 97       	sbiw	r26, 0x01	; 1
    3bee:	f9 01       	movw	r30, r18
    3bf0:	91 83       	std	Z+1, r25	; 0x01
    3bf2:	80 83       	st	Z, r24

											switch(Timer1_config_PTR->channel)
    3bf4:	e9 81       	ldd	r30, Y+1	; 0x01
    3bf6:	fa 81       	ldd	r31, Y+2	; 0x02
    3bf8:	80 85       	ldd	r24, Z+8	; 0x08
    3bfa:	28 2f       	mov	r18, r24
    3bfc:	30 e0       	ldi	r19, 0x00	; 0
    3bfe:	3e 87       	std	Y+14, r19	; 0x0e
    3c00:	2d 87       	std	Y+13, r18	; 0x0d
    3c02:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c04:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c06:	00 97       	sbiw	r24, 0x00	; 0
    3c08:	39 f0       	breq	.+14     	; 0x3c18 <Timer1_Init+0x11d4>
    3c0a:	ed 85       	ldd	r30, Y+13	; 0x0d
    3c0c:	fe 85       	ldd	r31, Y+14	; 0x0e
    3c0e:	e1 30       	cpi	r30, 0x01	; 1
    3c10:	f1 05       	cpc	r31, r1
    3c12:	09 f4       	brne	.+2      	; 0x3c16 <Timer1_Init+0x11d2>
    3c14:	44 c0       	rjmp	.+136    	; 0x3c9e <Timer1_Init+0x125a>
    3c16:	18 c5       	rjmp	.+2608   	; 0x4648 <Timer1_Init+0x1c04>
											case ChannelA:
												/*
												 * Configure OC1A as Output PIN
												 * the pin where the PWM signal is generated from MC
												 */
												OC1A_DIRECTION_PORT = SET_BIT(OC1A_DIRECTION_PORT, OC1A_PIN);
    3c18:	21 e3       	ldi	r18, 0x31	; 49
    3c1a:	30 e0       	ldi	r19, 0x00	; 0
    3c1c:	a1 e3       	ldi	r26, 0x31	; 49
    3c1e:	b0 e0       	ldi	r27, 0x00	; 0
    3c20:	e1 e3       	ldi	r30, 0x31	; 49
    3c22:	f0 e0       	ldi	r31, 0x00	; 0
    3c24:	80 81       	ld	r24, Z
    3c26:	80 62       	ori	r24, 0x20	; 32
    3c28:	8c 93       	st	X, r24
    3c2a:	8c 91       	ld	r24, X
    3c2c:	f9 01       	movw	r30, r18
    3c2e:	80 83       	st	Z, r24
												/*
												 * Configure FOC1A bit in the TCCR1 register to be low
												 * As Timer1 is PWM mode
												 * Make FOC1A to be low as it is FAST_PWM_10bit mode
												 */
												TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    3c30:	2f e4       	ldi	r18, 0x4F	; 79
    3c32:	30 e0       	ldi	r19, 0x00	; 0
    3c34:	af e4       	ldi	r26, 0x4F	; 79
    3c36:	b0 e0       	ldi	r27, 0x00	; 0
    3c38:	ef e4       	ldi	r30, 0x4F	; 79
    3c3a:	f0 e0       	ldi	r31, 0x00	; 0
    3c3c:	80 81       	ld	r24, Z
    3c3e:	91 81       	ldd	r25, Z+1	; 0x01
    3c40:	87 7f       	andi	r24, 0xF7	; 247
    3c42:	11 96       	adiw	r26, 0x01	; 1
    3c44:	9c 93       	st	X, r25
    3c46:	8e 93       	st	-X, r24
    3c48:	8d 91       	ld	r24, X+
    3c4a:	9c 91       	ld	r25, X
    3c4c:	f9 01       	movw	r30, r18
    3c4e:	91 83       	std	Z+1, r25	; 0x01
    3c50:	80 83       	st	Z, r24
												/*
												 * Configure compare output mode to work with Timer1
												 * with one mode from 4 modes in TCCR1A
												 * Configure COM1A0/COM1A1 bits in TCCR1A register
												 */
												TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1A_MASK_CLEAR) |
    3c52:	af e4       	ldi	r26, 0x4F	; 79
    3c54:	b0 e0       	ldi	r27, 0x00	; 0
    3c56:	ef e4       	ldi	r30, 0x4F	; 79
    3c58:	f0 e0       	ldi	r31, 0x00	; 0
    3c5a:	80 81       	ld	r24, Z
    3c5c:	91 81       	ldd	r25, Z+1	; 0x01
    3c5e:	9c 01       	movw	r18, r24
    3c60:	2f 73       	andi	r18, 0x3F	; 63
    3c62:	30 70       	andi	r19, 0x00	; 0
    3c64:	e9 81       	ldd	r30, Y+1	; 0x01
    3c66:	fa 81       	ldd	r31, Y+2	; 0x02
    3c68:	83 85       	ldd	r24, Z+11	; 0x0b
    3c6a:	88 2f       	mov	r24, r24
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	00 24       	eor	r0, r0
    3c70:	96 95       	lsr	r25
    3c72:	87 95       	ror	r24
    3c74:	07 94       	ror	r0
    3c76:	96 95       	lsr	r25
    3c78:	87 95       	ror	r24
    3c7a:	07 94       	ror	r0
    3c7c:	98 2f       	mov	r25, r24
    3c7e:	80 2d       	mov	r24, r0
    3c80:	82 2b       	or	r24, r18
    3c82:	93 2b       	or	r25, r19
    3c84:	11 96       	adiw	r26, 0x01	; 1
    3c86:	9c 93       	st	X, r25
    3c88:	8e 93       	st	-X, r24
												/*
												 * Configure Compare match value for Timer1 to start count from it
												 * Anding with 0XFFFF to make sure the value won't exceed
												 * OXFFFF as it is 16-bit Timer
												 */
												TIMER1_OUTPUT_COMPARE_REGISTER_A = ((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF;
    3c8a:	aa e4       	ldi	r26, 0x4A	; 74
    3c8c:	b0 e0       	ldi	r27, 0x00	; 0
    3c8e:	e9 81       	ldd	r30, Y+1	; 0x01
    3c90:	fa 81       	ldd	r31, Y+2	; 0x02
    3c92:	82 81       	ldd	r24, Z+2	; 0x02
    3c94:	93 81       	ldd	r25, Z+3	; 0x03
    3c96:	11 96       	adiw	r26, 0x01	; 1
    3c98:	9c 93       	st	X, r25
    3c9a:	8e 93       	st	-X, r24
    3c9c:	d5 c4       	rjmp	.+2474   	; 0x4648 <Timer1_Init+0x1c04>
											case ChannelB:
												/*
												 * Configure OC1A as Output PIN
												 * the pin where the PWM signal is generated from MC
												 */
												OC1B_DIRECTION_PORT = SET_BIT(OC1B_DIRECTION_PORT, OC1B_PIN);
    3c9e:	21 e3       	ldi	r18, 0x31	; 49
    3ca0:	30 e0       	ldi	r19, 0x00	; 0
    3ca2:	a1 e3       	ldi	r26, 0x31	; 49
    3ca4:	b0 e0       	ldi	r27, 0x00	; 0
    3ca6:	e1 e3       	ldi	r30, 0x31	; 49
    3ca8:	f0 e0       	ldi	r31, 0x00	; 0
    3caa:	80 81       	ld	r24, Z
    3cac:	80 61       	ori	r24, 0x10	; 16
    3cae:	8c 93       	st	X, r24
    3cb0:	8c 91       	ld	r24, X
    3cb2:	f9 01       	movw	r30, r18
    3cb4:	80 83       	st	Z, r24
												/*
												 * Configure FOC1B bit in the TCCR1 register to be low
												 * As Timer1 is PWM
												 * Make FOC1B to be low as it is FAST_PWM_10bit mode
												 */
												TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    3cb6:	2f e4       	ldi	r18, 0x4F	; 79
    3cb8:	30 e0       	ldi	r19, 0x00	; 0
    3cba:	af e4       	ldi	r26, 0x4F	; 79
    3cbc:	b0 e0       	ldi	r27, 0x00	; 0
    3cbe:	ef e4       	ldi	r30, 0x4F	; 79
    3cc0:	f0 e0       	ldi	r31, 0x00	; 0
    3cc2:	80 81       	ld	r24, Z
    3cc4:	91 81       	ldd	r25, Z+1	; 0x01
    3cc6:	8b 7f       	andi	r24, 0xFB	; 251
    3cc8:	11 96       	adiw	r26, 0x01	; 1
    3cca:	9c 93       	st	X, r25
    3ccc:	8e 93       	st	-X, r24
    3cce:	8d 91       	ld	r24, X+
    3cd0:	9c 91       	ld	r25, X
    3cd2:	f9 01       	movw	r30, r18
    3cd4:	91 83       	std	Z+1, r25	; 0x01
    3cd6:	80 83       	st	Z, r24
												/*
												 * Configure compare output mode to work with Timer1
												 * with one mode from 4 modes in TCCR1A
												 * Configure COM1B0/COM1B1 bits in TCCR1A register
												 */
												TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1B_MASK_CLEAR) |
    3cd8:	af e4       	ldi	r26, 0x4F	; 79
    3cda:	b0 e0       	ldi	r27, 0x00	; 0
    3cdc:	ef e4       	ldi	r30, 0x4F	; 79
    3cde:	f0 e0       	ldi	r31, 0x00	; 0
    3ce0:	80 81       	ld	r24, Z
    3ce2:	91 81       	ldd	r25, Z+1	; 0x01
    3ce4:	9c 01       	movw	r18, r24
    3ce6:	2f 7c       	andi	r18, 0xCF	; 207
    3ce8:	30 70       	andi	r19, 0x00	; 0
    3cea:	e9 81       	ldd	r30, Y+1	; 0x01
    3cec:	fa 81       	ldd	r31, Y+2	; 0x02
    3cee:	83 85       	ldd	r24, Z+11	; 0x0b
    3cf0:	88 2f       	mov	r24, r24
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    3cf4:	82 95       	swap	r24
    3cf6:	92 95       	swap	r25
    3cf8:	90 7f       	andi	r25, 0xF0	; 240
    3cfa:	98 27       	eor	r25, r24
    3cfc:	80 7f       	andi	r24, 0xF0	; 240
    3cfe:	98 27       	eor	r25, r24
    3d00:	82 2b       	or	r24, r18
    3d02:	93 2b       	or	r25, r19
    3d04:	11 96       	adiw	r26, 0x01	; 1
    3d06:	9c 93       	st	X, r25
    3d08:	8e 93       	st	-X, r24
												 * Configure Compare match value for Timer1 to start count from it
												 * Anding with 0XFFFF to make sure the value won't exceed
												 * OXFFFF as it is 16-bit Timer
												 * to make it count right put OCR1A  greater than the value in OCR1B by 1
												 */
												TIMER1_OUTPUT_COMPARE_REGISTER_A = (((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF) + 1;
    3d0a:	aa e4       	ldi	r26, 0x4A	; 74
    3d0c:	b0 e0       	ldi	r27, 0x00	; 0
    3d0e:	e9 81       	ldd	r30, Y+1	; 0x01
    3d10:	fa 81       	ldd	r31, Y+2	; 0x02
    3d12:	82 81       	ldd	r24, Z+2	; 0x02
    3d14:	93 81       	ldd	r25, Z+3	; 0x03
    3d16:	01 96       	adiw	r24, 0x01	; 1
    3d18:	11 96       	adiw	r26, 0x01	; 1
    3d1a:	9c 93       	st	X, r25
    3d1c:	8e 93       	st	-X, r24
												TIMER1_OUTPUT_COMPARE_REGISTER_B = ((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF;
    3d1e:	a8 e4       	ldi	r26, 0x48	; 72
    3d20:	b0 e0       	ldi	r27, 0x00	; 0
    3d22:	e9 81       	ldd	r30, Y+1	; 0x01
    3d24:	fa 81       	ldd	r31, Y+2	; 0x02
    3d26:	82 81       	ldd	r24, Z+2	; 0x02
    3d28:	93 81       	ldd	r25, Z+3	; 0x03
    3d2a:	11 96       	adiw	r26, 0x01	; 1
    3d2c:	9c 93       	st	X, r25
    3d2e:	8e 93       	st	-X, r24
    3d30:	8b c4       	rjmp	.+2326   	; 0x4648 <Timer1_Init+0x1c04>
												/*
												 * Configure wave form generation mode to work with PWM_PhaseCorrect_ICR1 mode
												 * Clear WGM10 bit in TCCR1A register
												 * Clear WGM11 bit in TCCR1A register
												 */
												TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT10);
    3d32:	2f e4       	ldi	r18, 0x4F	; 79
    3d34:	30 e0       	ldi	r19, 0x00	; 0
    3d36:	af e4       	ldi	r26, 0x4F	; 79
    3d38:	b0 e0       	ldi	r27, 0x00	; 0
    3d3a:	ef e4       	ldi	r30, 0x4F	; 79
    3d3c:	f0 e0       	ldi	r31, 0x00	; 0
    3d3e:	80 81       	ld	r24, Z
    3d40:	91 81       	ldd	r25, Z+1	; 0x01
    3d42:	8e 7f       	andi	r24, 0xFE	; 254
    3d44:	11 96       	adiw	r26, 0x01	; 1
    3d46:	9c 93       	st	X, r25
    3d48:	8e 93       	st	-X, r24
    3d4a:	8d 91       	ld	r24, X+
    3d4c:	9c 91       	ld	r25, X
    3d4e:	f9 01       	movw	r30, r18
    3d50:	91 83       	std	Z+1, r25	; 0x01
    3d52:	80 83       	st	Z, r24
												TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT11);
    3d54:	2f e4       	ldi	r18, 0x4F	; 79
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	af e4       	ldi	r26, 0x4F	; 79
    3d5a:	b0 e0       	ldi	r27, 0x00	; 0
    3d5c:	ef e4       	ldi	r30, 0x4F	; 79
    3d5e:	f0 e0       	ldi	r31, 0x00	; 0
    3d60:	80 81       	ld	r24, Z
    3d62:	91 81       	ldd	r25, Z+1	; 0x01
    3d64:	8d 7f       	andi	r24, 0xFD	; 253
    3d66:	11 96       	adiw	r26, 0x01	; 1
    3d68:	9c 93       	st	X, r25
    3d6a:	8e 93       	st	-X, r24
    3d6c:	8d 91       	ld	r24, X+
    3d6e:	9c 91       	ld	r25, X
    3d70:	f9 01       	movw	r30, r18
    3d72:	91 83       	std	Z+1, r25	; 0x01
    3d74:	80 83       	st	Z, r24
												/*
												 * Configure wave form generation mode to work with PWM_PhaseCorrect_ICR1 mode
												 * Clear WGM12 bit in TCCR1B register
												 * Set WMG13 bit in TCCR1B register
												 */
												TIMER1_CONTROL_REGIRSTER_B =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT12);
    3d76:	2e e4       	ldi	r18, 0x4E	; 78
    3d78:	30 e0       	ldi	r19, 0x00	; 0
    3d7a:	ae e4       	ldi	r26, 0x4E	; 78
    3d7c:	b0 e0       	ldi	r27, 0x00	; 0
    3d7e:	ee e4       	ldi	r30, 0x4E	; 78
    3d80:	f0 e0       	ldi	r31, 0x00	; 0
    3d82:	80 81       	ld	r24, Z
    3d84:	91 81       	ldd	r25, Z+1	; 0x01
    3d86:	87 7f       	andi	r24, 0xF7	; 247
    3d88:	11 96       	adiw	r26, 0x01	; 1
    3d8a:	9c 93       	st	X, r25
    3d8c:	8e 93       	st	-X, r24
    3d8e:	8d 91       	ld	r24, X+
    3d90:	9c 91       	ld	r25, X
    3d92:	f9 01       	movw	r30, r18
    3d94:	91 83       	std	Z+1, r25	; 0x01
    3d96:	80 83       	st	Z, r24
												TIMER1_CONTROL_REGIRSTER_B =  SET_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT13);
    3d98:	2e e4       	ldi	r18, 0x4E	; 78
    3d9a:	30 e0       	ldi	r19, 0x00	; 0
    3d9c:	ae e4       	ldi	r26, 0x4E	; 78
    3d9e:	b0 e0       	ldi	r27, 0x00	; 0
    3da0:	ee e4       	ldi	r30, 0x4E	; 78
    3da2:	f0 e0       	ldi	r31, 0x00	; 0
    3da4:	80 81       	ld	r24, Z
    3da6:	91 81       	ldd	r25, Z+1	; 0x01
    3da8:	80 61       	ori	r24, 0x10	; 16
    3daa:	11 96       	adiw	r26, 0x01	; 1
    3dac:	9c 93       	st	X, r25
    3dae:	8e 93       	st	-X, r24
    3db0:	8d 91       	ld	r24, X+
    3db2:	9c 91       	ld	r25, X
    3db4:	f9 01       	movw	r30, r18
    3db6:	91 83       	std	Z+1, r25	; 0x01
    3db8:	80 83       	st	Z, r24
												/*
												 * Configure Input capture value for Timer1 to be the top from it
												 * Anding with 0XFFFF to make sure the value won't exceed
												 * OXFFFF as it is 16-bit Timer
												 */
												TIMER1_INPUT_CAPTURE_REGISTER  = ( (Timer1_config_PTR->timer1_InputCaptureValue) & 0XFFFF) ;
    3dba:	a6 e4       	ldi	r26, 0x46	; 70
    3dbc:	b0 e0       	ldi	r27, 0x00	; 0
    3dbe:	e9 81       	ldd	r30, Y+1	; 0x01
    3dc0:	fa 81       	ldd	r31, Y+2	; 0x02
    3dc2:	84 81       	ldd	r24, Z+4	; 0x04
    3dc4:	95 81       	ldd	r25, Z+5	; 0x05
    3dc6:	11 96       	adiw	r26, 0x01	; 1
    3dc8:	9c 93       	st	X, r25
    3dca:	8e 93       	st	-X, r24

												switch(Timer1_config_PTR->channel)
    3dcc:	e9 81       	ldd	r30, Y+1	; 0x01
    3dce:	fa 81       	ldd	r31, Y+2	; 0x02
    3dd0:	80 85       	ldd	r24, Z+8	; 0x08
    3dd2:	28 2f       	mov	r18, r24
    3dd4:	30 e0       	ldi	r19, 0x00	; 0
    3dd6:	3c 87       	std	Y+12, r19	; 0x0c
    3dd8:	2b 87       	std	Y+11, r18	; 0x0b
    3dda:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ddc:	9c 85       	ldd	r25, Y+12	; 0x0c
    3dde:	00 97       	sbiw	r24, 0x00	; 0
    3de0:	39 f0       	breq	.+14     	; 0x3df0 <Timer1_Init+0x13ac>
    3de2:	eb 85       	ldd	r30, Y+11	; 0x0b
    3de4:	fc 85       	ldd	r31, Y+12	; 0x0c
    3de6:	e1 30       	cpi	r30, 0x01	; 1
    3de8:	f1 05       	cpc	r31, r1
    3dea:	09 f4       	brne	.+2      	; 0x3dee <Timer1_Init+0x13aa>
    3dec:	44 c0       	rjmp	.+136    	; 0x3e76 <Timer1_Init+0x1432>
    3dee:	2c c4       	rjmp	.+2136   	; 0x4648 <Timer1_Init+0x1c04>
												case ChannelA:
													/*
													 * Configure OC1A as Output PIN
													 * the pin where the PWM signal is generated from MC
													 */
													OC1A_DIRECTION_PORT = SET_BIT(OC1A_DIRECTION_PORT, OC1A_PIN);
    3df0:	21 e3       	ldi	r18, 0x31	; 49
    3df2:	30 e0       	ldi	r19, 0x00	; 0
    3df4:	a1 e3       	ldi	r26, 0x31	; 49
    3df6:	b0 e0       	ldi	r27, 0x00	; 0
    3df8:	e1 e3       	ldi	r30, 0x31	; 49
    3dfa:	f0 e0       	ldi	r31, 0x00	; 0
    3dfc:	80 81       	ld	r24, Z
    3dfe:	80 62       	ori	r24, 0x20	; 32
    3e00:	8c 93       	st	X, r24
    3e02:	8c 91       	ld	r24, X
    3e04:	f9 01       	movw	r30, r18
    3e06:	80 83       	st	Z, r24
													/*
													 * Configure FOC1A bit in the TCCR1 register to be low
													 * As Timer1 is PWM mode
													 * Make FOC1A to be low as it is FAST_PWM_10bit mode
													 */
													TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    3e08:	2f e4       	ldi	r18, 0x4F	; 79
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	af e4       	ldi	r26, 0x4F	; 79
    3e0e:	b0 e0       	ldi	r27, 0x00	; 0
    3e10:	ef e4       	ldi	r30, 0x4F	; 79
    3e12:	f0 e0       	ldi	r31, 0x00	; 0
    3e14:	80 81       	ld	r24, Z
    3e16:	91 81       	ldd	r25, Z+1	; 0x01
    3e18:	87 7f       	andi	r24, 0xF7	; 247
    3e1a:	11 96       	adiw	r26, 0x01	; 1
    3e1c:	9c 93       	st	X, r25
    3e1e:	8e 93       	st	-X, r24
    3e20:	8d 91       	ld	r24, X+
    3e22:	9c 91       	ld	r25, X
    3e24:	f9 01       	movw	r30, r18
    3e26:	91 83       	std	Z+1, r25	; 0x01
    3e28:	80 83       	st	Z, r24
													/*
													 * Configure compare output mode to work with Timer1
													 * with one mode from 4 modes in TCCR1A
													 * Configure COM1A0/COM1A1 bits in TCCR1A register
													 */
													TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1A_MASK_CLEAR) |
    3e2a:	af e4       	ldi	r26, 0x4F	; 79
    3e2c:	b0 e0       	ldi	r27, 0x00	; 0
    3e2e:	ef e4       	ldi	r30, 0x4F	; 79
    3e30:	f0 e0       	ldi	r31, 0x00	; 0
    3e32:	80 81       	ld	r24, Z
    3e34:	91 81       	ldd	r25, Z+1	; 0x01
    3e36:	9c 01       	movw	r18, r24
    3e38:	2f 73       	andi	r18, 0x3F	; 63
    3e3a:	30 70       	andi	r19, 0x00	; 0
    3e3c:	e9 81       	ldd	r30, Y+1	; 0x01
    3e3e:	fa 81       	ldd	r31, Y+2	; 0x02
    3e40:	83 85       	ldd	r24, Z+11	; 0x0b
    3e42:	88 2f       	mov	r24, r24
    3e44:	90 e0       	ldi	r25, 0x00	; 0
    3e46:	00 24       	eor	r0, r0
    3e48:	96 95       	lsr	r25
    3e4a:	87 95       	ror	r24
    3e4c:	07 94       	ror	r0
    3e4e:	96 95       	lsr	r25
    3e50:	87 95       	ror	r24
    3e52:	07 94       	ror	r0
    3e54:	98 2f       	mov	r25, r24
    3e56:	80 2d       	mov	r24, r0
    3e58:	82 2b       	or	r24, r18
    3e5a:	93 2b       	or	r25, r19
    3e5c:	11 96       	adiw	r26, 0x01	; 1
    3e5e:	9c 93       	st	X, r25
    3e60:	8e 93       	st	-X, r24
													/*
													 * Configure Compare match value for Timer1 to start count from it
													 * Anding with 0XFFFF to make sure the value won't exceed
													 * OXFFFF as it is 16-bit Timer
													 */
													TIMER1_OUTPUT_COMPARE_REGISTER_A = ((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF;
    3e62:	aa e4       	ldi	r26, 0x4A	; 74
    3e64:	b0 e0       	ldi	r27, 0x00	; 0
    3e66:	e9 81       	ldd	r30, Y+1	; 0x01
    3e68:	fa 81       	ldd	r31, Y+2	; 0x02
    3e6a:	82 81       	ldd	r24, Z+2	; 0x02
    3e6c:	93 81       	ldd	r25, Z+3	; 0x03
    3e6e:	11 96       	adiw	r26, 0x01	; 1
    3e70:	9c 93       	st	X, r25
    3e72:	8e 93       	st	-X, r24
    3e74:	e9 c3       	rjmp	.+2002   	; 0x4648 <Timer1_Init+0x1c04>
												case ChannelB:
													/*
													 * Configure OC1A as Output PIN
													 * the pin where the PWM signal is generated from MC
													 */
													OC1B_DIRECTION_PORT = SET_BIT(OC1B_DIRECTION_PORT, OC1B_PIN);
    3e76:	21 e3       	ldi	r18, 0x31	; 49
    3e78:	30 e0       	ldi	r19, 0x00	; 0
    3e7a:	a1 e3       	ldi	r26, 0x31	; 49
    3e7c:	b0 e0       	ldi	r27, 0x00	; 0
    3e7e:	e1 e3       	ldi	r30, 0x31	; 49
    3e80:	f0 e0       	ldi	r31, 0x00	; 0
    3e82:	80 81       	ld	r24, Z
    3e84:	80 61       	ori	r24, 0x10	; 16
    3e86:	8c 93       	st	X, r24
    3e88:	8c 91       	ld	r24, X
    3e8a:	f9 01       	movw	r30, r18
    3e8c:	80 83       	st	Z, r24
													/*
													 * Configure FOC1B bit in the TCCR1 register to be low
													 * As Timer1 is PWM
													 * Make FOC1B to be low as it is FAST_PWM_10bit mode
													 */
													TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    3e8e:	2f e4       	ldi	r18, 0x4F	; 79
    3e90:	30 e0       	ldi	r19, 0x00	; 0
    3e92:	af e4       	ldi	r26, 0x4F	; 79
    3e94:	b0 e0       	ldi	r27, 0x00	; 0
    3e96:	ef e4       	ldi	r30, 0x4F	; 79
    3e98:	f0 e0       	ldi	r31, 0x00	; 0
    3e9a:	80 81       	ld	r24, Z
    3e9c:	91 81       	ldd	r25, Z+1	; 0x01
    3e9e:	8b 7f       	andi	r24, 0xFB	; 251
    3ea0:	11 96       	adiw	r26, 0x01	; 1
    3ea2:	9c 93       	st	X, r25
    3ea4:	8e 93       	st	-X, r24
    3ea6:	8d 91       	ld	r24, X+
    3ea8:	9c 91       	ld	r25, X
    3eaa:	f9 01       	movw	r30, r18
    3eac:	91 83       	std	Z+1, r25	; 0x01
    3eae:	80 83       	st	Z, r24
													/*
													 * Configure compare output mode to work with Timer1
													 * with one mode from 4 modes in TCCR1A
													 * Configure COM1B0/COM1B1 bits in TCCR1A register
													 */
													TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1B_MASK_CLEAR) |
    3eb0:	af e4       	ldi	r26, 0x4F	; 79
    3eb2:	b0 e0       	ldi	r27, 0x00	; 0
    3eb4:	ef e4       	ldi	r30, 0x4F	; 79
    3eb6:	f0 e0       	ldi	r31, 0x00	; 0
    3eb8:	80 81       	ld	r24, Z
    3eba:	91 81       	ldd	r25, Z+1	; 0x01
    3ebc:	9c 01       	movw	r18, r24
    3ebe:	2f 7c       	andi	r18, 0xCF	; 207
    3ec0:	30 70       	andi	r19, 0x00	; 0
    3ec2:	e9 81       	ldd	r30, Y+1	; 0x01
    3ec4:	fa 81       	ldd	r31, Y+2	; 0x02
    3ec6:	83 85       	ldd	r24, Z+11	; 0x0b
    3ec8:	88 2f       	mov	r24, r24
    3eca:	90 e0       	ldi	r25, 0x00	; 0
    3ecc:	82 95       	swap	r24
    3ece:	92 95       	swap	r25
    3ed0:	90 7f       	andi	r25, 0xF0	; 240
    3ed2:	98 27       	eor	r25, r24
    3ed4:	80 7f       	andi	r24, 0xF0	; 240
    3ed6:	98 27       	eor	r25, r24
    3ed8:	82 2b       	or	r24, r18
    3eda:	93 2b       	or	r25, r19
    3edc:	11 96       	adiw	r26, 0x01	; 1
    3ede:	9c 93       	st	X, r25
    3ee0:	8e 93       	st	-X, r24
													 * Configure Compare match value for Timer1 to start count from it
													 * Anding with 0XFFFF to make sure the value won't exceed
													 * OXFFFF as it is 16-bit Timer
													 * to make it count right put OCR1A  greater than the value in OCR1B by 1
													 */
													TIMER1_OUTPUT_COMPARE_REGISTER_A = (((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF) + 1;
    3ee2:	aa e4       	ldi	r26, 0x4A	; 74
    3ee4:	b0 e0       	ldi	r27, 0x00	; 0
    3ee6:	e9 81       	ldd	r30, Y+1	; 0x01
    3ee8:	fa 81       	ldd	r31, Y+2	; 0x02
    3eea:	82 81       	ldd	r24, Z+2	; 0x02
    3eec:	93 81       	ldd	r25, Z+3	; 0x03
    3eee:	01 96       	adiw	r24, 0x01	; 1
    3ef0:	11 96       	adiw	r26, 0x01	; 1
    3ef2:	9c 93       	st	X, r25
    3ef4:	8e 93       	st	-X, r24
													TIMER1_OUTPUT_COMPARE_REGISTER_B = ((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF;
    3ef6:	a8 e4       	ldi	r26, 0x48	; 72
    3ef8:	b0 e0       	ldi	r27, 0x00	; 0
    3efa:	e9 81       	ldd	r30, Y+1	; 0x01
    3efc:	fa 81       	ldd	r31, Y+2	; 0x02
    3efe:	82 81       	ldd	r24, Z+2	; 0x02
    3f00:	93 81       	ldd	r25, Z+3	; 0x03
    3f02:	11 96       	adiw	r26, 0x01	; 1
    3f04:	9c 93       	st	X, r25
    3f06:	8e 93       	st	-X, r24
    3f08:	9f c3       	rjmp	.+1854   	; 0x4648 <Timer1_Init+0x1c04>
													/*
													 * Configure wave form generation mode to work with PWM_Phase_FrequencyCorrect_OCR1A mode
													 * Set WGM10 bit in TCCR1A register
													 * Set WGM11 bit in TCCR1A register
													 */
													TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT10);
    3f0a:	2f e4       	ldi	r18, 0x4F	; 79
    3f0c:	30 e0       	ldi	r19, 0x00	; 0
    3f0e:	af e4       	ldi	r26, 0x4F	; 79
    3f10:	b0 e0       	ldi	r27, 0x00	; 0
    3f12:	ef e4       	ldi	r30, 0x4F	; 79
    3f14:	f0 e0       	ldi	r31, 0x00	; 0
    3f16:	80 81       	ld	r24, Z
    3f18:	91 81       	ldd	r25, Z+1	; 0x01
    3f1a:	81 60       	ori	r24, 0x01	; 1
    3f1c:	11 96       	adiw	r26, 0x01	; 1
    3f1e:	9c 93       	st	X, r25
    3f20:	8e 93       	st	-X, r24
    3f22:	8d 91       	ld	r24, X+
    3f24:	9c 91       	ld	r25, X
    3f26:	f9 01       	movw	r30, r18
    3f28:	91 83       	std	Z+1, r25	; 0x01
    3f2a:	80 83       	st	Z, r24
													TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT11);
    3f2c:	2f e4       	ldi	r18, 0x4F	; 79
    3f2e:	30 e0       	ldi	r19, 0x00	; 0
    3f30:	af e4       	ldi	r26, 0x4F	; 79
    3f32:	b0 e0       	ldi	r27, 0x00	; 0
    3f34:	ef e4       	ldi	r30, 0x4F	; 79
    3f36:	f0 e0       	ldi	r31, 0x00	; 0
    3f38:	80 81       	ld	r24, Z
    3f3a:	91 81       	ldd	r25, Z+1	; 0x01
    3f3c:	82 60       	ori	r24, 0x02	; 2
    3f3e:	11 96       	adiw	r26, 0x01	; 1
    3f40:	9c 93       	st	X, r25
    3f42:	8e 93       	st	-X, r24
    3f44:	8d 91       	ld	r24, X+
    3f46:	9c 91       	ld	r25, X
    3f48:	f9 01       	movw	r30, r18
    3f4a:	91 83       	std	Z+1, r25	; 0x01
    3f4c:	80 83       	st	Z, r24
													/*
													 * Configure wave form generation mode to work with PWM_Phase_FrequencyCorrect_OCR1A mode
													 * Clear WGM12 bit in TCCR1B register
													 * Set WMG13 bit in TCCR1B register
													 */
													TIMER1_CONTROL_REGIRSTER_B =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT12);
    3f4e:	2e e4       	ldi	r18, 0x4E	; 78
    3f50:	30 e0       	ldi	r19, 0x00	; 0
    3f52:	ae e4       	ldi	r26, 0x4E	; 78
    3f54:	b0 e0       	ldi	r27, 0x00	; 0
    3f56:	ee e4       	ldi	r30, 0x4E	; 78
    3f58:	f0 e0       	ldi	r31, 0x00	; 0
    3f5a:	80 81       	ld	r24, Z
    3f5c:	91 81       	ldd	r25, Z+1	; 0x01
    3f5e:	87 7f       	andi	r24, 0xF7	; 247
    3f60:	11 96       	adiw	r26, 0x01	; 1
    3f62:	9c 93       	st	X, r25
    3f64:	8e 93       	st	-X, r24
    3f66:	8d 91       	ld	r24, X+
    3f68:	9c 91       	ld	r25, X
    3f6a:	f9 01       	movw	r30, r18
    3f6c:	91 83       	std	Z+1, r25	; 0x01
    3f6e:	80 83       	st	Z, r24
													TIMER1_CONTROL_REGIRSTER_B =  SET_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT13);
    3f70:	2e e4       	ldi	r18, 0x4E	; 78
    3f72:	30 e0       	ldi	r19, 0x00	; 0
    3f74:	ae e4       	ldi	r26, 0x4E	; 78
    3f76:	b0 e0       	ldi	r27, 0x00	; 0
    3f78:	ee e4       	ldi	r30, 0x4E	; 78
    3f7a:	f0 e0       	ldi	r31, 0x00	; 0
    3f7c:	80 81       	ld	r24, Z
    3f7e:	91 81       	ldd	r25, Z+1	; 0x01
    3f80:	80 61       	ori	r24, 0x10	; 16
    3f82:	11 96       	adiw	r26, 0x01	; 1
    3f84:	9c 93       	st	X, r25
    3f86:	8e 93       	st	-X, r24
    3f88:	8d 91       	ld	r24, X+
    3f8a:	9c 91       	ld	r25, X
    3f8c:	11 97       	sbiw	r26, 0x01	; 1
    3f8e:	f9 01       	movw	r30, r18
    3f90:	91 83       	std	Z+1, r25	; 0x01
    3f92:	80 83       	st	Z, r24

													switch(Timer1_config_PTR->channel)
    3f94:	e9 81       	ldd	r30, Y+1	; 0x01
    3f96:	fa 81       	ldd	r31, Y+2	; 0x02
    3f98:	80 85       	ldd	r24, Z+8	; 0x08
    3f9a:	28 2f       	mov	r18, r24
    3f9c:	30 e0       	ldi	r19, 0x00	; 0
    3f9e:	3a 87       	std	Y+10, r19	; 0x0a
    3fa0:	29 87       	std	Y+9, r18	; 0x09
    3fa2:	89 85       	ldd	r24, Y+9	; 0x09
    3fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fa6:	00 97       	sbiw	r24, 0x00	; 0
    3fa8:	39 f0       	breq	.+14     	; 0x3fb8 <Timer1_Init+0x1574>
    3faa:	e9 85       	ldd	r30, Y+9	; 0x09
    3fac:	fa 85       	ldd	r31, Y+10	; 0x0a
    3fae:	e1 30       	cpi	r30, 0x01	; 1
    3fb0:	f1 05       	cpc	r31, r1
    3fb2:	09 f4       	brne	.+2      	; 0x3fb6 <Timer1_Init+0x1572>
    3fb4:	44 c0       	rjmp	.+136    	; 0x403e <Timer1_Init+0x15fa>
    3fb6:	48 c3       	rjmp	.+1680   	; 0x4648 <Timer1_Init+0x1c04>
													case ChannelA:
														/*
														 * Configure OC1A as Output PIN
														 * the pin where the PWM signal is generated from MC
														 */
														OC1A_DIRECTION_PORT = SET_BIT(OC1A_DIRECTION_PORT, OC1A_PIN);
    3fb8:	21 e3       	ldi	r18, 0x31	; 49
    3fba:	30 e0       	ldi	r19, 0x00	; 0
    3fbc:	a1 e3       	ldi	r26, 0x31	; 49
    3fbe:	b0 e0       	ldi	r27, 0x00	; 0
    3fc0:	e1 e3       	ldi	r30, 0x31	; 49
    3fc2:	f0 e0       	ldi	r31, 0x00	; 0
    3fc4:	80 81       	ld	r24, Z
    3fc6:	80 62       	ori	r24, 0x20	; 32
    3fc8:	8c 93       	st	X, r24
    3fca:	8c 91       	ld	r24, X
    3fcc:	f9 01       	movw	r30, r18
    3fce:	80 83       	st	Z, r24
														/*
														 * Configure FOC1A bit in the TCCR1 register to be low
														 * As Timer1 is PWM mode
														 * Make FOC1A to be low as it is PWM_PhaseCorrect_OCR1A mode
														 */
														TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    3fd0:	2f e4       	ldi	r18, 0x4F	; 79
    3fd2:	30 e0       	ldi	r19, 0x00	; 0
    3fd4:	af e4       	ldi	r26, 0x4F	; 79
    3fd6:	b0 e0       	ldi	r27, 0x00	; 0
    3fd8:	ef e4       	ldi	r30, 0x4F	; 79
    3fda:	f0 e0       	ldi	r31, 0x00	; 0
    3fdc:	80 81       	ld	r24, Z
    3fde:	91 81       	ldd	r25, Z+1	; 0x01
    3fe0:	87 7f       	andi	r24, 0xF7	; 247
    3fe2:	11 96       	adiw	r26, 0x01	; 1
    3fe4:	9c 93       	st	X, r25
    3fe6:	8e 93       	st	-X, r24
    3fe8:	8d 91       	ld	r24, X+
    3fea:	9c 91       	ld	r25, X
    3fec:	f9 01       	movw	r30, r18
    3fee:	91 83       	std	Z+1, r25	; 0x01
    3ff0:	80 83       	st	Z, r24
														/*
														 * Configure compare output mode to work with Timer1
														 * with one mode from 4 modes in TCCR1A
														 * Configure COM1A0/COM1A1 bits in TCCR1A register
														 */
														TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1A_MASK_CLEAR) |
    3ff2:	af e4       	ldi	r26, 0x4F	; 79
    3ff4:	b0 e0       	ldi	r27, 0x00	; 0
    3ff6:	ef e4       	ldi	r30, 0x4F	; 79
    3ff8:	f0 e0       	ldi	r31, 0x00	; 0
    3ffa:	80 81       	ld	r24, Z
    3ffc:	91 81       	ldd	r25, Z+1	; 0x01
    3ffe:	9c 01       	movw	r18, r24
    4000:	2f 73       	andi	r18, 0x3F	; 63
    4002:	30 70       	andi	r19, 0x00	; 0
    4004:	e9 81       	ldd	r30, Y+1	; 0x01
    4006:	fa 81       	ldd	r31, Y+2	; 0x02
    4008:	83 85       	ldd	r24, Z+11	; 0x0b
    400a:	88 2f       	mov	r24, r24
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	00 24       	eor	r0, r0
    4010:	96 95       	lsr	r25
    4012:	87 95       	ror	r24
    4014:	07 94       	ror	r0
    4016:	96 95       	lsr	r25
    4018:	87 95       	ror	r24
    401a:	07 94       	ror	r0
    401c:	98 2f       	mov	r25, r24
    401e:	80 2d       	mov	r24, r0
    4020:	82 2b       	or	r24, r18
    4022:	93 2b       	or	r25, r19
    4024:	11 96       	adiw	r26, 0x01	; 1
    4026:	9c 93       	st	X, r25
    4028:	8e 93       	st	-X, r24
														/*
														 * Configure Compare match value for Timer1 to start count from it
														 * Anding with 0XFFFF to make sure the value won't exceed
														 * OXFFFF as it is 16-bit Timer
														 */
														TIMER1_OUTPUT_COMPARE_REGISTER_A = ((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF;
    402a:	aa e4       	ldi	r26, 0x4A	; 74
    402c:	b0 e0       	ldi	r27, 0x00	; 0
    402e:	e9 81       	ldd	r30, Y+1	; 0x01
    4030:	fa 81       	ldd	r31, Y+2	; 0x02
    4032:	82 81       	ldd	r24, Z+2	; 0x02
    4034:	93 81       	ldd	r25, Z+3	; 0x03
    4036:	11 96       	adiw	r26, 0x01	; 1
    4038:	9c 93       	st	X, r25
    403a:	8e 93       	st	-X, r24
    403c:	05 c3       	rjmp	.+1546   	; 0x4648 <Timer1_Init+0x1c04>
													case ChannelB:
														/*
														 * Configure OC1A as Output PIN
														 * the pin where the PWM signal is generated from MC
														 */
														OC1B_DIRECTION_PORT = SET_BIT(OC1B_DIRECTION_PORT, OC1B_PIN);
    403e:	21 e3       	ldi	r18, 0x31	; 49
    4040:	30 e0       	ldi	r19, 0x00	; 0
    4042:	a1 e3       	ldi	r26, 0x31	; 49
    4044:	b0 e0       	ldi	r27, 0x00	; 0
    4046:	e1 e3       	ldi	r30, 0x31	; 49
    4048:	f0 e0       	ldi	r31, 0x00	; 0
    404a:	80 81       	ld	r24, Z
    404c:	80 61       	ori	r24, 0x10	; 16
    404e:	8c 93       	st	X, r24
    4050:	8c 91       	ld	r24, X
    4052:	f9 01       	movw	r30, r18
    4054:	80 83       	st	Z, r24
														/*
														 * Configure FOC1B bit in the TCCR1 register to be low
														 * As Timer1 is PWM
														 * Make FOC1B to be low as it is FAST_PWM_10bit mode
														 */
														TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    4056:	2f e4       	ldi	r18, 0x4F	; 79
    4058:	30 e0       	ldi	r19, 0x00	; 0
    405a:	af e4       	ldi	r26, 0x4F	; 79
    405c:	b0 e0       	ldi	r27, 0x00	; 0
    405e:	ef e4       	ldi	r30, 0x4F	; 79
    4060:	f0 e0       	ldi	r31, 0x00	; 0
    4062:	80 81       	ld	r24, Z
    4064:	91 81       	ldd	r25, Z+1	; 0x01
    4066:	8b 7f       	andi	r24, 0xFB	; 251
    4068:	11 96       	adiw	r26, 0x01	; 1
    406a:	9c 93       	st	X, r25
    406c:	8e 93       	st	-X, r24
    406e:	8d 91       	ld	r24, X+
    4070:	9c 91       	ld	r25, X
    4072:	f9 01       	movw	r30, r18
    4074:	91 83       	std	Z+1, r25	; 0x01
    4076:	80 83       	st	Z, r24
														/*
														 * Configure compare output mode to work with Timer1
														 * with one mode from 4 modes in TCCR1A
														 * Configure COM1B0/COM1B1 bits in TCCR1A register
														 */
														TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1B_MASK_CLEAR) |
    4078:	af e4       	ldi	r26, 0x4F	; 79
    407a:	b0 e0       	ldi	r27, 0x00	; 0
    407c:	ef e4       	ldi	r30, 0x4F	; 79
    407e:	f0 e0       	ldi	r31, 0x00	; 0
    4080:	80 81       	ld	r24, Z
    4082:	91 81       	ldd	r25, Z+1	; 0x01
    4084:	9c 01       	movw	r18, r24
    4086:	2f 7c       	andi	r18, 0xCF	; 207
    4088:	30 70       	andi	r19, 0x00	; 0
    408a:	e9 81       	ldd	r30, Y+1	; 0x01
    408c:	fa 81       	ldd	r31, Y+2	; 0x02
    408e:	83 85       	ldd	r24, Z+11	; 0x0b
    4090:	88 2f       	mov	r24, r24
    4092:	90 e0       	ldi	r25, 0x00	; 0
    4094:	82 95       	swap	r24
    4096:	92 95       	swap	r25
    4098:	90 7f       	andi	r25, 0xF0	; 240
    409a:	98 27       	eor	r25, r24
    409c:	80 7f       	andi	r24, 0xF0	; 240
    409e:	98 27       	eor	r25, r24
    40a0:	82 2b       	or	r24, r18
    40a2:	93 2b       	or	r25, r19
    40a4:	11 96       	adiw	r26, 0x01	; 1
    40a6:	9c 93       	st	X, r25
    40a8:	8e 93       	st	-X, r24
														 * Configure Compare match value for Timer1 to start count from it
														 * Anding with 0XFFFF to make sure the value won't exceed
														 * OXFFFF as it is 16-bit Timer
														 * to make it count right put OCR1A  greater than the value in OCR1B by 1
														 */
														TIMER1_OUTPUT_COMPARE_REGISTER_A = (((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF) + 1;
    40aa:	aa e4       	ldi	r26, 0x4A	; 74
    40ac:	b0 e0       	ldi	r27, 0x00	; 0
    40ae:	e9 81       	ldd	r30, Y+1	; 0x01
    40b0:	fa 81       	ldd	r31, Y+2	; 0x02
    40b2:	82 81       	ldd	r24, Z+2	; 0x02
    40b4:	93 81       	ldd	r25, Z+3	; 0x03
    40b6:	01 96       	adiw	r24, 0x01	; 1
    40b8:	11 96       	adiw	r26, 0x01	; 1
    40ba:	9c 93       	st	X, r25
    40bc:	8e 93       	st	-X, r24
														TIMER1_OUTPUT_COMPARE_REGISTER_B = ((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF;
    40be:	a8 e4       	ldi	r26, 0x48	; 72
    40c0:	b0 e0       	ldi	r27, 0x00	; 0
    40c2:	e9 81       	ldd	r30, Y+1	; 0x01
    40c4:	fa 81       	ldd	r31, Y+2	; 0x02
    40c6:	82 81       	ldd	r24, Z+2	; 0x02
    40c8:	93 81       	ldd	r25, Z+3	; 0x03
    40ca:	11 96       	adiw	r26, 0x01	; 1
    40cc:	9c 93       	st	X, r25
    40ce:	8e 93       	st	-X, r24
    40d0:	bb c2       	rjmp	.+1398   	; 0x4648 <Timer1_Init+0x1c04>
													/*
													 * Configure wave form generation mode to work with CTC_ICR1 mode
													 * Set WMG10 bit in TCCR1A register
													 * Set WMG11 bit in TCCR1A register
													 */
													TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT10);
    40d2:	2f e4       	ldi	r18, 0x4F	; 79
    40d4:	30 e0       	ldi	r19, 0x00	; 0
    40d6:	af e4       	ldi	r26, 0x4F	; 79
    40d8:	b0 e0       	ldi	r27, 0x00	; 0
    40da:	ef e4       	ldi	r30, 0x4F	; 79
    40dc:	f0 e0       	ldi	r31, 0x00	; 0
    40de:	80 81       	ld	r24, Z
    40e0:	91 81       	ldd	r25, Z+1	; 0x01
    40e2:	8e 7f       	andi	r24, 0xFE	; 254
    40e4:	11 96       	adiw	r26, 0x01	; 1
    40e6:	9c 93       	st	X, r25
    40e8:	8e 93       	st	-X, r24
    40ea:	8d 91       	ld	r24, X+
    40ec:	9c 91       	ld	r25, X
    40ee:	f9 01       	movw	r30, r18
    40f0:	91 83       	std	Z+1, r25	; 0x01
    40f2:	80 83       	st	Z, r24
													TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT11);
    40f4:	2f e4       	ldi	r18, 0x4F	; 79
    40f6:	30 e0       	ldi	r19, 0x00	; 0
    40f8:	af e4       	ldi	r26, 0x4F	; 79
    40fa:	b0 e0       	ldi	r27, 0x00	; 0
    40fc:	ef e4       	ldi	r30, 0x4F	; 79
    40fe:	f0 e0       	ldi	r31, 0x00	; 0
    4100:	80 81       	ld	r24, Z
    4102:	91 81       	ldd	r25, Z+1	; 0x01
    4104:	8d 7f       	andi	r24, 0xFD	; 253
    4106:	11 96       	adiw	r26, 0x01	; 1
    4108:	9c 93       	st	X, r25
    410a:	8e 93       	st	-X, r24
    410c:	8d 91       	ld	r24, X+
    410e:	9c 91       	ld	r25, X
    4110:	f9 01       	movw	r30, r18
    4112:	91 83       	std	Z+1, r25	; 0x01
    4114:	80 83       	st	Z, r24
													/*
													 * Configure wave form generation mode to work with CTC_ICR1 mode
													 * Set WMG13 bit in TCCR1B register
													 * Set WMG12 bit in TCCR1B register
													 */
													TIMER1_CONTROL_REGIRSTER_B =  SET_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT12);
    4116:	2e e4       	ldi	r18, 0x4E	; 78
    4118:	30 e0       	ldi	r19, 0x00	; 0
    411a:	ae e4       	ldi	r26, 0x4E	; 78
    411c:	b0 e0       	ldi	r27, 0x00	; 0
    411e:	ee e4       	ldi	r30, 0x4E	; 78
    4120:	f0 e0       	ldi	r31, 0x00	; 0
    4122:	80 81       	ld	r24, Z
    4124:	91 81       	ldd	r25, Z+1	; 0x01
    4126:	88 60       	ori	r24, 0x08	; 8
    4128:	11 96       	adiw	r26, 0x01	; 1
    412a:	9c 93       	st	X, r25
    412c:	8e 93       	st	-X, r24
    412e:	8d 91       	ld	r24, X+
    4130:	9c 91       	ld	r25, X
    4132:	f9 01       	movw	r30, r18
    4134:	91 83       	std	Z+1, r25	; 0x01
    4136:	80 83       	st	Z, r24
													TIMER1_CONTROL_REGIRSTER_B =  SET_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT13);
    4138:	2e e4       	ldi	r18, 0x4E	; 78
    413a:	30 e0       	ldi	r19, 0x00	; 0
    413c:	ae e4       	ldi	r26, 0x4E	; 78
    413e:	b0 e0       	ldi	r27, 0x00	; 0
    4140:	ee e4       	ldi	r30, 0x4E	; 78
    4142:	f0 e0       	ldi	r31, 0x00	; 0
    4144:	80 81       	ld	r24, Z
    4146:	91 81       	ldd	r25, Z+1	; 0x01
    4148:	80 61       	ori	r24, 0x10	; 16
    414a:	11 96       	adiw	r26, 0x01	; 1
    414c:	9c 93       	st	X, r25
    414e:	8e 93       	st	-X, r24
    4150:	8d 91       	ld	r24, X+
    4152:	9c 91       	ld	r25, X
    4154:	f9 01       	movw	r30, r18
    4156:	91 83       	std	Z+1, r25	; 0x01
    4158:	80 83       	st	Z, r24
													/*
													 * Configure Input capture value for Timer1 to be the top from it
													 * Anding with 0XFFFF to make sure the value won't exceed
													 * OXFFFF as it is 16-bit Timer
													 */
													TIMER1_INPUT_CAPTURE_REGISTER  = ( (Timer1_config_PTR->timer1_InputCaptureValue) & 0XFFFF) ;
    415a:	a6 e4       	ldi	r26, 0x46	; 70
    415c:	b0 e0       	ldi	r27, 0x00	; 0
    415e:	e9 81       	ldd	r30, Y+1	; 0x01
    4160:	fa 81       	ldd	r31, Y+2	; 0x02
    4162:	84 81       	ldd	r24, Z+4	; 0x04
    4164:	95 81       	ldd	r25, Z+5	; 0x05
    4166:	11 96       	adiw	r26, 0x01	; 1
    4168:	9c 93       	st	X, r25
    416a:	8e 93       	st	-X, r24

													switch(Timer1_config_PTR->channel)
    416c:	e9 81       	ldd	r30, Y+1	; 0x01
    416e:	fa 81       	ldd	r31, Y+2	; 0x02
    4170:	80 85       	ldd	r24, Z+8	; 0x08
    4172:	28 2f       	mov	r18, r24
    4174:	30 e0       	ldi	r19, 0x00	; 0
    4176:	38 87       	std	Y+8, r19	; 0x08
    4178:	2f 83       	std	Y+7, r18	; 0x07
    417a:	8f 81       	ldd	r24, Y+7	; 0x07
    417c:	98 85       	ldd	r25, Y+8	; 0x08
    417e:	00 97       	sbiw	r24, 0x00	; 0
    4180:	39 f0       	breq	.+14     	; 0x4190 <Timer1_Init+0x174c>
    4182:	ef 81       	ldd	r30, Y+7	; 0x07
    4184:	f8 85       	ldd	r31, Y+8	; 0x08
    4186:	e1 30       	cpi	r30, 0x01	; 1
    4188:	f1 05       	cpc	r31, r1
    418a:	09 f4       	brne	.+2      	; 0x418e <Timer1_Init+0x174a>
    418c:	44 c0       	rjmp	.+136    	; 0x4216 <Timer1_Init+0x17d2>
    418e:	5c c2       	rjmp	.+1208   	; 0x4648 <Timer1_Init+0x1c04>
														/*
														 * Configure FOC1A bit in the TCCR1 register to be active
														 * As Timer1 is non-PWM
														 * Make FOC1A to be Active as it is compare mode
														 */
														TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    4190:	2f e4       	ldi	r18, 0x4F	; 79
    4192:	30 e0       	ldi	r19, 0x00	; 0
    4194:	af e4       	ldi	r26, 0x4F	; 79
    4196:	b0 e0       	ldi	r27, 0x00	; 0
    4198:	ef e4       	ldi	r30, 0x4F	; 79
    419a:	f0 e0       	ldi	r31, 0x00	; 0
    419c:	80 81       	ld	r24, Z
    419e:	91 81       	ldd	r25, Z+1	; 0x01
    41a0:	88 60       	ori	r24, 0x08	; 8
    41a2:	11 96       	adiw	r26, 0x01	; 1
    41a4:	9c 93       	st	X, r25
    41a6:	8e 93       	st	-X, r24
    41a8:	8d 91       	ld	r24, X+
    41aa:	9c 91       	ld	r25, X
    41ac:	f9 01       	movw	r30, r18
    41ae:	91 83       	std	Z+1, r25	; 0x01
    41b0:	80 83       	st	Z, r24
														/*
														 * Configure compare output mode to work with Timer1
														 * with one mode from 4 modes in TCCR1A
														 * Configure COM1A0/COM1A1 bits in TCCR1A register
														 */
														TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1A_MASK_CLEAR) |
    41b2:	af e4       	ldi	r26, 0x4F	; 79
    41b4:	b0 e0       	ldi	r27, 0x00	; 0
    41b6:	ef e4       	ldi	r30, 0x4F	; 79
    41b8:	f0 e0       	ldi	r31, 0x00	; 0
    41ba:	80 81       	ld	r24, Z
    41bc:	91 81       	ldd	r25, Z+1	; 0x01
    41be:	9c 01       	movw	r18, r24
    41c0:	2f 73       	andi	r18, 0x3F	; 63
    41c2:	30 70       	andi	r19, 0x00	; 0
    41c4:	e9 81       	ldd	r30, Y+1	; 0x01
    41c6:	fa 81       	ldd	r31, Y+2	; 0x02
    41c8:	81 85       	ldd	r24, Z+9	; 0x09
    41ca:	88 2f       	mov	r24, r24
    41cc:	90 e0       	ldi	r25, 0x00	; 0
    41ce:	00 24       	eor	r0, r0
    41d0:	96 95       	lsr	r25
    41d2:	87 95       	ror	r24
    41d4:	07 94       	ror	r0
    41d6:	96 95       	lsr	r25
    41d8:	87 95       	ror	r24
    41da:	07 94       	ror	r0
    41dc:	98 2f       	mov	r25, r24
    41de:	80 2d       	mov	r24, r0
    41e0:	82 2b       	or	r24, r18
    41e2:	93 2b       	or	r25, r19
    41e4:	11 96       	adiw	r26, 0x01	; 1
    41e6:	9c 93       	st	X, r25
    41e8:	8e 93       	st	-X, r24
														/*
														 * Configure Compare match value for Timer1 to start count from it
														 * Anding with 0XFFFF to make sure the value won't exceed
														 * OXFFFF as it is 16-bit Timer
														 */
														TIMER1_OUTPUT_COMPARE_REGISTER_A = ((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF;
    41ea:	aa e4       	ldi	r26, 0x4A	; 74
    41ec:	b0 e0       	ldi	r27, 0x00	; 0
    41ee:	e9 81       	ldd	r30, Y+1	; 0x01
    41f0:	fa 81       	ldd	r31, Y+2	; 0x02
    41f2:	82 81       	ldd	r24, Z+2	; 0x02
    41f4:	93 81       	ldd	r25, Z+3	; 0x03
    41f6:	11 96       	adiw	r26, 0x01	; 1
    41f8:	9c 93       	st	X, r25
    41fa:	8e 93       	st	-X, r24
														 * Enable Timer1 compare match interrupt
														 * wait for: -Enable I-bit "mask bit" in the SREG register
														 *           -OCF1 bit in the TIFR register to be set
														 * Timer1 compare match mode is ready to work after that
														 */
														TIMER1_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER1_INTERRUPT_MASK_REGISTER,TIMER1_OUTPUT_COMPARE_MATCH_INTERRUPT_A);
    41fc:	29 e5       	ldi	r18, 0x59	; 89
    41fe:	30 e0       	ldi	r19, 0x00	; 0
    4200:	a9 e5       	ldi	r26, 0x59	; 89
    4202:	b0 e0       	ldi	r27, 0x00	; 0
    4204:	e9 e5       	ldi	r30, 0x59	; 89
    4206:	f0 e0       	ldi	r31, 0x00	; 0
    4208:	80 81       	ld	r24, Z
    420a:	80 61       	ori	r24, 0x10	; 16
    420c:	8c 93       	st	X, r24
    420e:	8c 91       	ld	r24, X
    4210:	f9 01       	movw	r30, r18
    4212:	80 83       	st	Z, r24
    4214:	19 c2       	rjmp	.+1074   	; 0x4648 <Timer1_Init+0x1c04>
														/*
														 * Configure FOC1B bit in the TCCR1 register to be active
														 * As Timer1 is non-PWM
														 * Make FOC1B to be Active as it is compare mode
														 */
														TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    4216:	2f e4       	ldi	r18, 0x4F	; 79
    4218:	30 e0       	ldi	r19, 0x00	; 0
    421a:	af e4       	ldi	r26, 0x4F	; 79
    421c:	b0 e0       	ldi	r27, 0x00	; 0
    421e:	ef e4       	ldi	r30, 0x4F	; 79
    4220:	f0 e0       	ldi	r31, 0x00	; 0
    4222:	80 81       	ld	r24, Z
    4224:	91 81       	ldd	r25, Z+1	; 0x01
    4226:	84 60       	ori	r24, 0x04	; 4
    4228:	11 96       	adiw	r26, 0x01	; 1
    422a:	9c 93       	st	X, r25
    422c:	8e 93       	st	-X, r24
    422e:	8d 91       	ld	r24, X+
    4230:	9c 91       	ld	r25, X
    4232:	f9 01       	movw	r30, r18
    4234:	91 83       	std	Z+1, r25	; 0x01
    4236:	80 83       	st	Z, r24
														/*
														 * Configure compare output mode to work with Timer1
														 * with one mode from 4 modes in TCCR1A
														 * Configure COM1B0/COM1B1 bits in TCCR1A register
														 */
														TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1B_MASK_CLEAR) |
    4238:	af e4       	ldi	r26, 0x4F	; 79
    423a:	b0 e0       	ldi	r27, 0x00	; 0
    423c:	ef e4       	ldi	r30, 0x4F	; 79
    423e:	f0 e0       	ldi	r31, 0x00	; 0
    4240:	80 81       	ld	r24, Z
    4242:	91 81       	ldd	r25, Z+1	; 0x01
    4244:	9c 01       	movw	r18, r24
    4246:	2f 7c       	andi	r18, 0xCF	; 207
    4248:	30 70       	andi	r19, 0x00	; 0
    424a:	e9 81       	ldd	r30, Y+1	; 0x01
    424c:	fa 81       	ldd	r31, Y+2	; 0x02
    424e:	81 85       	ldd	r24, Z+9	; 0x09
    4250:	88 2f       	mov	r24, r24
    4252:	90 e0       	ldi	r25, 0x00	; 0
    4254:	82 95       	swap	r24
    4256:	92 95       	swap	r25
    4258:	90 7f       	andi	r25, 0xF0	; 240
    425a:	98 27       	eor	r25, r24
    425c:	80 7f       	andi	r24, 0xF0	; 240
    425e:	98 27       	eor	r25, r24
    4260:	82 2b       	or	r24, r18
    4262:	93 2b       	or	r25, r19
    4264:	11 96       	adiw	r26, 0x01	; 1
    4266:	9c 93       	st	X, r25
    4268:	8e 93       	st	-X, r24
														 * Configure Compare match value for Timer1 to start count from it
														 * Anding with 0XFFFF to make sure the value won't exceed
														 * OXFFFF as it is 16-bit Timer
														 * to make it count right put OCR1A  greater than the value in OCR1B by 1
														 */
														TIMER1_OUTPUT_COMPARE_REGISTER_A = (((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF) + 1;
    426a:	aa e4       	ldi	r26, 0x4A	; 74
    426c:	b0 e0       	ldi	r27, 0x00	; 0
    426e:	e9 81       	ldd	r30, Y+1	; 0x01
    4270:	fa 81       	ldd	r31, Y+2	; 0x02
    4272:	82 81       	ldd	r24, Z+2	; 0x02
    4274:	93 81       	ldd	r25, Z+3	; 0x03
    4276:	01 96       	adiw	r24, 0x01	; 1
    4278:	11 96       	adiw	r26, 0x01	; 1
    427a:	9c 93       	st	X, r25
    427c:	8e 93       	st	-X, r24
														TIMER1_OUTPUT_COMPARE_REGISTER_B = ((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF;
    427e:	a8 e4       	ldi	r26, 0x48	; 72
    4280:	b0 e0       	ldi	r27, 0x00	; 0
    4282:	e9 81       	ldd	r30, Y+1	; 0x01
    4284:	fa 81       	ldd	r31, Y+2	; 0x02
    4286:	82 81       	ldd	r24, Z+2	; 0x02
    4288:	93 81       	ldd	r25, Z+3	; 0x03
    428a:	11 96       	adiw	r26, 0x01	; 1
    428c:	9c 93       	st	X, r25
    428e:	8e 93       	st	-X, r24
														 * Enable Timer1 compare match interrupt
														 * wait for: -Enable I-bit "mask bit" in the SREG register
														 *           -OCF1 bit in the TIFR register to be set
														 * Timer1 compare match mode is ready to work after that
														 */
														TIMER1_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER1_INTERRUPT_MASK_REGISTER,TIMER1_OUTPUT_COMPARE_MATCH_INTERRUPT_B);
    4290:	29 e5       	ldi	r18, 0x59	; 89
    4292:	30 e0       	ldi	r19, 0x00	; 0
    4294:	a9 e5       	ldi	r26, 0x59	; 89
    4296:	b0 e0       	ldi	r27, 0x00	; 0
    4298:	e9 e5       	ldi	r30, 0x59	; 89
    429a:	f0 e0       	ldi	r31, 0x00	; 0
    429c:	80 81       	ld	r24, Z
    429e:	88 60       	ori	r24, 0x08	; 8
    42a0:	8c 93       	st	X, r24
    42a2:	8c 91       	ld	r24, X
    42a4:	f9 01       	movw	r30, r18
    42a6:	80 83       	st	Z, r24
    42a8:	cf c1       	rjmp	.+926    	; 0x4648 <Timer1_Init+0x1c04>
													/*
													 * Configure wave form generation mode to work with PWM_PhaseCorrect_ICR1 mode
													 * Clear WGM10 bit in TCCR1A register
													 * Set WGM11 bit in TCCR1A register
													 */
													TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT10);
    42aa:	2f e4       	ldi	r18, 0x4F	; 79
    42ac:	30 e0       	ldi	r19, 0x00	; 0
    42ae:	af e4       	ldi	r26, 0x4F	; 79
    42b0:	b0 e0       	ldi	r27, 0x00	; 0
    42b2:	ef e4       	ldi	r30, 0x4F	; 79
    42b4:	f0 e0       	ldi	r31, 0x00	; 0
    42b6:	80 81       	ld	r24, Z
    42b8:	91 81       	ldd	r25, Z+1	; 0x01
    42ba:	8e 7f       	andi	r24, 0xFE	; 254
    42bc:	11 96       	adiw	r26, 0x01	; 1
    42be:	9c 93       	st	X, r25
    42c0:	8e 93       	st	-X, r24
    42c2:	8d 91       	ld	r24, X+
    42c4:	9c 91       	ld	r25, X
    42c6:	f9 01       	movw	r30, r18
    42c8:	91 83       	std	Z+1, r25	; 0x01
    42ca:	80 83       	st	Z, r24
													TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT11);
    42cc:	2f e4       	ldi	r18, 0x4F	; 79
    42ce:	30 e0       	ldi	r19, 0x00	; 0
    42d0:	af e4       	ldi	r26, 0x4F	; 79
    42d2:	b0 e0       	ldi	r27, 0x00	; 0
    42d4:	ef e4       	ldi	r30, 0x4F	; 79
    42d6:	f0 e0       	ldi	r31, 0x00	; 0
    42d8:	80 81       	ld	r24, Z
    42da:	91 81       	ldd	r25, Z+1	; 0x01
    42dc:	82 60       	ori	r24, 0x02	; 2
    42de:	11 96       	adiw	r26, 0x01	; 1
    42e0:	9c 93       	st	X, r25
    42e2:	8e 93       	st	-X, r24
    42e4:	8d 91       	ld	r24, X+
    42e6:	9c 91       	ld	r25, X
    42e8:	f9 01       	movw	r30, r18
    42ea:	91 83       	std	Z+1, r25	; 0x01
    42ec:	80 83       	st	Z, r24
													/*
													 * Configure wave form generation mode to work with FAST_PWM_ICR1 mode
													 * Set WGM12 bit in TCCR1B register
													 * Set WMG13 bit in TCCR1B register
													 */
													TIMER1_CONTROL_REGIRSTER_B =  SET_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT12);
    42ee:	2e e4       	ldi	r18, 0x4E	; 78
    42f0:	30 e0       	ldi	r19, 0x00	; 0
    42f2:	ae e4       	ldi	r26, 0x4E	; 78
    42f4:	b0 e0       	ldi	r27, 0x00	; 0
    42f6:	ee e4       	ldi	r30, 0x4E	; 78
    42f8:	f0 e0       	ldi	r31, 0x00	; 0
    42fa:	80 81       	ld	r24, Z
    42fc:	91 81       	ldd	r25, Z+1	; 0x01
    42fe:	88 60       	ori	r24, 0x08	; 8
    4300:	11 96       	adiw	r26, 0x01	; 1
    4302:	9c 93       	st	X, r25
    4304:	8e 93       	st	-X, r24
    4306:	8d 91       	ld	r24, X+
    4308:	9c 91       	ld	r25, X
    430a:	f9 01       	movw	r30, r18
    430c:	91 83       	std	Z+1, r25	; 0x01
    430e:	80 83       	st	Z, r24
													TIMER1_CONTROL_REGIRSTER_B =  SET_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT13);
    4310:	2e e4       	ldi	r18, 0x4E	; 78
    4312:	30 e0       	ldi	r19, 0x00	; 0
    4314:	ae e4       	ldi	r26, 0x4E	; 78
    4316:	b0 e0       	ldi	r27, 0x00	; 0
    4318:	ee e4       	ldi	r30, 0x4E	; 78
    431a:	f0 e0       	ldi	r31, 0x00	; 0
    431c:	80 81       	ld	r24, Z
    431e:	91 81       	ldd	r25, Z+1	; 0x01
    4320:	80 61       	ori	r24, 0x10	; 16
    4322:	11 96       	adiw	r26, 0x01	; 1
    4324:	9c 93       	st	X, r25
    4326:	8e 93       	st	-X, r24
    4328:	8d 91       	ld	r24, X+
    432a:	9c 91       	ld	r25, X
    432c:	f9 01       	movw	r30, r18
    432e:	91 83       	std	Z+1, r25	; 0x01
    4330:	80 83       	st	Z, r24
													/*
													 * Configure Input capture value for Timer1 to be the top from it
													 * Anding with 0XFFFF to make sure the value won't exceed
													 * OXFFFF as it is 16-bit Timer
													 */
													TIMER1_INPUT_CAPTURE_REGISTER  = ( (Timer1_config_PTR->timer1_InputCaptureValue) & 0XFFFF) ;
    4332:	a6 e4       	ldi	r26, 0x46	; 70
    4334:	b0 e0       	ldi	r27, 0x00	; 0
    4336:	e9 81       	ldd	r30, Y+1	; 0x01
    4338:	fa 81       	ldd	r31, Y+2	; 0x02
    433a:	84 81       	ldd	r24, Z+4	; 0x04
    433c:	95 81       	ldd	r25, Z+5	; 0x05
    433e:	11 96       	adiw	r26, 0x01	; 1
    4340:	9c 93       	st	X, r25
    4342:	8e 93       	st	-X, r24

													switch(Timer1_config_PTR->channel)
    4344:	e9 81       	ldd	r30, Y+1	; 0x01
    4346:	fa 81       	ldd	r31, Y+2	; 0x02
    4348:	80 85       	ldd	r24, Z+8	; 0x08
    434a:	28 2f       	mov	r18, r24
    434c:	30 e0       	ldi	r19, 0x00	; 0
    434e:	3e 83       	std	Y+6, r19	; 0x06
    4350:	2d 83       	std	Y+5, r18	; 0x05
    4352:	8d 81       	ldd	r24, Y+5	; 0x05
    4354:	9e 81       	ldd	r25, Y+6	; 0x06
    4356:	00 97       	sbiw	r24, 0x00	; 0
    4358:	39 f0       	breq	.+14     	; 0x4368 <Timer1_Init+0x1924>
    435a:	ed 81       	ldd	r30, Y+5	; 0x05
    435c:	fe 81       	ldd	r31, Y+6	; 0x06
    435e:	e1 30       	cpi	r30, 0x01	; 1
    4360:	f1 05       	cpc	r31, r1
    4362:	09 f4       	brne	.+2      	; 0x4366 <Timer1_Init+0x1922>
    4364:	44 c0       	rjmp	.+136    	; 0x43ee <Timer1_Init+0x19aa>
    4366:	70 c1       	rjmp	.+736    	; 0x4648 <Timer1_Init+0x1c04>
													case ChannelA:
														/*
														 * Configure OC1A as Output PIN
														 * the pin where the PWM signal is generated from MC
														 */
														OC1A_DIRECTION_PORT = SET_BIT(OC1A_DIRECTION_PORT, OC1A_PIN);
    4368:	21 e3       	ldi	r18, 0x31	; 49
    436a:	30 e0       	ldi	r19, 0x00	; 0
    436c:	a1 e3       	ldi	r26, 0x31	; 49
    436e:	b0 e0       	ldi	r27, 0x00	; 0
    4370:	e1 e3       	ldi	r30, 0x31	; 49
    4372:	f0 e0       	ldi	r31, 0x00	; 0
    4374:	80 81       	ld	r24, Z
    4376:	80 62       	ori	r24, 0x20	; 32
    4378:	8c 93       	st	X, r24
    437a:	8c 91       	ld	r24, X
    437c:	f9 01       	movw	r30, r18
    437e:	80 83       	st	Z, r24
														/*
														 * Configure FOC1A bit in the TCCR1 register to be low
														 * As Timer1 is PWM mode
														 * Make FOC1A to be low as it is FAST_PWM_ICR1 mode
														 */
														TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    4380:	2f e4       	ldi	r18, 0x4F	; 79
    4382:	30 e0       	ldi	r19, 0x00	; 0
    4384:	af e4       	ldi	r26, 0x4F	; 79
    4386:	b0 e0       	ldi	r27, 0x00	; 0
    4388:	ef e4       	ldi	r30, 0x4F	; 79
    438a:	f0 e0       	ldi	r31, 0x00	; 0
    438c:	80 81       	ld	r24, Z
    438e:	91 81       	ldd	r25, Z+1	; 0x01
    4390:	87 7f       	andi	r24, 0xF7	; 247
    4392:	11 96       	adiw	r26, 0x01	; 1
    4394:	9c 93       	st	X, r25
    4396:	8e 93       	st	-X, r24
    4398:	8d 91       	ld	r24, X+
    439a:	9c 91       	ld	r25, X
    439c:	f9 01       	movw	r30, r18
    439e:	91 83       	std	Z+1, r25	; 0x01
    43a0:	80 83       	st	Z, r24
														/*
														 * Configure compare output mode to work with Timer1
														 * with one mode from 4 modes in TCCR1A
														 * Configure COM1A0/COM1A1 bits in TCCR1A register
														 */
														TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1A_MASK_CLEAR) |
    43a2:	af e4       	ldi	r26, 0x4F	; 79
    43a4:	b0 e0       	ldi	r27, 0x00	; 0
    43a6:	ef e4       	ldi	r30, 0x4F	; 79
    43a8:	f0 e0       	ldi	r31, 0x00	; 0
    43aa:	80 81       	ld	r24, Z
    43ac:	91 81       	ldd	r25, Z+1	; 0x01
    43ae:	9c 01       	movw	r18, r24
    43b0:	2f 73       	andi	r18, 0x3F	; 63
    43b2:	30 70       	andi	r19, 0x00	; 0
    43b4:	e9 81       	ldd	r30, Y+1	; 0x01
    43b6:	fa 81       	ldd	r31, Y+2	; 0x02
    43b8:	82 85       	ldd	r24, Z+10	; 0x0a
    43ba:	88 2f       	mov	r24, r24
    43bc:	90 e0       	ldi	r25, 0x00	; 0
    43be:	00 24       	eor	r0, r0
    43c0:	96 95       	lsr	r25
    43c2:	87 95       	ror	r24
    43c4:	07 94       	ror	r0
    43c6:	96 95       	lsr	r25
    43c8:	87 95       	ror	r24
    43ca:	07 94       	ror	r0
    43cc:	98 2f       	mov	r25, r24
    43ce:	80 2d       	mov	r24, r0
    43d0:	82 2b       	or	r24, r18
    43d2:	93 2b       	or	r25, r19
    43d4:	11 96       	adiw	r26, 0x01	; 1
    43d6:	9c 93       	st	X, r25
    43d8:	8e 93       	st	-X, r24
														/*
														 * Configure Compare match value for Timer1 to start count from it
														 * Anding with 0XFFFF to make sure the value won't exceed
														 * OXFFFF as it is 16-bit Timer
														 */
														TIMER1_OUTPUT_COMPARE_REGISTER_A = ((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF;
    43da:	aa e4       	ldi	r26, 0x4A	; 74
    43dc:	b0 e0       	ldi	r27, 0x00	; 0
    43de:	e9 81       	ldd	r30, Y+1	; 0x01
    43e0:	fa 81       	ldd	r31, Y+2	; 0x02
    43e2:	82 81       	ldd	r24, Z+2	; 0x02
    43e4:	93 81       	ldd	r25, Z+3	; 0x03
    43e6:	11 96       	adiw	r26, 0x01	; 1
    43e8:	9c 93       	st	X, r25
    43ea:	8e 93       	st	-X, r24
    43ec:	2d c1       	rjmp	.+602    	; 0x4648 <Timer1_Init+0x1c04>
													case ChannelB:
														/*
														 * Configure OC1A as Output PIN
														 * the pin where the PWM signal is generated from MC
														 */
														OC1B_DIRECTION_PORT = SET_BIT(OC1B_DIRECTION_PORT, OC1B_PIN);
    43ee:	21 e3       	ldi	r18, 0x31	; 49
    43f0:	30 e0       	ldi	r19, 0x00	; 0
    43f2:	a1 e3       	ldi	r26, 0x31	; 49
    43f4:	b0 e0       	ldi	r27, 0x00	; 0
    43f6:	e1 e3       	ldi	r30, 0x31	; 49
    43f8:	f0 e0       	ldi	r31, 0x00	; 0
    43fa:	80 81       	ld	r24, Z
    43fc:	80 61       	ori	r24, 0x10	; 16
    43fe:	8c 93       	st	X, r24
    4400:	8c 91       	ld	r24, X
    4402:	f9 01       	movw	r30, r18
    4404:	80 83       	st	Z, r24
														/*
														 * Configure FOC1B bit in the TCCR1 register to be low
														 * As Timer1 is PWM
														 * Make FOC1B to be low as it is FAST_PWM_ICR1 mode
														 */
														TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    4406:	2f e4       	ldi	r18, 0x4F	; 79
    4408:	30 e0       	ldi	r19, 0x00	; 0
    440a:	af e4       	ldi	r26, 0x4F	; 79
    440c:	b0 e0       	ldi	r27, 0x00	; 0
    440e:	ef e4       	ldi	r30, 0x4F	; 79
    4410:	f0 e0       	ldi	r31, 0x00	; 0
    4412:	80 81       	ld	r24, Z
    4414:	91 81       	ldd	r25, Z+1	; 0x01
    4416:	8b 7f       	andi	r24, 0xFB	; 251
    4418:	11 96       	adiw	r26, 0x01	; 1
    441a:	9c 93       	st	X, r25
    441c:	8e 93       	st	-X, r24
    441e:	8d 91       	ld	r24, X+
    4420:	9c 91       	ld	r25, X
    4422:	f9 01       	movw	r30, r18
    4424:	91 83       	std	Z+1, r25	; 0x01
    4426:	80 83       	st	Z, r24
														/*
														 * Configure compare output mode to work with Timer1
														 * with one mode from 4 modes in TCCR1A
														 * Configure COM1B0/COM1B1 bits in TCCR1A register
														 */
														TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1B_MASK_CLEAR) |
    4428:	af e4       	ldi	r26, 0x4F	; 79
    442a:	b0 e0       	ldi	r27, 0x00	; 0
    442c:	ef e4       	ldi	r30, 0x4F	; 79
    442e:	f0 e0       	ldi	r31, 0x00	; 0
    4430:	80 81       	ld	r24, Z
    4432:	91 81       	ldd	r25, Z+1	; 0x01
    4434:	9c 01       	movw	r18, r24
    4436:	2f 7c       	andi	r18, 0xCF	; 207
    4438:	30 70       	andi	r19, 0x00	; 0
    443a:	e9 81       	ldd	r30, Y+1	; 0x01
    443c:	fa 81       	ldd	r31, Y+2	; 0x02
    443e:	82 85       	ldd	r24, Z+10	; 0x0a
    4440:	88 2f       	mov	r24, r24
    4442:	90 e0       	ldi	r25, 0x00	; 0
    4444:	82 95       	swap	r24
    4446:	92 95       	swap	r25
    4448:	90 7f       	andi	r25, 0xF0	; 240
    444a:	98 27       	eor	r25, r24
    444c:	80 7f       	andi	r24, 0xF0	; 240
    444e:	98 27       	eor	r25, r24
    4450:	82 2b       	or	r24, r18
    4452:	93 2b       	or	r25, r19
    4454:	11 96       	adiw	r26, 0x01	; 1
    4456:	9c 93       	st	X, r25
    4458:	8e 93       	st	-X, r24
														 * Configure Compare match value for Timer1 to start count from it
														 * Anding with 0XFFFF to make sure the value won't exceed
														 * OXFFFF as it is 16-bit Timer
														 * to make it count right put OCR1A  greater than the value in OCR1B by 1
														 */
														TIMER1_OUTPUT_COMPARE_REGISTER_A = (((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF) + 1;
    445a:	aa e4       	ldi	r26, 0x4A	; 74
    445c:	b0 e0       	ldi	r27, 0x00	; 0
    445e:	e9 81       	ldd	r30, Y+1	; 0x01
    4460:	fa 81       	ldd	r31, Y+2	; 0x02
    4462:	82 81       	ldd	r24, Z+2	; 0x02
    4464:	93 81       	ldd	r25, Z+3	; 0x03
    4466:	01 96       	adiw	r24, 0x01	; 1
    4468:	11 96       	adiw	r26, 0x01	; 1
    446a:	9c 93       	st	X, r25
    446c:	8e 93       	st	-X, r24
														TIMER1_OUTPUT_COMPARE_REGISTER_B = ((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF;
    446e:	a8 e4       	ldi	r26, 0x48	; 72
    4470:	b0 e0       	ldi	r27, 0x00	; 0
    4472:	e9 81       	ldd	r30, Y+1	; 0x01
    4474:	fa 81       	ldd	r31, Y+2	; 0x02
    4476:	82 81       	ldd	r24, Z+2	; 0x02
    4478:	93 81       	ldd	r25, Z+3	; 0x03
    447a:	11 96       	adiw	r26, 0x01	; 1
    447c:	9c 93       	st	X, r25
    447e:	8e 93       	st	-X, r24
    4480:	e3 c0       	rjmp	.+454    	; 0x4648 <Timer1_Init+0x1c04>
													/*
													 * Configure wave form generation mode to work with FAST_PWM_OCR1A mode
													 * Set WGM10 bit in TCCR1A register
													 * Set WGM11 bit in TCCR1A register
													 */
													TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT10);
    4482:	2f e4       	ldi	r18, 0x4F	; 79
    4484:	30 e0       	ldi	r19, 0x00	; 0
    4486:	af e4       	ldi	r26, 0x4F	; 79
    4488:	b0 e0       	ldi	r27, 0x00	; 0
    448a:	ef e4       	ldi	r30, 0x4F	; 79
    448c:	f0 e0       	ldi	r31, 0x00	; 0
    448e:	80 81       	ld	r24, Z
    4490:	91 81       	ldd	r25, Z+1	; 0x01
    4492:	81 60       	ori	r24, 0x01	; 1
    4494:	11 96       	adiw	r26, 0x01	; 1
    4496:	9c 93       	st	X, r25
    4498:	8e 93       	st	-X, r24
    449a:	8d 91       	ld	r24, X+
    449c:	9c 91       	ld	r25, X
    449e:	f9 01       	movw	r30, r18
    44a0:	91 83       	std	Z+1, r25	; 0x01
    44a2:	80 83       	st	Z, r24
													TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT11);
    44a4:	2f e4       	ldi	r18, 0x4F	; 79
    44a6:	30 e0       	ldi	r19, 0x00	; 0
    44a8:	af e4       	ldi	r26, 0x4F	; 79
    44aa:	b0 e0       	ldi	r27, 0x00	; 0
    44ac:	ef e4       	ldi	r30, 0x4F	; 79
    44ae:	f0 e0       	ldi	r31, 0x00	; 0
    44b0:	80 81       	ld	r24, Z
    44b2:	91 81       	ldd	r25, Z+1	; 0x01
    44b4:	82 60       	ori	r24, 0x02	; 2
    44b6:	11 96       	adiw	r26, 0x01	; 1
    44b8:	9c 93       	st	X, r25
    44ba:	8e 93       	st	-X, r24
    44bc:	8d 91       	ld	r24, X+
    44be:	9c 91       	ld	r25, X
    44c0:	f9 01       	movw	r30, r18
    44c2:	91 83       	std	Z+1, r25	; 0x01
    44c4:	80 83       	st	Z, r24
													/*
													 * Configure wave form generation mode to work with PWM_PhaseCorrect_ICR1 mode
													 * Set WGM12 bit in TCCR1B register
													 * Set WMG13 bit in TCCR1B register
													 */
													TIMER1_CONTROL_REGIRSTER_B =  SET_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT12);
    44c6:	2e e4       	ldi	r18, 0x4E	; 78
    44c8:	30 e0       	ldi	r19, 0x00	; 0
    44ca:	ae e4       	ldi	r26, 0x4E	; 78
    44cc:	b0 e0       	ldi	r27, 0x00	; 0
    44ce:	ee e4       	ldi	r30, 0x4E	; 78
    44d0:	f0 e0       	ldi	r31, 0x00	; 0
    44d2:	80 81       	ld	r24, Z
    44d4:	91 81       	ldd	r25, Z+1	; 0x01
    44d6:	88 60       	ori	r24, 0x08	; 8
    44d8:	11 96       	adiw	r26, 0x01	; 1
    44da:	9c 93       	st	X, r25
    44dc:	8e 93       	st	-X, r24
    44de:	8d 91       	ld	r24, X+
    44e0:	9c 91       	ld	r25, X
    44e2:	f9 01       	movw	r30, r18
    44e4:	91 83       	std	Z+1, r25	; 0x01
    44e6:	80 83       	st	Z, r24
													TIMER1_CONTROL_REGIRSTER_B =  SET_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT13);
    44e8:	2e e4       	ldi	r18, 0x4E	; 78
    44ea:	30 e0       	ldi	r19, 0x00	; 0
    44ec:	ae e4       	ldi	r26, 0x4E	; 78
    44ee:	b0 e0       	ldi	r27, 0x00	; 0
    44f0:	ee e4       	ldi	r30, 0x4E	; 78
    44f2:	f0 e0       	ldi	r31, 0x00	; 0
    44f4:	80 81       	ld	r24, Z
    44f6:	91 81       	ldd	r25, Z+1	; 0x01
    44f8:	80 61       	ori	r24, 0x10	; 16
    44fa:	11 96       	adiw	r26, 0x01	; 1
    44fc:	9c 93       	st	X, r25
    44fe:	8e 93       	st	-X, r24
    4500:	8d 91       	ld	r24, X+
    4502:	9c 91       	ld	r25, X
    4504:	11 97       	sbiw	r26, 0x01	; 1
    4506:	f9 01       	movw	r30, r18
    4508:	91 83       	std	Z+1, r25	; 0x01
    450a:	80 83       	st	Z, r24

													switch(Timer1_config_PTR->channel)
    450c:	e9 81       	ldd	r30, Y+1	; 0x01
    450e:	fa 81       	ldd	r31, Y+2	; 0x02
    4510:	80 85       	ldd	r24, Z+8	; 0x08
    4512:	28 2f       	mov	r18, r24
    4514:	30 e0       	ldi	r19, 0x00	; 0
    4516:	3c 83       	std	Y+4, r19	; 0x04
    4518:	2b 83       	std	Y+3, r18	; 0x03
    451a:	8b 81       	ldd	r24, Y+3	; 0x03
    451c:	9c 81       	ldd	r25, Y+4	; 0x04
    451e:	00 97       	sbiw	r24, 0x00	; 0
    4520:	39 f0       	breq	.+14     	; 0x4530 <Timer1_Init+0x1aec>
    4522:	eb 81       	ldd	r30, Y+3	; 0x03
    4524:	fc 81       	ldd	r31, Y+4	; 0x04
    4526:	e1 30       	cpi	r30, 0x01	; 1
    4528:	f1 05       	cpc	r31, r1
    452a:	09 f4       	brne	.+2      	; 0x452e <Timer1_Init+0x1aea>
    452c:	44 c0       	rjmp	.+136    	; 0x45b6 <Timer1_Init+0x1b72>
    452e:	8c c0       	rjmp	.+280    	; 0x4648 <Timer1_Init+0x1c04>
													case ChannelA:
														/*
														 * Configure OC1A as Output PIN
														 * the pin where the PWM signal is generated from MC
														 */
														OC1A_DIRECTION_PORT = SET_BIT(OC1A_DIRECTION_PORT, OC1A_PIN);
    4530:	21 e3       	ldi	r18, 0x31	; 49
    4532:	30 e0       	ldi	r19, 0x00	; 0
    4534:	a1 e3       	ldi	r26, 0x31	; 49
    4536:	b0 e0       	ldi	r27, 0x00	; 0
    4538:	e1 e3       	ldi	r30, 0x31	; 49
    453a:	f0 e0       	ldi	r31, 0x00	; 0
    453c:	80 81       	ld	r24, Z
    453e:	80 62       	ori	r24, 0x20	; 32
    4540:	8c 93       	st	X, r24
    4542:	8c 91       	ld	r24, X
    4544:	f9 01       	movw	r30, r18
    4546:	80 83       	st	Z, r24
														/*
														 * Configure FOC1A bit in the TCCR1 register to be low
														 * As Timer1 is PWM mode
														 * Make FOC1A to be low as it is FAST_PWM_OCR1A mode
														 */
														TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    4548:	2f e4       	ldi	r18, 0x4F	; 79
    454a:	30 e0       	ldi	r19, 0x00	; 0
    454c:	af e4       	ldi	r26, 0x4F	; 79
    454e:	b0 e0       	ldi	r27, 0x00	; 0
    4550:	ef e4       	ldi	r30, 0x4F	; 79
    4552:	f0 e0       	ldi	r31, 0x00	; 0
    4554:	80 81       	ld	r24, Z
    4556:	91 81       	ldd	r25, Z+1	; 0x01
    4558:	87 7f       	andi	r24, 0xF7	; 247
    455a:	11 96       	adiw	r26, 0x01	; 1
    455c:	9c 93       	st	X, r25
    455e:	8e 93       	st	-X, r24
    4560:	8d 91       	ld	r24, X+
    4562:	9c 91       	ld	r25, X
    4564:	f9 01       	movw	r30, r18
    4566:	91 83       	std	Z+1, r25	; 0x01
    4568:	80 83       	st	Z, r24
														/*
														 * Configure compare output mode to work with Timer1
														 * with one mode from 4 modes in TCCR1A
														 * Configure COM1A0/COM1A1 bits in TCCR1A register
														 */
														TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1A_MASK_CLEAR) |
    456a:	af e4       	ldi	r26, 0x4F	; 79
    456c:	b0 e0       	ldi	r27, 0x00	; 0
    456e:	ef e4       	ldi	r30, 0x4F	; 79
    4570:	f0 e0       	ldi	r31, 0x00	; 0
    4572:	80 81       	ld	r24, Z
    4574:	91 81       	ldd	r25, Z+1	; 0x01
    4576:	9c 01       	movw	r18, r24
    4578:	2f 73       	andi	r18, 0x3F	; 63
    457a:	30 70       	andi	r19, 0x00	; 0
    457c:	e9 81       	ldd	r30, Y+1	; 0x01
    457e:	fa 81       	ldd	r31, Y+2	; 0x02
    4580:	82 85       	ldd	r24, Z+10	; 0x0a
    4582:	88 2f       	mov	r24, r24
    4584:	90 e0       	ldi	r25, 0x00	; 0
    4586:	00 24       	eor	r0, r0
    4588:	96 95       	lsr	r25
    458a:	87 95       	ror	r24
    458c:	07 94       	ror	r0
    458e:	96 95       	lsr	r25
    4590:	87 95       	ror	r24
    4592:	07 94       	ror	r0
    4594:	98 2f       	mov	r25, r24
    4596:	80 2d       	mov	r24, r0
    4598:	82 2b       	or	r24, r18
    459a:	93 2b       	or	r25, r19
    459c:	11 96       	adiw	r26, 0x01	; 1
    459e:	9c 93       	st	X, r25
    45a0:	8e 93       	st	-X, r24
														/*
														 * Configure Compare match value for Timer1 to start count from it
														 * Anding with 0XFFFF to make sure the value won't exceed
														 * OXFFFF as it is 16-bit Timer
														 */
														TIMER1_OUTPUT_COMPARE_REGISTER_A = ((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF;
    45a2:	aa e4       	ldi	r26, 0x4A	; 74
    45a4:	b0 e0       	ldi	r27, 0x00	; 0
    45a6:	e9 81       	ldd	r30, Y+1	; 0x01
    45a8:	fa 81       	ldd	r31, Y+2	; 0x02
    45aa:	82 81       	ldd	r24, Z+2	; 0x02
    45ac:	93 81       	ldd	r25, Z+3	; 0x03
    45ae:	11 96       	adiw	r26, 0x01	; 1
    45b0:	9c 93       	st	X, r25
    45b2:	8e 93       	st	-X, r24
    45b4:	49 c0       	rjmp	.+146    	; 0x4648 <Timer1_Init+0x1c04>
													case ChannelB:
														/*
														 * Configure OC1A as Output PIN
														 * the pin where the PWM signal is generated from MC
														 */
														OC1B_DIRECTION_PORT = SET_BIT(OC1B_DIRECTION_PORT, OC1B_PIN);
    45b6:	21 e3       	ldi	r18, 0x31	; 49
    45b8:	30 e0       	ldi	r19, 0x00	; 0
    45ba:	a1 e3       	ldi	r26, 0x31	; 49
    45bc:	b0 e0       	ldi	r27, 0x00	; 0
    45be:	e1 e3       	ldi	r30, 0x31	; 49
    45c0:	f0 e0       	ldi	r31, 0x00	; 0
    45c2:	80 81       	ld	r24, Z
    45c4:	80 61       	ori	r24, 0x10	; 16
    45c6:	8c 93       	st	X, r24
    45c8:	8c 91       	ld	r24, X
    45ca:	f9 01       	movw	r30, r18
    45cc:	80 83       	st	Z, r24
														/*
														 * Configure FOC1B bit in the TCCR1 register to be low
														 * As Timer1 is PWM
														 * Make FOC1B to be low as it is FAST_PWM_OCR1A mode
														 */
														TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    45ce:	2f e4       	ldi	r18, 0x4F	; 79
    45d0:	30 e0       	ldi	r19, 0x00	; 0
    45d2:	af e4       	ldi	r26, 0x4F	; 79
    45d4:	b0 e0       	ldi	r27, 0x00	; 0
    45d6:	ef e4       	ldi	r30, 0x4F	; 79
    45d8:	f0 e0       	ldi	r31, 0x00	; 0
    45da:	80 81       	ld	r24, Z
    45dc:	91 81       	ldd	r25, Z+1	; 0x01
    45de:	8b 7f       	andi	r24, 0xFB	; 251
    45e0:	11 96       	adiw	r26, 0x01	; 1
    45e2:	9c 93       	st	X, r25
    45e4:	8e 93       	st	-X, r24
    45e6:	8d 91       	ld	r24, X+
    45e8:	9c 91       	ld	r25, X
    45ea:	f9 01       	movw	r30, r18
    45ec:	91 83       	std	Z+1, r25	; 0x01
    45ee:	80 83       	st	Z, r24
														/*
														 * Configure compare output mode to work with Timer1
														 * with one mode from 4 modes in TCCR1A
														 * Configure COM1B0/COM1B1 bits in TCCR1A register
														 */
														TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1B_MASK_CLEAR) |
    45f0:	af e4       	ldi	r26, 0x4F	; 79
    45f2:	b0 e0       	ldi	r27, 0x00	; 0
    45f4:	ef e4       	ldi	r30, 0x4F	; 79
    45f6:	f0 e0       	ldi	r31, 0x00	; 0
    45f8:	80 81       	ld	r24, Z
    45fa:	91 81       	ldd	r25, Z+1	; 0x01
    45fc:	9c 01       	movw	r18, r24
    45fe:	2f 7c       	andi	r18, 0xCF	; 207
    4600:	30 70       	andi	r19, 0x00	; 0
    4602:	e9 81       	ldd	r30, Y+1	; 0x01
    4604:	fa 81       	ldd	r31, Y+2	; 0x02
    4606:	82 85       	ldd	r24, Z+10	; 0x0a
    4608:	88 2f       	mov	r24, r24
    460a:	90 e0       	ldi	r25, 0x00	; 0
    460c:	82 95       	swap	r24
    460e:	92 95       	swap	r25
    4610:	90 7f       	andi	r25, 0xF0	; 240
    4612:	98 27       	eor	r25, r24
    4614:	80 7f       	andi	r24, 0xF0	; 240
    4616:	98 27       	eor	r25, r24
    4618:	82 2b       	or	r24, r18
    461a:	93 2b       	or	r25, r19
    461c:	11 96       	adiw	r26, 0x01	; 1
    461e:	9c 93       	st	X, r25
    4620:	8e 93       	st	-X, r24
														 * Configure Compare match value for Timer1 to start count from it
														 * Anding with 0XFFFF to make sure the value won't exceed
														 * OXFFFF as it is 16-bit Timer
														 * to make it count right put OCR1A  greater than the value in OCR1B by 1
														 */
														TIMER1_OUTPUT_COMPARE_REGISTER_A = (((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF) + 1;
    4622:	aa e4       	ldi	r26, 0x4A	; 74
    4624:	b0 e0       	ldi	r27, 0x00	; 0
    4626:	e9 81       	ldd	r30, Y+1	; 0x01
    4628:	fa 81       	ldd	r31, Y+2	; 0x02
    462a:	82 81       	ldd	r24, Z+2	; 0x02
    462c:	93 81       	ldd	r25, Z+3	; 0x03
    462e:	01 96       	adiw	r24, 0x01	; 1
    4630:	11 96       	adiw	r26, 0x01	; 1
    4632:	9c 93       	st	X, r25
    4634:	8e 93       	st	-X, r24
														TIMER1_OUTPUT_COMPARE_REGISTER_B = ((Timer1_config_PTR->timer1_compare_MatchValue)) & 0XFFFF;
    4636:	a8 e4       	ldi	r26, 0x48	; 72
    4638:	b0 e0       	ldi	r27, 0x00	; 0
    463a:	e9 81       	ldd	r30, Y+1	; 0x01
    463c:	fa 81       	ldd	r31, Y+2	; 0x02
    463e:	82 81       	ldd	r24, Z+2	; 0x02
    4640:	93 81       	ldd	r25, Z+3	; 0x03
    4642:	11 96       	adiw	r26, 0x01	; 1
    4644:	9c 93       	st	X, r25
    4646:	8e 93       	st	-X, r24

														break;/*End of channel B*/
													}/*End of Channel Type switch case*/
													break;/*End of FAST_PWM_OCR1A mode*/
	}/*End of switch case timer1_mode*/
}/*End of Timer1_Init function */
    4648:	a2 96       	adiw	r28, 0x22	; 34
    464a:	0f b6       	in	r0, 0x3f	; 63
    464c:	f8 94       	cli
    464e:	de bf       	out	0x3e, r29	; 62
    4650:	0f be       	out	0x3f, r0	; 63
    4652:	cd bf       	out	0x3d, r28	; 61
    4654:	cf 91       	pop	r28
    4656:	df 91       	pop	r29
    4658:	08 95       	ret

0000465a <Timer1_setCallBack>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void Timer1_setCallBack( void(*a_ptr)(void) )
{
    465a:	df 93       	push	r29
    465c:	cf 93       	push	r28
    465e:	00 d0       	rcall	.+0      	; 0x4660 <Timer1_setCallBack+0x6>
    4660:	cd b7       	in	r28, 0x3d	; 61
    4662:	de b7       	in	r29, 0x3e	; 62
    4664:	9a 83       	std	Y+2, r25	; 0x02
    4666:	89 83       	std	Y+1, r24	; 0x01
	g_Timer1_callBackPtr = a_ptr;
    4668:	89 81       	ldd	r24, Y+1	; 0x01
    466a:	9a 81       	ldd	r25, Y+2	; 0x02
    466c:	90 93 77 00 	sts	0x0077, r25
    4670:	80 93 76 00 	sts	0x0076, r24
}
    4674:	0f 90       	pop	r0
    4676:	0f 90       	pop	r0
    4678:	cf 91       	pop	r28
    467a:	df 91       	pop	r29
    467c:	08 95       	ret

0000467e <Timer1_DeInit>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void Timer1_DeInit(void)
{
    467e:	df 93       	push	r29
    4680:	cf 93       	push	r28
    4682:	cd b7       	in	r28, 0x3d	; 61
    4684:	de b7       	in	r29, 0x3e	; 62
    4686:	2d 97       	sbiw	r28, 0x0d	; 13
    4688:	0f b6       	in	r0, 0x3f	; 63
    468a:	f8 94       	cli
    468c:	de bf       	out	0x3e, r29	; 62
    468e:	0f be       	out	0x3f, r0	; 63
    4690:	cd bf       	out	0x3d, r28	; 61

	/*Clear all register in Timer1*/
	TIMER1_CONTROL_REGIRSTER_A         &= 0X00;
    4692:	ef e4       	ldi	r30, 0x4F	; 79
    4694:	f0 e0       	ldi	r31, 0x00	; 0
    4696:	80 81       	ld	r24, Z
    4698:	91 81       	ldd	r25, Z+1	; 0x01
    469a:	ef e4       	ldi	r30, 0x4F	; 79
    469c:	f0 e0       	ldi	r31, 0x00	; 0
    469e:	11 82       	std	Z+1, r1	; 0x01
    46a0:	10 82       	st	Z, r1
	TIMER1_CONTROL_REGIRSTER_B         &= 0X00;
    46a2:	ee e4       	ldi	r30, 0x4E	; 78
    46a4:	f0 e0       	ldi	r31, 0x00	; 0
    46a6:	80 81       	ld	r24, Z
    46a8:	91 81       	ldd	r25, Z+1	; 0x01
    46aa:	ee e4       	ldi	r30, 0x4E	; 78
    46ac:	f0 e0       	ldi	r31, 0x00	; 0
    46ae:	11 82       	std	Z+1, r1	; 0x01
    46b0:	10 82       	st	Z, r1
	TIMER1_INITIAL_VALUE_REGISTER      &= 0X00;
    46b2:	ec e4       	ldi	r30, 0x4C	; 76
    46b4:	f0 e0       	ldi	r31, 0x00	; 0
    46b6:	80 81       	ld	r24, Z
    46b8:	91 81       	ldd	r25, Z+1	; 0x01
    46ba:	ec e4       	ldi	r30, 0x4C	; 76
    46bc:	f0 e0       	ldi	r31, 0x00	; 0
    46be:	11 82       	std	Z+1, r1	; 0x01
    46c0:	10 82       	st	Z, r1
	TIMER1_OUTPUT_COMPARE_REGISTER_A   &= 0X00;
    46c2:	ea e4       	ldi	r30, 0x4A	; 74
    46c4:	f0 e0       	ldi	r31, 0x00	; 0
    46c6:	80 81       	ld	r24, Z
    46c8:	91 81       	ldd	r25, Z+1	; 0x01
    46ca:	ea e4       	ldi	r30, 0x4A	; 74
    46cc:	f0 e0       	ldi	r31, 0x00	; 0
    46ce:	11 82       	std	Z+1, r1	; 0x01
    46d0:	10 82       	st	Z, r1
	TIMER1_OUTPUT_COMPARE_REGISTER_B   &= 0X00;
    46d2:	e8 e4       	ldi	r30, 0x48	; 72
    46d4:	f0 e0       	ldi	r31, 0x00	; 0
    46d6:	80 81       	ld	r24, Z
    46d8:	91 81       	ldd	r25, Z+1	; 0x01
    46da:	e8 e4       	ldi	r30, 0x48	; 72
    46dc:	f0 e0       	ldi	r31, 0x00	; 0
    46de:	11 82       	std	Z+1, r1	; 0x01
    46e0:	10 82       	st	Z, r1
	TIMER1_INTERRUPT_MASK_REGISTER     &= 0X00;
    46e2:	e9 e5       	ldi	r30, 0x59	; 89
    46e4:	f0 e0       	ldi	r31, 0x00	; 0
    46e6:	90 81       	ld	r25, Z
    46e8:	e9 e5       	ldi	r30, 0x59	; 89
    46ea:	f0 e0       	ldi	r31, 0x00	; 0
    46ec:	10 82       	st	Z, r1
	TIMER1_INPUT_CAPTURE_REGISTER      &= 0X00;
    46ee:	e6 e4       	ldi	r30, 0x46	; 70
    46f0:	f0 e0       	ldi	r31, 0x00	; 0
    46f2:	80 81       	ld	r24, Z
    46f4:	91 81       	ldd	r25, Z+1	; 0x01
    46f6:	e6 e4       	ldi	r30, 0x46	; 70
    46f8:	f0 e0       	ldi	r31, 0x00	; 0
    46fa:	11 82       	std	Z+1, r1	; 0x01
    46fc:	10 82       	st	Z, r1

}/*End of Timer0_DEInit*/
    46fe:	2d 96       	adiw	r28, 0x0d	; 13
    4700:	0f b6       	in	r0, 0x3f	; 63
    4702:	f8 94       	cli
    4704:	de bf       	out	0x3e, r29	; 62
    4706:	0f be       	out	0x3f, r0	; 63
    4708:	cd bf       	out	0x3d, r28	; 61
    470a:	cf 91       	pop	r28
    470c:	df 91       	pop	r29
    470e:	08 95       	ret

00004710 <Timer1_Stop>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void Timer1_Stop(void)
{
    4710:	df 93       	push	r29
    4712:	cf 93       	push	r28
    4714:	cd b7       	in	r28, 0x3d	; 61
    4716:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the first 3-bits in TCCR1B register
	 * stop the clock of the timer
	 * timer1 will stop incrementing
	 */
	TIMER1_CONTROL_REGIRSTER_B  =  (TIMER1_CONTROL_REGIRSTER_B  & TIMER1_CLOCK_MASK_CLEAR) ;
    4718:	ae e4       	ldi	r26, 0x4E	; 78
    471a:	b0 e0       	ldi	r27, 0x00	; 0
    471c:	ee e4       	ldi	r30, 0x4E	; 78
    471e:	f0 e0       	ldi	r31, 0x00	; 0
    4720:	80 81       	ld	r24, Z
    4722:	91 81       	ldd	r25, Z+1	; 0x01
    4724:	88 7f       	andi	r24, 0xF8	; 248
    4726:	90 70       	andi	r25, 0x00	; 0
    4728:	11 96       	adiw	r26, 0x01	; 1
    472a:	9c 93       	st	X, r25
    472c:	8e 93       	st	-X, r24
}
    472e:	cf 91       	pop	r28
    4730:	df 91       	pop	r29
    4732:	08 95       	ret

00004734 <Timer1_Start>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void Timer1_Start(Timer_Clock timer1_clock_value)
{
    4734:	df 93       	push	r29
    4736:	cf 93       	push	r28
    4738:	0f 92       	push	r0
    473a:	cd b7       	in	r28, 0x3d	; 61
    473c:	de b7       	in	r29, 0x3e	; 62
    473e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Clear the first 3-bits in TCCR1B register
	 * stop the clock of the timer
	 * timer1 will stop incrementing
	 */
	TIMER1_CONTROL_REGIRSTER_B  =  (TIMER1_CONTROL_REGIRSTER_B  & TIMER1_CLOCK_MASK_CLEAR) | timer1_clock_value;
    4740:	ae e4       	ldi	r26, 0x4E	; 78
    4742:	b0 e0       	ldi	r27, 0x00	; 0
    4744:	ee e4       	ldi	r30, 0x4E	; 78
    4746:	f0 e0       	ldi	r31, 0x00	; 0
    4748:	80 81       	ld	r24, Z
    474a:	91 81       	ldd	r25, Z+1	; 0x01
    474c:	9c 01       	movw	r18, r24
    474e:	28 7f       	andi	r18, 0xF8	; 248
    4750:	30 70       	andi	r19, 0x00	; 0
    4752:	89 81       	ldd	r24, Y+1	; 0x01
    4754:	88 2f       	mov	r24, r24
    4756:	90 e0       	ldi	r25, 0x00	; 0
    4758:	82 2b       	or	r24, r18
    475a:	93 2b       	or	r25, r19
    475c:	11 96       	adiw	r26, 0x01	; 1
    475e:	9c 93       	st	X, r25
    4760:	8e 93       	st	-X, r24
}
    4762:	0f 90       	pop	r0
    4764:	cf 91       	pop	r28
    4766:	df 91       	pop	r29
    4768:	08 95       	ret

0000476a <Timer1_Change_CompareMatchValue>:
 * [Out]            NONE
 *
 * [Returns]:       NONE
 ***************************************************************************************************/
void Timer1_Change_CompareMatchValue(uint16 timer1_newCompareValue, Channel_Type channel)
{
    476a:	df 93       	push	r29
    476c:	cf 93       	push	r28
    476e:	cd b7       	in	r28, 0x3d	; 61
    4770:	de b7       	in	r29, 0x3e	; 62
    4772:	2b 97       	sbiw	r28, 0x0b	; 11
    4774:	0f b6       	in	r0, 0x3f	; 63
    4776:	f8 94       	cli
    4778:	de bf       	out	0x3e, r29	; 62
    477a:	0f be       	out	0x3f, r0	; 63
    477c:	cd bf       	out	0x3d, r28	; 61
    477e:	9a 83       	std	Y+2, r25	; 0x02
    4780:	89 83       	std	Y+1, r24	; 0x01
    4782:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Clear Output Compare Match register for Timer1
	 * then put the new compare value in it, Anding with 0XFFFF to make
	 * sure the value won't exceed 0xffff as it is 16-bit Timer
	 */
	switch (channel)
    4784:	8b 81       	ldd	r24, Y+3	; 0x03
    4786:	28 2f       	mov	r18, r24
    4788:	30 e0       	ldi	r19, 0x00	; 0
    478a:	3b 87       	std	Y+11, r19	; 0x0b
    478c:	2a 87       	std	Y+10, r18	; 0x0a
    478e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4790:	9b 85       	ldd	r25, Y+11	; 0x0b
    4792:	00 97       	sbiw	r24, 0x00	; 0
    4794:	31 f0       	breq	.+12     	; 0x47a2 <Timer1_Change_CompareMatchValue+0x38>
    4796:	2a 85       	ldd	r18, Y+10	; 0x0a
    4798:	3b 85       	ldd	r19, Y+11	; 0x0b
    479a:	21 30       	cpi	r18, 0x01	; 1
    479c:	31 05       	cpc	r19, r1
    479e:	61 f0       	breq	.+24     	; 0x47b8 <Timer1_Change_CompareMatchValue+0x4e>
    47a0:	20 c0       	rjmp	.+64     	; 0x47e2 <Timer1_Change_CompareMatchValue+0x78>
	{
	case ChannelA:
		TIMER1_OUTPUT_COMPARE_REGISTER_A = (TIMER1_OUTPUT_COMPARE_REGISTER_A & 0X0000) |  (timer1_newCompareValue & 0XFFFF);
    47a2:	ea e4       	ldi	r30, 0x4A	; 74
    47a4:	f0 e0       	ldi	r31, 0x00	; 0
    47a6:	80 81       	ld	r24, Z
    47a8:	91 81       	ldd	r25, Z+1	; 0x01
    47aa:	ea e4       	ldi	r30, 0x4A	; 74
    47ac:	f0 e0       	ldi	r31, 0x00	; 0
    47ae:	89 81       	ldd	r24, Y+1	; 0x01
    47b0:	9a 81       	ldd	r25, Y+2	; 0x02
    47b2:	91 83       	std	Z+1, r25	; 0x01
    47b4:	80 83       	st	Z, r24
    47b6:	15 c0       	rjmp	.+42     	; 0x47e2 <Timer1_Change_CompareMatchValue+0x78>
		break;

	case ChannelB:
		TIMER1_OUTPUT_COMPARE_REGISTER_A = ( (TIMER1_OUTPUT_COMPARE_REGISTER_A & 0X0000) |  (timer1_newCompareValue & 0XFFFF) ) + 1;
    47b8:	ea e4       	ldi	r30, 0x4A	; 74
    47ba:	f0 e0       	ldi	r31, 0x00	; 0
    47bc:	20 81       	ld	r18, Z
    47be:	31 81       	ldd	r19, Z+1	; 0x01
    47c0:	ea e4       	ldi	r30, 0x4A	; 74
    47c2:	f0 e0       	ldi	r31, 0x00	; 0
    47c4:	89 81       	ldd	r24, Y+1	; 0x01
    47c6:	9a 81       	ldd	r25, Y+2	; 0x02
    47c8:	01 96       	adiw	r24, 0x01	; 1
    47ca:	91 83       	std	Z+1, r25	; 0x01
    47cc:	80 83       	st	Z, r24
		TIMER1_OUTPUT_COMPARE_REGISTER_B =   (TIMER1_OUTPUT_COMPARE_REGISTER_B & 0X0000) |  (timer1_newCompareValue & 0XFFFF);
    47ce:	e8 e4       	ldi	r30, 0x48	; 72
    47d0:	f0 e0       	ldi	r31, 0x00	; 0
    47d2:	80 81       	ld	r24, Z
    47d4:	91 81       	ldd	r25, Z+1	; 0x01
    47d6:	e8 e4       	ldi	r30, 0x48	; 72
    47d8:	f0 e0       	ldi	r31, 0x00	; 0
    47da:	89 81       	ldd	r24, Y+1	; 0x01
    47dc:	9a 81       	ldd	r25, Y+2	; 0x02
    47de:	91 83       	std	Z+1, r25	; 0x01
    47e0:	80 83       	st	Z, r24

		break;

	}/*End of switch case*/

}
    47e2:	2b 96       	adiw	r28, 0x0b	; 11
    47e4:	0f b6       	in	r0, 0x3f	; 63
    47e6:	f8 94       	cli
    47e8:	de bf       	out	0x3e, r29	; 62
    47ea:	0f be       	out	0x3f, r0	; 63
    47ec:	cd bf       	out	0x3d, r28	; 61
    47ee:	cf 91       	pop	r28
    47f0:	df 91       	pop	r29
    47f2:	08 95       	ret

000047f4 <Timer2_Init>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void Timer2_Init(const Timer2_ConfigType* config_PTR)
{
    47f4:	df 93       	push	r29
    47f6:	cf 93       	push	r28
    47f8:	00 d0       	rcall	.+0      	; 0x47fa <Timer2_Init+0x6>
    47fa:	00 d0       	rcall	.+0      	; 0x47fc <Timer2_Init+0x8>
    47fc:	cd b7       	in	r28, 0x3d	; 61
    47fe:	de b7       	in	r29, 0x3e	; 62
    4800:	9a 83       	std	Y+2, r25	; 0x02
    4802:	89 83       	std	Y+1, r24	; 0x01
	 * Configure initial value for Timer2 to start count from it
	 * Anding with 0XFF to make sure the value won't exceed
	 * 255 as it is 8-bit Timer
	 */

	TIMER2_CONTROL_REGIRSTER = ( (config_PTR->timer2_InitialValue) ) & 0XFF;
    4804:	a5 e4       	ldi	r26, 0x45	; 69
    4806:	b0 e0       	ldi	r27, 0x00	; 0
    4808:	e9 81       	ldd	r30, Y+1	; 0x01
    480a:	fa 81       	ldd	r31, Y+2	; 0x02
    480c:	80 81       	ld	r24, Z
    480e:	8c 93       	st	X, r24
	 * Anding with 0XF8 to make sure the first 3-bits in TCCR2 register=0
	 * ORing with the selected timer clock to include it in the first 3-bits
	 * and keep the other bits as they are
	 */

	TIMER2_CONTROL_REGIRSTER = (TIMER2_CONTROL_REGIRSTER  & TIMER2_CLOCK_MASK_CLEAR) |
    4810:	a5 e4       	ldi	r26, 0x45	; 69
    4812:	b0 e0       	ldi	r27, 0x00	; 0
    4814:	e5 e4       	ldi	r30, 0x45	; 69
    4816:	f0 e0       	ldi	r31, 0x00	; 0
    4818:	80 81       	ld	r24, Z
    481a:	98 2f       	mov	r25, r24
    481c:	98 7f       	andi	r25, 0xF8	; 248
    481e:	e9 81       	ldd	r30, Y+1	; 0x01
    4820:	fa 81       	ldd	r31, Y+2	; 0x02
    4822:	82 81       	ldd	r24, Z+2	; 0x02
    4824:	89 2b       	or	r24, r25
    4826:	8c 93       	st	X, r24
			(config_PTR->timer2_clock);


	switch ( (config_PTR->timer2_mode) )
    4828:	e9 81       	ldd	r30, Y+1	; 0x01
    482a:	fa 81       	ldd	r31, Y+2	; 0x02
    482c:	83 81       	ldd	r24, Z+3	; 0x03
    482e:	28 2f       	mov	r18, r24
    4830:	30 e0       	ldi	r19, 0x00	; 0
    4832:	3c 83       	std	Y+4, r19	; 0x04
    4834:	2b 83       	std	Y+3, r18	; 0x03
    4836:	8b 81       	ldd	r24, Y+3	; 0x03
    4838:	9c 81       	ldd	r25, Y+4	; 0x04
    483a:	81 30       	cpi	r24, 0x01	; 1
    483c:	91 05       	cpc	r25, r1
    483e:	09 f4       	brne	.+2      	; 0x4842 <Timer2_Init+0x4e>
    4840:	5d c0       	rjmp	.+186    	; 0x48fc <Timer2_Init+0x108>
    4842:	eb 81       	ldd	r30, Y+3	; 0x03
    4844:	fc 81       	ldd	r31, Y+4	; 0x04
    4846:	e2 30       	cpi	r30, 0x02	; 2
    4848:	f1 05       	cpc	r31, r1
    484a:	34 f4       	brge	.+12     	; 0x4858 <Timer2_Init+0x64>
    484c:	2b 81       	ldd	r18, Y+3	; 0x03
    484e:	3c 81       	ldd	r19, Y+4	; 0x04
    4850:	21 15       	cp	r18, r1
    4852:	31 05       	cpc	r19, r1
    4854:	71 f0       	breq	.+28     	; 0x4872 <Timer2_Init+0x7e>
    4856:	32 c1       	rjmp	.+612    	; 0x4abc <Timer2_Init+0x2c8>
    4858:	8b 81       	ldd	r24, Y+3	; 0x03
    485a:	9c 81       	ldd	r25, Y+4	; 0x04
    485c:	82 30       	cpi	r24, 0x02	; 2
    485e:	91 05       	cpc	r25, r1
    4860:	09 f4       	brne	.+2      	; 0x4864 <Timer2_Init+0x70>
    4862:	97 c0       	rjmp	.+302    	; 0x4992 <Timer2_Init+0x19e>
    4864:	eb 81       	ldd	r30, Y+3	; 0x03
    4866:	fc 81       	ldd	r31, Y+4	; 0x04
    4868:	e3 30       	cpi	r30, 0x03	; 3
    486a:	f1 05       	cpc	r31, r1
    486c:	09 f4       	brne	.+2      	; 0x4870 <Timer2_Init+0x7c>
    486e:	dc c0       	rjmp	.+440    	; 0x4a28 <Timer2_Init+0x234>
    4870:	25 c1       	rjmp	.+586    	; 0x4abc <Timer2_Init+0x2c8>
		/*
		 * Configure wave form generation mode to work with normal mode
		 * Clear WGM20 bit in TCCR2 register
		 * Clear WGM21 bit in TCCR0 register
		 */
		TIMER2_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER , TIMER2_WAVE_FORM_GENERATION_BIT0);
    4872:	25 e4       	ldi	r18, 0x45	; 69
    4874:	30 e0       	ldi	r19, 0x00	; 0
    4876:	a5 e4       	ldi	r26, 0x45	; 69
    4878:	b0 e0       	ldi	r27, 0x00	; 0
    487a:	e5 e4       	ldi	r30, 0x45	; 69
    487c:	f0 e0       	ldi	r31, 0x00	; 0
    487e:	80 81       	ld	r24, Z
    4880:	8f 7b       	andi	r24, 0xBF	; 191
    4882:	8c 93       	st	X, r24
    4884:	8c 91       	ld	r24, X
    4886:	f9 01       	movw	r30, r18
    4888:	80 83       	st	Z, r24
		TIMER2_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER , TIMER2_WAVE_FORM_GENERATION_BIT1);
    488a:	25 e4       	ldi	r18, 0x45	; 69
    488c:	30 e0       	ldi	r19, 0x00	; 0
    488e:	a5 e4       	ldi	r26, 0x45	; 69
    4890:	b0 e0       	ldi	r27, 0x00	; 0
    4892:	e5 e4       	ldi	r30, 0x45	; 69
    4894:	f0 e0       	ldi	r31, 0x00	; 0
    4896:	80 81       	ld	r24, Z
    4898:	87 7f       	andi	r24, 0xF7	; 247
    489a:	8c 93       	st	X, r24
    489c:	8c 91       	ld	r24, X
    489e:	f9 01       	movw	r30, r18
    48a0:	80 83       	st	Z, r24
		 * Configure compare output mode to work with normal port operation
		 * Decide the mode of OC2 from compare output modes with non PWM
		 * Configure COM20 bit in TCCR2 register
		 * Configure COM21 bit in TCCR2 register
		 */
		TIMER2_CONTROL_REGIRSTER = (TIMER2_CONTROL_REGIRSTER & TIMER2_COM2_MASK_CLEAR ) |
    48a2:	a5 e4       	ldi	r26, 0x45	; 69
    48a4:	b0 e0       	ldi	r27, 0x00	; 0
    48a6:	e5 e4       	ldi	r30, 0x45	; 69
    48a8:	f0 e0       	ldi	r31, 0x00	; 0
    48aa:	80 81       	ld	r24, Z
    48ac:	28 2f       	mov	r18, r24
    48ae:	2f 7c       	andi	r18, 0xCF	; 207
    48b0:	e9 81       	ldd	r30, Y+1	; 0x01
    48b2:	fa 81       	ldd	r31, Y+2	; 0x02
    48b4:	84 81       	ldd	r24, Z+4	; 0x04
    48b6:	88 2f       	mov	r24, r24
    48b8:	90 e0       	ldi	r25, 0x00	; 0
    48ba:	82 95       	swap	r24
    48bc:	92 95       	swap	r25
    48be:	90 7f       	andi	r25, 0xF0	; 240
    48c0:	98 27       	eor	r25, r24
    48c2:	80 7f       	andi	r24, 0xF0	; 240
    48c4:	98 27       	eor	r25, r24
    48c6:	82 2b       	or	r24, r18
    48c8:	8c 93       	st	X, r24
		/*
		 * Configure FOC2 bit in the TCCR2 register to be active
		 * As Timer2 is non-PWM
		 * Make FOC2 to be Active as it is overflow mode
		 */
		TIMER2_CONTROL_REGIRSTER = SET_BIT(TIMER2_CONTROL_REGIRSTER,TIMER2_FORCE_OUTPUT_COMPARE_BIT);
    48ca:	25 e4       	ldi	r18, 0x45	; 69
    48cc:	30 e0       	ldi	r19, 0x00	; 0
    48ce:	a5 e4       	ldi	r26, 0x45	; 69
    48d0:	b0 e0       	ldi	r27, 0x00	; 0
    48d2:	e5 e4       	ldi	r30, 0x45	; 69
    48d4:	f0 e0       	ldi	r31, 0x00	; 0
    48d6:	80 81       	ld	r24, Z
    48d8:	80 68       	ori	r24, 0x80	; 128
    48da:	8c 93       	st	X, r24
    48dc:	8c 91       	ld	r24, X
    48de:	f9 01       	movw	r30, r18
    48e0:	80 83       	st	Z, r24
		 * Enable Timer2 overflow interrupt
		 * wait for: -Enable I-bit "mask bit" in the SREG register
		 *           -TOV2 bit in the TIFR register to be set
		 * Timer2 overflow mode is ready to work after that
		 */
		TIMER2_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER2_INTERRUPT_MASK_REGISTER, TIMER2_OUTPUT_OVERFLOW_INTERRUPT);
    48e2:	29 e5       	ldi	r18, 0x59	; 89
    48e4:	30 e0       	ldi	r19, 0x00	; 0
    48e6:	a9 e5       	ldi	r26, 0x59	; 89
    48e8:	b0 e0       	ldi	r27, 0x00	; 0
    48ea:	e9 e5       	ldi	r30, 0x59	; 89
    48ec:	f0 e0       	ldi	r31, 0x00	; 0
    48ee:	80 81       	ld	r24, Z
    48f0:	80 64       	ori	r24, 0x40	; 64
    48f2:	8c 93       	st	X, r24
    48f4:	8c 91       	ld	r24, X
    48f6:	f9 01       	movw	r30, r18
    48f8:	80 83       	st	Z, r24
    48fa:	e0 c0       	rjmp	.+448    	; 0x4abc <Timer2_Init+0x2c8>
		/*
		 * Configure OC2 as Output PIN
		 * the pin where the PWM signal is generated from MC
		 */

		OC2_DIRECTION_PORT = SET_BIT(OC2_DIRECTION_PORT, OC2_PIN);
    48fc:	21 e3       	ldi	r18, 0x31	; 49
    48fe:	30 e0       	ldi	r19, 0x00	; 0
    4900:	a1 e3       	ldi	r26, 0x31	; 49
    4902:	b0 e0       	ldi	r27, 0x00	; 0
    4904:	e1 e3       	ldi	r30, 0x31	; 49
    4906:	f0 e0       	ldi	r31, 0x00	; 0
    4908:	80 81       	ld	r24, Z
    490a:	80 68       	ori	r24, 0x80	; 128
    490c:	8c 93       	st	X, r24
    490e:	8c 91       	ld	r24, X
    4910:	f9 01       	movw	r30, r18
    4912:	80 83       	st	Z, r24

		/*
		 *Clear force output compare bit in Timer/Counter control register
		 *to work with pulse width modulation
		 */
		TIMER2_CONTROL_REGIRSTER = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER, TIMER2_FORCE_OUTPUT_COMPARE_BIT);
    4914:	25 e4       	ldi	r18, 0x45	; 69
    4916:	30 e0       	ldi	r19, 0x00	; 0
    4918:	a5 e4       	ldi	r26, 0x45	; 69
    491a:	b0 e0       	ldi	r27, 0x00	; 0
    491c:	e5 e4       	ldi	r30, 0x45	; 69
    491e:	f0 e0       	ldi	r31, 0x00	; 0
    4920:	80 81       	ld	r24, Z
    4922:	8f 77       	andi	r24, 0x7F	; 127
    4924:	8c 93       	st	X, r24
    4926:	8c 91       	ld	r24, X
    4928:	f9 01       	movw	r30, r18
    492a:	80 83       	st	Z, r24
		/*
		 * Configure wave form generation mode to work with PWM_PhaseCorrect mode
		 * SET WGM20 bit in TCCR0 register
		 * Clear WGM21 bit in TCCR0 register
		 */
		TIMER2_CONTROL_REGIRSTER = SET_BIT(TIMER2_CONTROL_REGIRSTER, TIMER2_WAVE_FORM_GENERATION_BIT0);
    492c:	25 e4       	ldi	r18, 0x45	; 69
    492e:	30 e0       	ldi	r19, 0x00	; 0
    4930:	a5 e4       	ldi	r26, 0x45	; 69
    4932:	b0 e0       	ldi	r27, 0x00	; 0
    4934:	e5 e4       	ldi	r30, 0x45	; 69
    4936:	f0 e0       	ldi	r31, 0x00	; 0
    4938:	80 81       	ld	r24, Z
    493a:	80 64       	ori	r24, 0x40	; 64
    493c:	8c 93       	st	X, r24
    493e:	8c 91       	ld	r24, X
    4940:	f9 01       	movw	r30, r18
    4942:	80 83       	st	Z, r24
		TIMER2_CONTROL_REGIRSTER = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER, TIMER2_WAVE_FORM_GENERATION_BIT1);
    4944:	25 e4       	ldi	r18, 0x45	; 69
    4946:	30 e0       	ldi	r19, 0x00	; 0
    4948:	a5 e4       	ldi	r26, 0x45	; 69
    494a:	b0 e0       	ldi	r27, 0x00	; 0
    494c:	e5 e4       	ldi	r30, 0x45	; 69
    494e:	f0 e0       	ldi	r31, 0x00	; 0
    4950:	80 81       	ld	r24, Z
    4952:	87 7f       	andi	r24, 0xF7	; 247
    4954:	8c 93       	st	X, r24
    4956:	8c 91       	ld	r24, X
    4958:	f9 01       	movw	r30, r18
    495a:	80 83       	st	Z, r24
		 * Configure compare output mode to work with normal port operation
		 * Decide the mode of OC2 from compare output modes with PWM_PhaseCorrect
		 * Configure COM20 bit in TCCR2 register
		 * Configure COM21 bit in TCCR2 register
		 */
		TIMER2_CONTROL_REGIRSTER = (TIMER2_CONTROL_REGIRSTER & TIMER2_COM2_MASK_CLEAR ) |
    495c:	a5 e4       	ldi	r26, 0x45	; 69
    495e:	b0 e0       	ldi	r27, 0x00	; 0
    4960:	e5 e4       	ldi	r30, 0x45	; 69
    4962:	f0 e0       	ldi	r31, 0x00	; 0
    4964:	80 81       	ld	r24, Z
    4966:	28 2f       	mov	r18, r24
    4968:	2f 7c       	andi	r18, 0xCF	; 207
    496a:	e9 81       	ldd	r30, Y+1	; 0x01
    496c:	fa 81       	ldd	r31, Y+2	; 0x02
    496e:	86 81       	ldd	r24, Z+6	; 0x06
    4970:	88 2f       	mov	r24, r24
    4972:	90 e0       	ldi	r25, 0x00	; 0
    4974:	82 95       	swap	r24
    4976:	92 95       	swap	r25
    4978:	90 7f       	andi	r25, 0xF0	; 240
    497a:	98 27       	eor	r25, r24
    497c:	80 7f       	andi	r24, 0xF0	; 240
    497e:	98 27       	eor	r25, r24
    4980:	82 2b       	or	r24, r18
    4982:	8c 93       	st	X, r24
		/*
		 * Configure Compare match value for Timer2 to start count till reach it
		 * Anding with 0XFF to make sure the value won't exceed
		 * 255 as it is 8-bit Timer
		 */
		TIMER2_OUTPUT_COMPARE_REGISTER = ((config_PTR->timer2_compare_MatchValue)) & 0XFF;
    4984:	a3 e4       	ldi	r26, 0x43	; 67
    4986:	b0 e0       	ldi	r27, 0x00	; 0
    4988:	e9 81       	ldd	r30, Y+1	; 0x01
    498a:	fa 81       	ldd	r31, Y+2	; 0x02
    498c:	81 81       	ldd	r24, Z+1	; 0x01
    498e:	8c 93       	st	X, r24
    4990:	95 c0       	rjmp	.+298    	; 0x4abc <Timer2_Init+0x2c8>
		/*
		 * Configure wave form generation mode to work with CTC mode
		 * Clear WGM20 bit in TCCR2 register
		 * Clear WGM21 bit in TCCR2 register
		 */
		TIMER2_CONTROL_REGIRSTER = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER, TIMER2_WAVE_FORM_GENERATION_BIT0);
    4992:	25 e4       	ldi	r18, 0x45	; 69
    4994:	30 e0       	ldi	r19, 0x00	; 0
    4996:	a5 e4       	ldi	r26, 0x45	; 69
    4998:	b0 e0       	ldi	r27, 0x00	; 0
    499a:	e5 e4       	ldi	r30, 0x45	; 69
    499c:	f0 e0       	ldi	r31, 0x00	; 0
    499e:	80 81       	ld	r24, Z
    49a0:	8f 7b       	andi	r24, 0xBF	; 191
    49a2:	8c 93       	st	X, r24
    49a4:	8c 91       	ld	r24, X
    49a6:	f9 01       	movw	r30, r18
    49a8:	80 83       	st	Z, r24
		TIMER2_CONTROL_REGIRSTER = SET_BIT(TIMER2_CONTROL_REGIRSTER, TIMER2_WAVE_FORM_GENERATION_BIT1);
    49aa:	25 e4       	ldi	r18, 0x45	; 69
    49ac:	30 e0       	ldi	r19, 0x00	; 0
    49ae:	a5 e4       	ldi	r26, 0x45	; 69
    49b0:	b0 e0       	ldi	r27, 0x00	; 0
    49b2:	e5 e4       	ldi	r30, 0x45	; 69
    49b4:	f0 e0       	ldi	r31, 0x00	; 0
    49b6:	80 81       	ld	r24, Z
    49b8:	88 60       	ori	r24, 0x08	; 8
    49ba:	8c 93       	st	X, r24
    49bc:	8c 91       	ld	r24, X
    49be:	f9 01       	movw	r30, r18
    49c0:	80 83       	st	Z, r24
		 * Configure compare output mode to work with normal port operation
		 * Decide the mode of OC0 from compare output modes with non PWM
		 * Configure COM20 bit in TCCR0 register
		 * Configure COM21 bit in TCCR0 register
		 */
		TIMER2_CONTROL_REGIRSTER = (TIMER2_CONTROL_REGIRSTER & TIMER2_COM2_MASK_CLEAR ) |
    49c2:	a5 e4       	ldi	r26, 0x45	; 69
    49c4:	b0 e0       	ldi	r27, 0x00	; 0
    49c6:	e5 e4       	ldi	r30, 0x45	; 69
    49c8:	f0 e0       	ldi	r31, 0x00	; 0
    49ca:	80 81       	ld	r24, Z
    49cc:	28 2f       	mov	r18, r24
    49ce:	2f 7c       	andi	r18, 0xCF	; 207
    49d0:	e9 81       	ldd	r30, Y+1	; 0x01
    49d2:	fa 81       	ldd	r31, Y+2	; 0x02
    49d4:	84 81       	ldd	r24, Z+4	; 0x04
    49d6:	88 2f       	mov	r24, r24
    49d8:	90 e0       	ldi	r25, 0x00	; 0
    49da:	82 95       	swap	r24
    49dc:	92 95       	swap	r25
    49de:	90 7f       	andi	r25, 0xF0	; 240
    49e0:	98 27       	eor	r25, r24
    49e2:	80 7f       	andi	r24, 0xF0	; 240
    49e4:	98 27       	eor	r25, r24
    49e6:	82 2b       	or	r24, r18
    49e8:	8c 93       	st	X, r24
		/*
		 * Configure FOC0 bit in the TCCR2 register to be active
		 * As Timer2 is non-PWM
		 * Make FOC2 to be Active as it is compare mode
		 */
		TIMER2_CONTROL_REGIRSTER = SET_BIT(TIMER2_CONTROL_REGIRSTER, TIMER2_FORCE_OUTPUT_COMPARE_BIT);
    49ea:	25 e4       	ldi	r18, 0x45	; 69
    49ec:	30 e0       	ldi	r19, 0x00	; 0
    49ee:	a5 e4       	ldi	r26, 0x45	; 69
    49f0:	b0 e0       	ldi	r27, 0x00	; 0
    49f2:	e5 e4       	ldi	r30, 0x45	; 69
    49f4:	f0 e0       	ldi	r31, 0x00	; 0
    49f6:	80 81       	ld	r24, Z
    49f8:	80 68       	ori	r24, 0x80	; 128
    49fa:	8c 93       	st	X, r24
    49fc:	8c 91       	ld	r24, X
    49fe:	f9 01       	movw	r30, r18
    4a00:	80 83       	st	Z, r24
		/*
		 * Configure Compare match value for Timer2 to start count from it
		 * Anding with 0XFF to make sure the value won't exceed
		 * 255 as it is 8-bit Timer
		 */
		TIMER2_OUTPUT_COMPARE_REGISTER = ((config_PTR->timer2_compare_MatchValue)) & 0XFF;
    4a02:	a3 e4       	ldi	r26, 0x43	; 67
    4a04:	b0 e0       	ldi	r27, 0x00	; 0
    4a06:	e9 81       	ldd	r30, Y+1	; 0x01
    4a08:	fa 81       	ldd	r31, Y+2	; 0x02
    4a0a:	81 81       	ldd	r24, Z+1	; 0x01
    4a0c:	8c 93       	st	X, r24
		 * Enable Timer0 compare match interrupt
		 * wait for: -Enable I-bit "mask bit" in the SREG register
		 *           -OCF0 bit in the TIFR register to be set
		 * Timer0 compare match mode is ready to work after that
		 */
		TIMER2_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER2_INTERRUPT_MASK_REGISTER, TIMER2_OUTPUT_COMPARE_MATCH_INTERRUPT);
    4a0e:	29 e5       	ldi	r18, 0x59	; 89
    4a10:	30 e0       	ldi	r19, 0x00	; 0
    4a12:	a9 e5       	ldi	r26, 0x59	; 89
    4a14:	b0 e0       	ldi	r27, 0x00	; 0
    4a16:	e9 e5       	ldi	r30, 0x59	; 89
    4a18:	f0 e0       	ldi	r31, 0x00	; 0
    4a1a:	80 81       	ld	r24, Z
    4a1c:	80 68       	ori	r24, 0x80	; 128
    4a1e:	8c 93       	st	X, r24
    4a20:	8c 91       	ld	r24, X
    4a22:	f9 01       	movw	r30, r18
    4a24:	80 83       	st	Z, r24
    4a26:	4a c0       	rjmp	.+148    	; 0x4abc <Timer2_Init+0x2c8>
		/*
		 * Configure OC2 as Output PIN
		 * the pin where the PWM signal is generated from MC
		 */

		OC2_DIRECTION_PORT = SET_BIT(OC2_DIRECTION_PORT, OC2_PIN);
    4a28:	21 e3       	ldi	r18, 0x31	; 49
    4a2a:	30 e0       	ldi	r19, 0x00	; 0
    4a2c:	a1 e3       	ldi	r26, 0x31	; 49
    4a2e:	b0 e0       	ldi	r27, 0x00	; 0
    4a30:	e1 e3       	ldi	r30, 0x31	; 49
    4a32:	f0 e0       	ldi	r31, 0x00	; 0
    4a34:	80 81       	ld	r24, Z
    4a36:	80 68       	ori	r24, 0x80	; 128
    4a38:	8c 93       	st	X, r24
    4a3a:	8c 91       	ld	r24, X
    4a3c:	f9 01       	movw	r30, r18
    4a3e:	80 83       	st	Z, r24

		/*
		 *Clear force output compare bit in Timer/Counter control register
		 *to work with pulse width modulation
		 */
		TIMER2_CONTROL_REGIRSTER = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER, TIMER2_FORCE_OUTPUT_COMPARE_BIT);
    4a40:	25 e4       	ldi	r18, 0x45	; 69
    4a42:	30 e0       	ldi	r19, 0x00	; 0
    4a44:	a5 e4       	ldi	r26, 0x45	; 69
    4a46:	b0 e0       	ldi	r27, 0x00	; 0
    4a48:	e5 e4       	ldi	r30, 0x45	; 69
    4a4a:	f0 e0       	ldi	r31, 0x00	; 0
    4a4c:	80 81       	ld	r24, Z
    4a4e:	8f 77       	andi	r24, 0x7F	; 127
    4a50:	8c 93       	st	X, r24
    4a52:	8c 91       	ld	r24, X
    4a54:	f9 01       	movw	r30, r18
    4a56:	80 83       	st	Z, r24
		/*
		 * Configure wave form generation mode to work with FAST PWM mode
		 * SET WGM20 bit in TCCR2 register
		 * SET WGM21 bit in TCCR2 register
		 */
		TIMER2_CONTROL_REGIRSTER = SET_BIT(TIMER2_CONTROL_REGIRSTER, TIMER2_WAVE_FORM_GENERATION_BIT0);
    4a58:	25 e4       	ldi	r18, 0x45	; 69
    4a5a:	30 e0       	ldi	r19, 0x00	; 0
    4a5c:	a5 e4       	ldi	r26, 0x45	; 69
    4a5e:	b0 e0       	ldi	r27, 0x00	; 0
    4a60:	e5 e4       	ldi	r30, 0x45	; 69
    4a62:	f0 e0       	ldi	r31, 0x00	; 0
    4a64:	80 81       	ld	r24, Z
    4a66:	80 64       	ori	r24, 0x40	; 64
    4a68:	8c 93       	st	X, r24
    4a6a:	8c 91       	ld	r24, X
    4a6c:	f9 01       	movw	r30, r18
    4a6e:	80 83       	st	Z, r24
		TIMER2_CONTROL_REGIRSTER = SET_BIT(TIMER2_CONTROL_REGIRSTER, TIMER2_WAVE_FORM_GENERATION_BIT1);
    4a70:	25 e4       	ldi	r18, 0x45	; 69
    4a72:	30 e0       	ldi	r19, 0x00	; 0
    4a74:	a5 e4       	ldi	r26, 0x45	; 69
    4a76:	b0 e0       	ldi	r27, 0x00	; 0
    4a78:	e5 e4       	ldi	r30, 0x45	; 69
    4a7a:	f0 e0       	ldi	r31, 0x00	; 0
    4a7c:	80 81       	ld	r24, Z
    4a7e:	88 60       	ori	r24, 0x08	; 8
    4a80:	8c 93       	st	X, r24
    4a82:	8c 91       	ld	r24, X
    4a84:	f9 01       	movw	r30, r18
    4a86:	80 83       	st	Z, r24
		 * Configure compare output mode to work with normal port operation
		 * Decide the mode of OC2 from compare output modes with non PWM
		 * Configure COM20 bit in TCCR2 register
		 * Configure COM21 bit in TCCR2 register
		 */
		TIMER2_CONTROL_REGIRSTER = (TIMER2_CONTROL_REGIRSTER & TIMER2_COM2_MASK_CLEAR ) |
    4a88:	a5 e4       	ldi	r26, 0x45	; 69
    4a8a:	b0 e0       	ldi	r27, 0x00	; 0
    4a8c:	e5 e4       	ldi	r30, 0x45	; 69
    4a8e:	f0 e0       	ldi	r31, 0x00	; 0
    4a90:	80 81       	ld	r24, Z
    4a92:	28 2f       	mov	r18, r24
    4a94:	2f 7c       	andi	r18, 0xCF	; 207
    4a96:	e9 81       	ldd	r30, Y+1	; 0x01
    4a98:	fa 81       	ldd	r31, Y+2	; 0x02
    4a9a:	85 81       	ldd	r24, Z+5	; 0x05
    4a9c:	88 2f       	mov	r24, r24
    4a9e:	90 e0       	ldi	r25, 0x00	; 0
    4aa0:	82 95       	swap	r24
    4aa2:	92 95       	swap	r25
    4aa4:	90 7f       	andi	r25, 0xF0	; 240
    4aa6:	98 27       	eor	r25, r24
    4aa8:	80 7f       	andi	r24, 0xF0	; 240
    4aaa:	98 27       	eor	r25, r24
    4aac:	82 2b       	or	r24, r18
    4aae:	8c 93       	st	X, r24
		/*
		 * Configure Compare match value for Timer2 to start count till reach it
		 * Anding with 0XFF to make sure the value won't exceed
		 * 255 as it is 8-bit Timer
		 */
		TIMER2_OUTPUT_COMPARE_REGISTER = ((config_PTR->timer2_compare_MatchValue)) & 0XFF;
    4ab0:	a3 e4       	ldi	r26, 0x43	; 67
    4ab2:	b0 e0       	ldi	r27, 0x00	; 0
    4ab4:	e9 81       	ldd	r30, Y+1	; 0x01
    4ab6:	fa 81       	ldd	r31, Y+2	; 0x02
    4ab8:	81 81       	ldd	r24, Z+1	; 0x01
    4aba:	8c 93       	st	X, r24

		break;/*End of Fast PWM*/

	}/*End of switch case for timer2_mode*/

}/*End of Timer2_Init*/
    4abc:	0f 90       	pop	r0
    4abe:	0f 90       	pop	r0
    4ac0:	0f 90       	pop	r0
    4ac2:	0f 90       	pop	r0
    4ac4:	cf 91       	pop	r28
    4ac6:	df 91       	pop	r29
    4ac8:	08 95       	ret

00004aca <Timer2_setCallBack>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void Timer2_setCallBack( void(*a_ptr)(void) )
{
    4aca:	df 93       	push	r29
    4acc:	cf 93       	push	r28
    4ace:	00 d0       	rcall	.+0      	; 0x4ad0 <Timer2_setCallBack+0x6>
    4ad0:	cd b7       	in	r28, 0x3d	; 61
    4ad2:	de b7       	in	r29, 0x3e	; 62
    4ad4:	9a 83       	std	Y+2, r25	; 0x02
    4ad6:	89 83       	std	Y+1, r24	; 0x01
	g_Timer2_callBackPtr = a_ptr;
    4ad8:	89 81       	ldd	r24, Y+1	; 0x01
    4ada:	9a 81       	ldd	r25, Y+2	; 0x02
    4adc:	90 93 79 00 	sts	0x0079, r25
    4ae0:	80 93 78 00 	sts	0x0078, r24
}
    4ae4:	0f 90       	pop	r0
    4ae6:	0f 90       	pop	r0
    4ae8:	cf 91       	pop	r28
    4aea:	df 91       	pop	r29
    4aec:	08 95       	ret

00004aee <Timer2_DeInit>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void Timer2_DeInit(void)
{
    4aee:	df 93       	push	r29
    4af0:	cf 93       	push	r28
    4af2:	00 d0       	rcall	.+0      	; 0x4af4 <Timer2_DeInit+0x6>
    4af4:	00 d0       	rcall	.+0      	; 0x4af6 <Timer2_DeInit+0x8>
    4af6:	cd b7       	in	r28, 0x3d	; 61
    4af8:	de b7       	in	r29, 0x3e	; 62

	/*Clear all register in Timer0*/
	TIMER2_CONTROL_REGIRSTER        &= 0X00;
    4afa:	e5 e4       	ldi	r30, 0x45	; 69
    4afc:	f0 e0       	ldi	r31, 0x00	; 0
    4afe:	80 81       	ld	r24, Z
    4b00:	e5 e4       	ldi	r30, 0x45	; 69
    4b02:	f0 e0       	ldi	r31, 0x00	; 0
    4b04:	10 82       	st	Z, r1
	TIMER2_INITIAL_VALUE_REGISTER   &= 0X00;
    4b06:	e4 e4       	ldi	r30, 0x44	; 68
    4b08:	f0 e0       	ldi	r31, 0x00	; 0
    4b0a:	80 81       	ld	r24, Z
    4b0c:	e4 e4       	ldi	r30, 0x44	; 68
    4b0e:	f0 e0       	ldi	r31, 0x00	; 0
    4b10:	10 82       	st	Z, r1
	TIMER2_OUTPUT_COMPARE_REGISTER  &= 0X00;
    4b12:	e3 e4       	ldi	r30, 0x43	; 67
    4b14:	f0 e0       	ldi	r31, 0x00	; 0
    4b16:	80 81       	ld	r24, Z
    4b18:	e3 e4       	ldi	r30, 0x43	; 67
    4b1a:	f0 e0       	ldi	r31, 0x00	; 0
    4b1c:	10 82       	st	Z, r1
	TIMER2_INTERRUPT_MASK_REGISTER  &= 0X00;
    4b1e:	e9 e5       	ldi	r30, 0x59	; 89
    4b20:	f0 e0       	ldi	r31, 0x00	; 0
    4b22:	80 81       	ld	r24, Z
    4b24:	e9 e5       	ldi	r30, 0x59	; 89
    4b26:	f0 e0       	ldi	r31, 0x00	; 0
    4b28:	10 82       	st	Z, r1

}/*End of Timer0_DEInit*/
    4b2a:	0f 90       	pop	r0
    4b2c:	0f 90       	pop	r0
    4b2e:	0f 90       	pop	r0
    4b30:	0f 90       	pop	r0
    4b32:	cf 91       	pop	r28
    4b34:	df 91       	pop	r29
    4b36:	08 95       	ret

00004b38 <Timer2_Stop>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void Timer2_Stop(void)
{
    4b38:	df 93       	push	r29
    4b3a:	cf 93       	push	r28
    4b3c:	cd b7       	in	r28, 0x3d	; 61
    4b3e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the first 3-bits in TCCR0 register
	 * stop the clock of the timer
	 * timer0 will stop incrementing
	 */
	TIMER2_CONTROL_REGIRSTER = (TIMER2_CONTROL_REGIRSTER  & TIMER2_CLOCK_MASK_CLEAR);
    4b40:	a5 e4       	ldi	r26, 0x45	; 69
    4b42:	b0 e0       	ldi	r27, 0x00	; 0
    4b44:	e5 e4       	ldi	r30, 0x45	; 69
    4b46:	f0 e0       	ldi	r31, 0x00	; 0
    4b48:	80 81       	ld	r24, Z
    4b4a:	88 7f       	andi	r24, 0xF8	; 248
    4b4c:	8c 93       	st	X, r24
}
    4b4e:	cf 91       	pop	r28
    4b50:	df 91       	pop	r29
    4b52:	08 95       	ret

00004b54 <Timer2_Start>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void Timer2_Start(Timer_Clock timer2_clock_value)
{
    4b54:	df 93       	push	r29
    4b56:	cf 93       	push	r28
    4b58:	0f 92       	push	r0
    4b5a:	cd b7       	in	r28, 0x3d	; 61
    4b5c:	de b7       	in	r29, 0x3e	; 62
    4b5e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Clear the first 3-bits in TCCR0 register
	 * stop the clock of the timer
	 * timer0 will stop incrementing
	 */
	TIMER2_CONTROL_REGIRSTER = (TIMER2_CONTROL_REGIRSTER  & TIMER2_CLOCK_MASK_CLEAR) | timer2_clock_value ;
    4b60:	a5 e4       	ldi	r26, 0x45	; 69
    4b62:	b0 e0       	ldi	r27, 0x00	; 0
    4b64:	e5 e4       	ldi	r30, 0x45	; 69
    4b66:	f0 e0       	ldi	r31, 0x00	; 0
    4b68:	80 81       	ld	r24, Z
    4b6a:	98 2f       	mov	r25, r24
    4b6c:	98 7f       	andi	r25, 0xF8	; 248
    4b6e:	89 81       	ldd	r24, Y+1	; 0x01
    4b70:	89 2b       	or	r24, r25
    4b72:	8c 93       	st	X, r24
}
    4b74:	0f 90       	pop	r0
    4b76:	cf 91       	pop	r28
    4b78:	df 91       	pop	r29
    4b7a:	08 95       	ret

00004b7c <Timer2_Change_CompareMatchValue>:
 * [Out]            NONE
 *
 * [Returns]:       NONE
 ***************************************************************************************************/
void Timer2_Change_CompareMatchValue(uint8 timer2_newCompareValue)
{
    4b7c:	df 93       	push	r29
    4b7e:	cf 93       	push	r28
    4b80:	00 d0       	rcall	.+0      	; 0x4b82 <Timer2_Change_CompareMatchValue+0x6>
    4b82:	cd b7       	in	r28, 0x3d	; 61
    4b84:	de b7       	in	r29, 0x3e	; 62
    4b86:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Clear Output Compare Match register for Timer0
	 * then put the new compare value in it, Anding with 0XFF to make
	 * sure the value won't exceed 255 as it is 8-bit Timer
	 */
	TIMER2_OUTPUT_COMPARE_REGISTER = (TIMER2_OUTPUT_COMPARE_REGISTER & 0X00) |
    4b88:	e3 e4       	ldi	r30, 0x43	; 67
    4b8a:	f0 e0       	ldi	r31, 0x00	; 0
    4b8c:	80 81       	ld	r24, Z
    4b8e:	e3 e4       	ldi	r30, 0x43	; 67
    4b90:	f0 e0       	ldi	r31, 0x00	; 0
    4b92:	89 81       	ldd	r24, Y+1	; 0x01
    4b94:	80 83       	st	Z, r24
			(timer2_newCompareValue & 0XFF);
}
    4b96:	0f 90       	pop	r0
    4b98:	0f 90       	pop	r0
    4b9a:	cf 91       	pop	r28
    4b9c:	df 91       	pop	r29
    4b9e:	08 95       	ret

00004ba0 <__udivmodqi4>:
    4ba0:	99 1b       	sub	r25, r25
    4ba2:	79 e0       	ldi	r23, 0x09	; 9
    4ba4:	04 c0       	rjmp	.+8      	; 0x4bae <__udivmodqi4_ep>

00004ba6 <__udivmodqi4_loop>:
    4ba6:	99 1f       	adc	r25, r25
    4ba8:	96 17       	cp	r25, r22
    4baa:	08 f0       	brcs	.+2      	; 0x4bae <__udivmodqi4_ep>
    4bac:	96 1b       	sub	r25, r22

00004bae <__udivmodqi4_ep>:
    4bae:	88 1f       	adc	r24, r24
    4bb0:	7a 95       	dec	r23
    4bb2:	c9 f7       	brne	.-14     	; 0x4ba6 <__udivmodqi4_loop>
    4bb4:	80 95       	com	r24
    4bb6:	08 95       	ret

00004bb8 <__prologue_saves__>:
    4bb8:	2f 92       	push	r2
    4bba:	3f 92       	push	r3
    4bbc:	4f 92       	push	r4
    4bbe:	5f 92       	push	r5
    4bc0:	6f 92       	push	r6
    4bc2:	7f 92       	push	r7
    4bc4:	8f 92       	push	r8
    4bc6:	9f 92       	push	r9
    4bc8:	af 92       	push	r10
    4bca:	bf 92       	push	r11
    4bcc:	cf 92       	push	r12
    4bce:	df 92       	push	r13
    4bd0:	ef 92       	push	r14
    4bd2:	ff 92       	push	r15
    4bd4:	0f 93       	push	r16
    4bd6:	1f 93       	push	r17
    4bd8:	cf 93       	push	r28
    4bda:	df 93       	push	r29
    4bdc:	cd b7       	in	r28, 0x3d	; 61
    4bde:	de b7       	in	r29, 0x3e	; 62
    4be0:	ca 1b       	sub	r28, r26
    4be2:	db 0b       	sbc	r29, r27
    4be4:	0f b6       	in	r0, 0x3f	; 63
    4be6:	f8 94       	cli
    4be8:	de bf       	out	0x3e, r29	; 62
    4bea:	0f be       	out	0x3f, r0	; 63
    4bec:	cd bf       	out	0x3d, r28	; 61
    4bee:	09 94       	ijmp

00004bf0 <__epilogue_restores__>:
    4bf0:	2a 88       	ldd	r2, Y+18	; 0x12
    4bf2:	39 88       	ldd	r3, Y+17	; 0x11
    4bf4:	48 88       	ldd	r4, Y+16	; 0x10
    4bf6:	5f 84       	ldd	r5, Y+15	; 0x0f
    4bf8:	6e 84       	ldd	r6, Y+14	; 0x0e
    4bfa:	7d 84       	ldd	r7, Y+13	; 0x0d
    4bfc:	8c 84       	ldd	r8, Y+12	; 0x0c
    4bfe:	9b 84       	ldd	r9, Y+11	; 0x0b
    4c00:	aa 84       	ldd	r10, Y+10	; 0x0a
    4c02:	b9 84       	ldd	r11, Y+9	; 0x09
    4c04:	c8 84       	ldd	r12, Y+8	; 0x08
    4c06:	df 80       	ldd	r13, Y+7	; 0x07
    4c08:	ee 80       	ldd	r14, Y+6	; 0x06
    4c0a:	fd 80       	ldd	r15, Y+5	; 0x05
    4c0c:	0c 81       	ldd	r16, Y+4	; 0x04
    4c0e:	1b 81       	ldd	r17, Y+3	; 0x03
    4c10:	aa 81       	ldd	r26, Y+2	; 0x02
    4c12:	b9 81       	ldd	r27, Y+1	; 0x01
    4c14:	ce 0f       	add	r28, r30
    4c16:	d1 1d       	adc	r29, r1
    4c18:	0f b6       	in	r0, 0x3f	; 63
    4c1a:	f8 94       	cli
    4c1c:	de bf       	out	0x3e, r29	; 62
    4c1e:	0f be       	out	0x3f, r0	; 63
    4c20:	cd bf       	out	0x3d, r28	; 61
    4c22:	ed 01       	movw	r28, r26
    4c24:	08 95       	ret

00004c26 <itoa>:
    4c26:	fb 01       	movw	r30, r22
    4c28:	9f 01       	movw	r18, r30
    4c2a:	e8 94       	clt
    4c2c:	42 30       	cpi	r20, 0x02	; 2
    4c2e:	c4 f0       	brlt	.+48     	; 0x4c60 <itoa+0x3a>
    4c30:	45 32       	cpi	r20, 0x25	; 37
    4c32:	b4 f4       	brge	.+44     	; 0x4c60 <itoa+0x3a>
    4c34:	4a 30       	cpi	r20, 0x0A	; 10
    4c36:	29 f4       	brne	.+10     	; 0x4c42 <itoa+0x1c>
    4c38:	97 fb       	bst	r25, 7
    4c3a:	1e f4       	brtc	.+6      	; 0x4c42 <itoa+0x1c>
    4c3c:	90 95       	com	r25
    4c3e:	81 95       	neg	r24
    4c40:	9f 4f       	sbci	r25, 0xFF	; 255
    4c42:	64 2f       	mov	r22, r20
    4c44:	77 27       	eor	r23, r23
    4c46:	0e 94 44 26 	call	0x4c88	; 0x4c88 <__udivmodhi4>
    4c4a:	80 5d       	subi	r24, 0xD0	; 208
    4c4c:	8a 33       	cpi	r24, 0x3A	; 58
    4c4e:	0c f0       	brlt	.+2      	; 0x4c52 <itoa+0x2c>
    4c50:	89 5d       	subi	r24, 0xD9	; 217
    4c52:	81 93       	st	Z+, r24
    4c54:	cb 01       	movw	r24, r22
    4c56:	00 97       	sbiw	r24, 0x00	; 0
    4c58:	a1 f7       	brne	.-24     	; 0x4c42 <itoa+0x1c>
    4c5a:	16 f4       	brtc	.+4      	; 0x4c60 <itoa+0x3a>
    4c5c:	5d e2       	ldi	r21, 0x2D	; 45
    4c5e:	51 93       	st	Z+, r21
    4c60:	10 82       	st	Z, r1
    4c62:	c9 01       	movw	r24, r18
    4c64:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <strrev>

00004c68 <strrev>:
    4c68:	dc 01       	movw	r26, r24
    4c6a:	fc 01       	movw	r30, r24
    4c6c:	67 2f       	mov	r22, r23
    4c6e:	71 91       	ld	r23, Z+
    4c70:	77 23       	and	r23, r23
    4c72:	e1 f7       	brne	.-8      	; 0x4c6c <strrev+0x4>
    4c74:	32 97       	sbiw	r30, 0x02	; 2
    4c76:	04 c0       	rjmp	.+8      	; 0x4c80 <strrev+0x18>
    4c78:	7c 91       	ld	r23, X
    4c7a:	6d 93       	st	X+, r22
    4c7c:	70 83       	st	Z, r23
    4c7e:	62 91       	ld	r22, -Z
    4c80:	ae 17       	cp	r26, r30
    4c82:	bf 07       	cpc	r27, r31
    4c84:	c8 f3       	brcs	.-14     	; 0x4c78 <strrev+0x10>
    4c86:	08 95       	ret

00004c88 <__udivmodhi4>:
    4c88:	aa 1b       	sub	r26, r26
    4c8a:	bb 1b       	sub	r27, r27
    4c8c:	51 e1       	ldi	r21, 0x11	; 17
    4c8e:	07 c0       	rjmp	.+14     	; 0x4c9e <__udivmodhi4_ep>

00004c90 <__udivmodhi4_loop>:
    4c90:	aa 1f       	adc	r26, r26
    4c92:	bb 1f       	adc	r27, r27
    4c94:	a6 17       	cp	r26, r22
    4c96:	b7 07       	cpc	r27, r23
    4c98:	10 f0       	brcs	.+4      	; 0x4c9e <__udivmodhi4_ep>
    4c9a:	a6 1b       	sub	r26, r22
    4c9c:	b7 0b       	sbc	r27, r23

00004c9e <__udivmodhi4_ep>:
    4c9e:	88 1f       	adc	r24, r24
    4ca0:	99 1f       	adc	r25, r25
    4ca2:	5a 95       	dec	r21
    4ca4:	a9 f7       	brne	.-22     	; 0x4c90 <__udivmodhi4_loop>
    4ca6:	80 95       	com	r24
    4ca8:	90 95       	com	r25
    4caa:	bc 01       	movw	r22, r24
    4cac:	cd 01       	movw	r24, r26
    4cae:	08 95       	ret

00004cb0 <_exit>:
    4cb0:	f8 94       	cli

00004cb2 <__stop_program>:
    4cb2:	ff cf       	rjmp	.-2      	; 0x4cb2 <__stop_program>
